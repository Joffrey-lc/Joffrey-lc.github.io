<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>无线能量传输-能量接收机的非线性接收模型（一）</title>
    <link href="/2022/04/25/EH-nonlinear-model1/"/>
    <url>/2022/04/25/EH-nonlinear-model1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Date: 2022.04.22  17:07<br>Author: Joffrey LC</p><hr><p><strong>Practical Non-Linear Energy Harvesting Model and Resource Allocation for SWIPT Systems</strong>.  <em>Elena Boshkovska</em> et.al.  <strong>IEEE Communications Letters, Dec.  2015</strong>  (<a href="https://ieeexplore.ieee.org/document/7264986">pdf</a>)  (Citations <strong>551</strong>)</p><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><ul><li>提出Energy Harvesting Model 是 non-linear的，并给出模型（需要根据具体测量值，拟合得到具体参数）</li><li>给出一种双重循环的快速解决方案（这部分简单看了一下）</li></ul><div class="note note-success">            <p>如果噪声是矩阵形式，应该表示为<script type="math/tex">\textbf{n}\sim\mathcal{CN}(\textbf{0},\sigma^2\textbf{I})</script>，其中<script type="math/tex">\sigma^2</script>表示噪声的功率</p>          </div><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="Energy-Harvesting-Model"><a href="#Energy-Harvesting-Model" class="headerlink" title="Energy Harvesting Model"></a>Energy Harvesting Model</h3><p>Proposed a Non- Linear EH model based on the logistic (sigmoid) function: </p><script type="math/tex; mode=display">\begin{aligned}\Phi_{\mathrm{ER}_{j}}^{\text {Practical }} &=\frac{\left[\Psi_{\mathrm{ER}_{j}}^{\text {Practical }}-M_{j} \Omega_{j}\right]}{1-\Omega_{j}}, \Omega_{j}=\frac{1}{1+\exp \left(a_{j} b_{j}\right)} \\\Psi_{\mathrm{ER}_{j}}^{\text {Practical }} &=\frac{M_{j}}{1+\exp \left(-a_{j}\left(P_{\mathrm{ER}_{j}}-b_{j}\right)\right)}\end{aligned}</script><p>其中，<script type="math/tex">\Phi_{\mathrm{ER}_{j}}^{\text {Practical }}</script>代表<script type="math/tex">j</script>-th ER 接受到的总能量；<script type="math/tex">\Psi_{\mathrm{ER}_{j}}^{\text {Practical }}</script>代表logistic function with respect to the receive RF power <script type="math/tex">P_{\mathrm{ER}_{j}}</script>。<span class="label label-primary">其他参数例如$$a_j,b_j,M_j$$都是通过对实际电路模型的测量值进行拟合得到</span></p><div class="note note-success">            <p><strong>并且由于<script type="math/tex">\Omega_j</script>并不影响<script type="math/tex">\textbf{w}</script>的设计，所以一般采用<script type="math/tex">\Psi_{\mathrm{ER}_{j}}^{\text {Practical }}</script>表示接收到的能量。</strong>有典型值<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="T. Le, K. Mayaram and T. Fiez, “Efficient Far-Field Radio Frequency Energy Harvesting for Passively Powered Sensor Networks,” in IEEE Journal of Solid-State Circuits, vol. 43, no. 5, pp. 1287-1302, May 2008, doi: 10.1109/JSSC.2008.920318. ↩">[1]</span></a></sup>：</p><script type="math/tex; mode=display">M_j=20\text{mW},a_j=6400,b_j=0.003</script>          </div><h3 id="双循环解法"><a href="#双循环解法" class="headerlink" title="双循环解法"></a>双循环解法</h3><h4 id="原始问题建模："><a href="#原始问题建模：" class="headerlink" title="原始问题建模："></a>原始问题建模：</h4><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220425153130097.png" alt="原始问题建模" style="zoom: 80%;" /></p><p>C1：功率约束</p><p>C2：SINR约束</p><h4 id="Proposal-流程"><a href="#Proposal-流程" class="headerlink" title="Proposal 流程"></a>Proposal 流程</h4><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220425153239885.png" alt="提出算法流程" style="zoom: 60%;" /></p><div class="note note-success">            <p>另外有一个重要理论（没有证明）：</p>          </div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220425153355034.png" alt="重要理论" style="zoom:60%;" /></p><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220425153919035.png" alt="exp1" style="zoom:60%;" /></p><ul><li>Harvested Energy 随着Minimum required SINR 增大而减小</li><li>Harvested Energy 随着单个ER的天线数量<script type="math/tex">N_T</script>的增大而增大：因为更多的天线带来更高的自由度，会得到更高效的资源分配方案</li></ul><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220425153946764.png" alt="exp2" style="zoom:60%;" /></p><ul><li>Harvested Energy 随着ERs数量增大而增大，而且性能增益（Performance Gap between Non-Linear Model with Linear Model）增大：因为ERs数量增大，Baseline（Performance with Linear Model）的失配（mismatch）更严重</li></ul><div class="note note-success">                      </div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>T. Le, K. Mayaram and T. Fiez, “Efficient Far-Field Radio Frequency Energy Harvesting for Passively Powered Sensor Networks,” in <em>IEEE Journal of Solid-State Circuits</em>, vol. 43, no. 5, pp. 1287-1302, May 2008, doi: 10.1109/JSSC.2008.920318. ↩<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Wireless Energy Transfer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WPT</tag>
      
      <tag>Energy Harvested Model</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-P/NP/NPC/NP-Hard问题</title>
    <link href="/2022/04/25/PandNPandNPhard/"/>
    <url>/2022/04/25/PandNPandNPhard/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考<a href="https://zhuanlan.zhihu.com/p/83990003">知乎博客</a></p><h2 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h2><p>首先解释一下<strong>规约</strong>的概念，如果能找到这样一个变化法则，对任意一个程序A的输入，都能按这个法则变换成程序B的输入，使两程序的输出相同，那么我们说，问题A可约化为问题B，即可以用问题B的解法解决问题A，或者说，问题A可以“变成”问题B。</p><p>例如A是求一元一次方程的解，B是求一元二次方程的解，A的输入参数是k和m，B的输入参数是a，b和c。</p><p>显然，我们可以令<script type="math/tex">a=k^2, b=2km, c=m^2</script>，这样我们就可以通过解问题B来求解问题A了。当然，A和B问题都不是NP问题。</p><p>可以看出，B的时间复杂度高于或者等于A的时间复杂度。也就是说，<strong>问题A不比问题B难</strong>。</p><h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><p>P问题: <strong>能在多项式时间内解决的问题</strong>。考虑时间复杂度，P问题的时间复杂度总是可以用多项式表示，或小于某多项式表示的。</p><h2 id="NP"><a href="#NP" class="headerlink" title="NP"></a>NP</h2><p>NP问题: 不能在多项式时间内解决或不确定能不能在多项式时间内解决，但能在多项式时间<strong>验证</strong>的问题。</p><h2 id="NPC"><a href="#NPC" class="headerlink" title="NPC"></a>NPC</h2><p>NPC问题：它是一个NP问题，且所有的NP问题都可以用多项式时间约化到它。更本质的理解，我们把<strong>规约</strong>看作一种偏序关系，那么NPC就是NP的上届。一句话，<strong>所有NP问题都不比NPC难。</strong></p><h2 id="NP-hard"><a href="#NP-hard" class="headerlink" title="NP-hard"></a>NP-hard</h2><p>NP-Hard问题：NP-hard满足所有的NP问题都可以用多项式时间约化到它，但并不要求其是一个NP的问题。或者说，NP-hard是所有问题的上届。也就是说，<strong>所有问题都不比NP-hard难。</strong></p><p>可以看出，NP-hard问题的范围比NPC的范围更大。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/v2-df33fc6b9fb9c526f7e21d4bbbdee578_1440w.jpg" alt="P, NP, NPC 和 NPhard"></p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NP-hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSI-Free相关文献代码复现</title>
    <link href="/2022/04/24/reproductionofOnel/"/>
    <url>/2022/04/24/reproductionofOnel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OneL’s-CSI-Free-and-CSI-Based-Wireless-Energy-Transfer-Method-Reproduction"><a href="#OneL’s-CSI-Free-and-CSI-Based-Wireless-Energy-Transfer-Method-Reproduction" class="headerlink" title="OneL’s CSI-Free and CSI-Based Wireless Energy Transfer Method Reproduction"></a>OneL’s CSI-Free and CSI-Based Wireless Energy Transfer Method Reproduction</h1><p>参考OneL’s Github<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/onel2428/WEToverview">[1]</span></a></sup>源码复现。</p><h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><div>            <input type="checkbox" disabled checked="checked">fix the bug of EH_Transfer_Funtion.m          </div><div>            <input type="checkbox" disabled checked="checked">build code by formula derivation          </div><div>            <input type="checkbox" disabled checked="checked">improve the CSI-based algorithm according to Reference 6          </div> <h3 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h3><div>            <input type="checkbox" disabled >Change the EH-Transfer-Function          </div><div>            <input type="checkbox" disabled >Change the Channel Path loss          </div><h2 id="Channel-Path-Loss"><a href="#Channel-Path-Loss" class="headerlink" title="Channel Path Loss"></a>Channel Path Loss</h2><p>直接搬用OneL的log-distance model：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> beta <span class="token operator">=</span> <span class="token function">channel_path_loss</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token comment">%Channel path-loss between device at position (x1,y1) and another device at position (x2,y2)</span><span class="token comment">%% Input parameters:</span><span class="token comment">% (x1,y1) -> coordinates of the first node</span><span class="token comment">% (x2,y2) -> coordinates of the second node</span><span class="token comment">%% Output parameters:</span><span class="token comment">% beta    -> path-loss between the two nodes at (x1,y1) and (x2,y2)</span><span class="token comment">%% The path loss is comupted using the log-distance model</span><span class="token comment">% Setting path-loss exponent and attenuation at reference distance of 1m</span>exponent <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span>         <span class="token comment">%path loss exponent</span>attenuation1m <span class="token operator">=</span> <span class="token number">1e-3</span><span class="token punctuation">;</span>   <span class="token comment">%average power attenuation at 1m</span><span class="token comment">% Path loss computation</span>beta <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>attenuation1m<span class="token operator">*</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token operator">-</span>exponent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>返回一个系数beta作为路径衰落。随相对距离Distance的指数衰减（但是我没有找到论文或者表述来描述这个所谓的log-distance model）</p><p>防止在Distance=0时beta&gt;1，所以有一个<script type="math/tex">\min(\cdot)</script>。</p><h2 id="Channel-Model"><a href="#Channel-Model" class="headerlink" title="Channel Model"></a>Channel Model</h2><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>准静态信道，也是几乎所有OneL文章使用的模型<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[2]</span></a></sup>，分为直射信道（LoS）和非直射信道（NLoS）:</p><script type="math/tex; mode=display">\begin{aligned}\textbf{h}=\sqrt{\frac{\kappa}{1+\kappa}}e^{\text{i}\varphi_0}\textbf{h}_{\text{los}}+\sqrt{\frac{1}{\kappa+1}}\textbf{h}_{\text{nlos}}\end{aligned}</script><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> h <span class="token operator">=</span> <span class="token function">RicianFadingChannel</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span>M<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> choice<span class="token punctuation">)</span>     phi <span class="token operator">=</span> <span class="token function">atan</span><span class="token punctuation">(</span>y<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% 发射角度</span>    Phi <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>    h_los <span class="token operator">=</span> <span class="token function">PreventiveAdjustmentofMeanShift</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">.*</span>Phi<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> M<span class="token punctuation">,</span> choice<span class="token punctuation">)</span><span class="token punctuation">;</span>    hnlos <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>kappa<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>kappa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>h_los<span class="token operator">*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>kappa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>hnlos<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Preventive-Adjustment-of-Mean-Shift"><a href="#Preventive-Adjustment-of-Mean-Shift" class="headerlink" title="Preventive Adjustment of Mean Shift"></a>Preventive Adjustment of Mean Shift</h3><p>同时考虑到Preventive Adjustment of Mean Shift，有：</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> h <span class="token operator">=</span> <span class="token function">PreventiveAdjustmentofMeanShift</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> M<span class="token punctuation">,</span> choice<span class="token punctuation">)</span><span class="token comment">% M: Antennas</span>    <span class="token keyword">switch</span> choice        <span class="token keyword">case</span> <span class="token string">'mean'</span>            varphi <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>            h <span class="token operator">=</span> h<span class="token operator">.*</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span>varphi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'variance'</span>            h <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'none'</span>            h <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token keyword">otherwise</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'not implement, only mean or variance'</span><span class="token punctuation">)</span>     <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>choice可以选择：</p><ul><li>mean: 即文章<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[2]</span></a></sup>中介绍的max-E的优化策略，相邻天线之间相移<script type="math/tex">\pi</script></li><li>variance: 即文章<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[2]</span></a></sup>中介绍的min-variance的优化策略，相邻天线之间没有相移</li></ul><h2 id="EH-Transfer-Function"><a href="#EH-Transfer-Function" class="headerlink" title="EH Transfer Function"></a>EH Transfer Function</h2><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> harvested_energy <span class="token operator">=</span> <span class="token function">EH_transfer_function</span><span class="token punctuation">(</span>RF_energy<span class="token punctuation">,</span>sensitivity<span class="token punctuation">,</span>saturation<span class="token punctuation">,</span>efficiency<span class="token punctuation">)</span><span class="token comment">%EH transfer function given RF energy input and EH hardware parameters [REF]</span><span class="token comment">%% Input parameters:</span><span class="token comment">% RF_energy    -> RF energy available at the input of the EH circuit </span><span class="token comment">% sensitivity  -> RF sensitivity level of the EH circuit</span><span class="token comment">% saturation   -> RF saturation level of the EH circuit</span><span class="token comment">% efficiency   -> EH conversion efficiency of the EH circuit (scalar between 0 and 1)</span><span class="token comment">%% Output parameters:</span><span class="token comment">% harvested_energy    -> harvested energy</span><span class="token comment">%% Main code</span><span class="token comment">%A linear EH transfer function but including sensitivity and saturation phenomena is used here [REF]</span>harvested_energy <span class="token operator">=</span> efficiency<span class="token operator">*</span><span class="token punctuation">(</span>RF_energy<span class="token operator">.*</span><span class="token punctuation">(</span>RF_energy<span class="token operator">>=</span>sensitivity <span class="token operator">&amp;</span> RF_energy<span class="token operator">&lt;</span>saturation<span class="token punctuation">)</span><span class="token operator">+</span>saturation<span class="token operator">*</span><span class="token punctuation">(</span>RF_energy<span class="token operator">>=</span>saturation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Other, more evolved, EH transfer functions can be tested by modifying line 15</span><span class="token comment">%[REF]    - O. L. A. L髉ez, et al., "Statistical Analysis of Multiple Antenna</span><span class="token comment">%           Strategies for Wireless Energy Transfer," in IEEE Transactions on </span><span class="token comment">%           Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019.</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>OneL少考虑了Energy=saturation的特殊情况</p></blockquote><h2 id="CSI-Free"><a href="#CSI-Free" class="headerlink" title="CSI-Free"></a>CSI-Free</h2><h3 id="AA-IS"><a href="#AA-IS" class="headerlink" title="AA-IS"></a>AA-IS</h3><div class="code-wrapper"><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">function energy &#x3D; AA_IS(kappa, M, x, y, sensitivity, saturation, efficiency)    h &#x3D; RicianFadingChannel(kappa, M, x, y, &#39;none&#39;);    RF_energy &#x3D; channel_path_loss(x, 0, y, 0)&#x2F;M*norm(conj(h), 2)^2;    energy &#x3D; EH_Transfer_Function(RF_energy, sensitivity, saturation, efficiency);end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如参考文献<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[2]</span></a></sup>中建模<strong>eqn:10</strong>，假设所有发射机的能量：</p><script type="math/tex; mode=display">E=g(\frac{\beta}{M}||\textbf{h}^*||^2)</script><p>其中，<script type="math/tex">\beta</script>是考虑路径损耗和总发射功率后，在接收端可用的功率，<script type="math/tex">M</script>是总的天线个数，<script type="math/tex">h_i</script>是第<script type="math/tex">i</script>个天线到EH的信道。</p><h3 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> energy <span class="token operator">=</span> <span class="token function">AA_SA</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token function">RicianFadingChannel</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    energy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> ii<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>M        energy <span class="token operator">=</span> energy<span class="token operator">+</span><span class="token function">EH_Transfer_Function</span><span class="token punctuation">(</span><span class="token function">channel_path_loss</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    energy <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>M<span class="token operator">*</span>energy<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如参考文献<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[2]</span></a></sup>中建模<strong>eqn:12</strong>或者参考文献<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.">[3]</span></a></sup>中的<strong>eqn:15</strong>，假设所有发射机的能量：</p><script type="math/tex; mode=display">E = \frac{1}{M}\sum\limits_{i=1}^Mg(\beta|h^*_i|^2)</script><p>值得注意的是，因为每根天线的持续时间为原始的<script type="math/tex">1/M</script>，所以其求和和平均在Energy Transfer Function <script type="math/tex">g(\cdot)</script>之外。</p><h3 id="AA-SS"><a href="#AA-SS" class="headerlink" title="AA-SS"></a>AA-SS</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> energy <span class="token operator">=</span> <span class="token function">AA_SS_maxE</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token function">RicianFadingChannel</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RF_energy <span class="token operator">=</span> <span class="token function">channel_path_loss</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token operator">*</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>    energy <span class="token operator">=</span> <span class="token function">EH_Transfer_Function</span><span class="token punctuation">(</span>RF_energy<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> energy <span class="token operator">=</span> <span class="token function">AA_SS_minVar</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token function">RicianFadingChannel</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'variance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RF_energy <span class="token operator">=</span> <span class="token function">channel_path_loss</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token operator">*</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>    energy <span class="token operator">=</span> <span class="token function">EH_Transfer_Function</span><span class="token punctuation">(</span>RF_energy<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>根据参考文献<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[2]</span></a></sup><strong>eqn:8</strong>或者参考文献<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.">[3]</span></a></sup>的<strong>eqn:14</strong>：</p><script type="math/tex; mode=display">E = g(\frac{\beta}{M}|\sum\limits_{i=1}^Mh_i|^2)=g(\frac{\beta}{M}|\textbf{1}^T\textbf{h}^*|^2)</script><h3 id="APS-EMW"><a href="#APS-EMW" class="headerlink" title="APS-EMW"></a>APS-EMW</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> energy <span class="token operator">=</span> <span class="token function">APS_EMW</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token function">RicianFadingChannel</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       h <span class="token operator">=</span> h<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% 幅度和相位都要乘一个随机数，且幅度随机数以用户为单位，相位随机数以天线为单位</span>    RF_energy <span class="token operator">=</span> <span class="token function">channel_path_loss</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token operator">*</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>    energy <span class="token operator">=</span> <span class="token function">EH_Transfer_Function</span><span class="token punctuation">(</span>RF_energy<span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>根据参考文献<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="B. Clerckx and J. Kim, “On the Beneficial Roles of Fading and Transmit Diversity in Wireless Power Transfer With Nonlinear Energy Harvesting,” in IEEE Transactions on Wireless Communications, vol. 17, no. 11, pp. 7731-7743, Nov. 2018, doi: 10.1109/TWC.2018.2870377.">[4]</span></a></sup><strong>eqn:14</strong>，有：</p><script type="math/tex; mode=display">y(t)=\sqrt{\frac{2P}{M}}\Re\{\varLambda^{-\frac{1}{2}}h(t)e^{jw_0t}\}</script><p>其中的时变信道<script type="math/tex">h(t)</script>有：</p><script type="math/tex; mode=display">h(t)=\sum\limits_{m=1}^Mh_me^{j\psi_m(t)}</script><p>其中的<script type="math/tex">\psi_m(t)</script>是一个时变的相位，控制信道的时变。</p><blockquote><p>快衰信道体现在幅度和相位的变化，所以在信道幅度上乘一个randn(N,1)，因为假设对N个用户中任意一个用户而言信道是准静态的；对于相位则是每根天线有一个随机相位randn(M,1)</p></blockquote><h3 id="Plot-Space"><a href="#Plot-Space" class="headerlink" title="Plot Space"></a>Plot Space</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>M <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>kappa <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>kappa <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span>kappa<span class="token operator">./</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> R <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>sensitivity <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%-22dBm</span>saturation <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">%-8dBm</span>efficiency <span class="token operator">=</span> <span class="token number">0.35</span><span class="token punctuation">;</span>               <span class="token comment">%35%</span>mtkl_epoch <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>delta <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token operator">-</span>R<span class="token operator">:</span>delta<span class="token operator">:</span>R<span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token operator">-</span>R<span class="token operator">:</span>delta<span class="token operator">:</span>R<span class="token punctuation">;</span>E_AA_SS_maxE_all <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>E_AA_SS_minVar_all <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>E_AA_IS_all <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>E_AA_SA_all <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>E_APS_EMW_all <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> m <span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>mtkl_epoch     E_AA_SS_maxE <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E_AA_SS_minVar <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E_AA_IS <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E_AA_SA <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E_APS_EMW <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> idx_x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">for</span> idx_y <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>            <span class="token function">E_AA_SS_maxE</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">,</span>idx_y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">AA_SS_maxE</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>idx_y<span class="token punctuation">)</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">E_AA_SS_minVar</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">,</span>idx_y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">AA_SS_minVar</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>idx_y<span class="token punctuation">)</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">E_AA_IS</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">,</span>idx_y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">AA_IS</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>idx_y<span class="token punctuation">)</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">E_AA_SA</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">,</span>idx_y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">AA_SA</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>idx_y<span class="token punctuation">)</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">E_APS_EMW</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">,</span>idx_y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">APS_EMW</span><span class="token punctuation">(</span>kappa<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>idx_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>idx_y<span class="token punctuation">)</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> efficiency<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>    <span class="token keyword">end</span>    E_AA_SS_maxE_all <span class="token operator">=</span> E_AA_SS_maxE_all<span class="token operator">+</span>E_AA_SS_maxE<span class="token punctuation">;</span>    E_AA_SS_minVar_all <span class="token operator">=</span> E_AA_SS_minVar_all<span class="token operator">+</span>E_AA_SS_minVar<span class="token punctuation">;</span>    E_AA_IS_all <span class="token operator">=</span> E_AA_IS_all<span class="token operator">+</span>E_AA_IS<span class="token punctuation">;</span>    E_AA_SA_all <span class="token operator">=</span> E_AA_SA_all<span class="token operator">+</span>E_AA_SA<span class="token punctuation">;</span>    E_APS_EMW_all <span class="token operator">=</span> E_APS_EMW_all<span class="token operator">+</span>E_APS_EMW<span class="token punctuation">;</span>        clc<span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'monte carlo running %d ...'</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>harvest_energy_AA_maxE <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_AA_SS_maxE_all<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span>harvest_energy_AA_minVar <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_AA_SS_minVar_all<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span>harvest_energy_IS <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_AA_IS_all<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span>harvest_energy_SA <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_AA_SA_all<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span>harvest_energy_APS_EMW <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_APS_EMW_all<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">imagesc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> harvest_energy_AA_maxE<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token function">colormap</span><span class="token punctuation">(</span><span class="token function">flipud</span><span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Distance X /m'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Distance Y /m'</span><span class="token punctuation">)</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'Energy /dBW'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'AA-SS_&#123;maxE&#125;  Strategy'</span><span class="token punctuation">)</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">imagesc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> harvest_energy_AA_minVar<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token function">colormap</span><span class="token punctuation">(</span><span class="token function">flipud</span><span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Distance X /m'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Distance Y /m'</span><span class="token punctuation">)</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'Energy /dBW'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'AA-SS_&#123;minVar&#125;  Strategy'</span><span class="token punctuation">)</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">imagesc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> harvest_energy_IS<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token function">colormap</span><span class="token punctuation">(</span><span class="token function">flipud</span><span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Distance X /m'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Distance Y /m'</span><span class="token punctuation">)</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'Energy /dBW'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'AA-IS  Strategy'</span><span class="token punctuation">)</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">imagesc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> harvest_energy_SA<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token function">colormap</span><span class="token punctuation">(</span><span class="token function">flipud</span><span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Distance X /m'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Distance Y /m'</span><span class="token punctuation">)</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'Energy /dBW'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'AA-SA  Strategy'</span><span class="token punctuation">)</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">imagesc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> harvest_energy_APS_EMW<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token function">colormap</span><span class="token punctuation">(</span><span class="token function">flipud</span><span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Distance X /m'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Distance Y /m'</span><span class="token punctuation">)</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'Energy /dBW'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'APS_EMW  Strategy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220424145451687.png" alt="image-20220424145451687"></p><ul><li>AA-IS和AA-SA还是不太一样，这个主要原因是因为EH-Transfer-Function是非线性造成的。</li></ul><h2 id="CSI-Based"><a href="#CSI-Based" class="headerlink" title="CSI-Based"></a>CSI-Based</h2><h3 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> W <span class="token operator">=</span> <span class="token function">CSI_EB_optimizer</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> beta<span class="token punctuation">)</span>    <span class="token punctuation">[</span>M<span class="token punctuation">,</span> N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    cvx_startup    cvx_begin sdp quiet        variable <span class="token function">W</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>M<span class="token punctuation">)</span> hermitian semidefinite        variable t        <span class="token function">minimize</span><span class="token punctuation">(</span><span class="token operator">-</span>t<span class="token punctuation">)</span>           subject to            <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>N                           <span class="token function">beta</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">real</span><span class="token punctuation">(</span><span class="token function">trace</span><span class="token punctuation">(</span>W<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> t<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token function">trace</span><span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span>    cvx_end<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>完全按照参考文献<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, F. A. Monteiro, H. Alves, R. Zhang and M. Latva-Aho, “A Low-Complexity Beamforming Design for Multiuser Wireless Energy Transfer,” in IEEE Wireless Communications Letters, vol. 10, no. 1, pp. 58-62, Jan. 2021, doi: 10.1109/LWC.2020.3020576.">[5]</span></a></sup>进行设计</p><h3 id="Compute-Energy"><a href="#Compute-Energy" class="headerlink" title="Compute Energy"></a>Compute Energy</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> E <span class="token operator">=</span> <span class="token function">compute_energy</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span> h<span class="token punctuation">,</span> beta<span class="token punctuation">)</span>    <span class="token punctuation">[</span>M <span class="token punctuation">,</span> N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">[</span>U<span class="token punctuation">,</span> S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eig</span><span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">S</span><span class="token punctuation">(</span>S<span class="token operator">&lt;</span><span class="token number">10e-5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>r            <span class="token function">w</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">U</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> M<span class="token operator">-</span>r<span class="token operator">+</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>        <span class="token function">w</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    E <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>N       <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>r           <span class="token function">E</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">beta</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span>M<span class="token operator">-</span>r<span class="token operator">+</span><span class="token number">j</span><span class="token punctuation">,</span> M<span class="token operator">-</span>r<span class="token operator">+</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token string">'*w(:,j)*w(:,j)'</span><span class="token operator">*</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意这里用特征值代表对应<script type="math/tex">\textbf{w}</script>持续的时间，能量为：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220424175207762.png" alt="image-20220424175207762" style="zoom: 67%;" /></p><h3 id="Plot-Space-1"><a href="#Plot-Space-1" class="headerlink" title="Plot Space"></a>Plot Space</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>M <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>N <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>R <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Kappa_dB <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">;</span>         <span class="token comment">%LOS factor (in dB) of the Rician fading</span>Kappa <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span>Kappa_dB<span class="token operator">./</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 假设用户均匀分布在半径为R的圆周上。</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">/</span>N<span class="token operator">:</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>Phi <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">'</span><span class="token operator">.*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> R<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> R<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>mtkl_epoch <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>E_full_performance <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">length</span><span class="token punctuation">(</span>Kappa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>E_Statistical_performance <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">length</span><span class="token punctuation">(</span>Kappa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>Kappa<span class="token punctuation">)</span>     kappa <span class="token operator">=</span> <span class="token function">Kappa</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    E_full_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    E_Statistical_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>mtkl_epoch        clc<span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\nkappa = %d, epoch: %d/%d\n'</span><span class="token punctuation">,</span> kappa<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mtkl_epoch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">% channel</span>        h_los <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">.*</span>Phi<span class="token punctuation">)</span><span class="token punctuation">;</span>        h_nlos <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         h_bar <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>kappa<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>kappa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.*</span>h_los<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h_hat <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>kappa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.*</span>h_nlos<span class="token punctuation">;</span>        h <span class="token operator">=</span> h_hat<span class="token operator">+</span>h_bar<span class="token punctuation">;</span>        <span class="token comment">% compute the path loss</span>        beta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>N            <span class="token function">beta</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel_path_loss</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">% W=ww' with full CSI</span>        W_full <span class="token operator">=</span> <span class="token function">CSI_EB_optimizer</span><span class="token punctuation">(</span>h_hat<span class="token operator">+</span>h_bar<span class="token punctuation">,</span> beta<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">% W=ww' with statistical CSI</span>        W_Statistical<span class="token operator">=</span> <span class="token function">CSI_EB_optimizer</span><span class="token punctuation">(</span>h_bar<span class="token punctuation">,</span> beta<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">% compute energy by W1</span>        E_full <span class="token operator">=</span> <span class="token function">compute_energy</span><span class="token punctuation">(</span>W_full<span class="token punctuation">,</span> h<span class="token punctuation">,</span> beta<span class="token punctuation">)</span><span class="token punctuation">;</span>        E_full_min <span class="token operator">=</span> E_full_min <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>E_full<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">% compute energy by W2</span>        E_Statistical <span class="token operator">=</span> <span class="token function">compute_energy</span><span class="token punctuation">(</span>W_Statistical<span class="token punctuation">,</span> h<span class="token punctuation">,</span> beta<span class="token punctuation">)</span><span class="token punctuation">;</span>        E_Statistical_min <span class="token operator">=</span> E_Statistical_min <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>E_Statistical<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">E_full_performance</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> E_full_min<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">;</span>    <span class="token function">E_Statistical_performance</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> E_Statistical_min<span class="token operator">/</span>mtkl_epoch<span class="token punctuation">;</span><span class="token keyword">end</span>fCSI <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_Statistical_performance<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span>aCSI <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">log10</span><span class="token punctuation">(</span>E_full_performance<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">%% Figure generation</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span> <span class="token string">'Units'</span><span class="token punctuation">,</span> <span class="token string">'centimeters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> axesFontSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>legendFontSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>afFigurePosition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">7</span> <span class="token number">19</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span> <span class="token string">'Position'</span><span class="token punctuation">,</span> afFigurePosition<span class="token punctuation">,</span><span class="token string">'PaperSize'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'PaperPositionMode'</span><span class="token punctuation">,</span><span class="token string">'auto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>Kappa_dB<span class="token punctuation">,</span> fCSI<span class="token punctuation">,</span><span class="token string">'-ok'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span>Kappa_dB<span class="token punctuation">,</span> aCSI<span class="token punctuation">,</span><span class="token string">'-sk'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span>hold on<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'$\kappa$ (dB)'</span><span class="token punctuation">,</span><span class="token string">'Interpreter'</span><span class="token punctuation">,</span> <span class="token string">'latex'</span><span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span>axesFontSize<span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'average worst-case RF energy (dBm)'</span><span class="token punctuation">,</span><span class="token string">'Interpreter'</span><span class="token punctuation">,</span> <span class="token string">'latex'</span><span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span>axesFontSize<span class="token punctuation">)</span>hl<span class="token operator">=</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'full CSI EB'</span><span class="token punctuation">,</span><span class="token string">'LOS-based CSI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>hl<span class="token punctuation">,</span><span class="token string">'FontSize'</span><span class="token punctuation">,</span>legendFontSize<span class="token punctuation">,</span><span class="token string">'interpreter'</span><span class="token punctuation">,</span><span class="token string">'latex'</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'FontSize'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>box ongrid on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>与Onel在论文中的设置不一样，由于Onel在论文中的设置是，在<script type="math/tex">R</script>为半径的圆内EH Receiver 随机分布，取其中最差的结果作为性能指标。这样随机性太大了</p><p>我的想法是以<script type="math/tex">R</script>为半径，均匀分布在圆周上，并取其中最差的结果作为衡量指标，这样结果比较稳定。结果见下节。</p><h3 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/result2.jpg" alt="result2" style="zoom:50%;" /></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/onel2428/WEToverview">https://github.com/onel2428/WEToverview</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>B. Clerckx and J. Kim, “On the Beneficial Roles of Fading and Transmit Diversity in Wireless Power Transfer With Nonlinear Energy Harvesting,” in IEEE Transactions on Wireless Communications, vol. 17, no. 11, pp. 7731-7743, Nov. 2018, doi: 10.1109/TWC.2018.2870377.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>O. L. A. López, F. A. Monteiro, H. Alves, R. Zhang and M. Latva-Aho, “A Low-Complexity Beamforming Design for Multiuser Wireless Energy Transfer,” in IEEE Wireless Communications Letters, vol. 10, no. 1, pp. 58-62, Jan. 2021, doi: 10.1109/LWC.2020.3020576.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>A. Thudugalage, S. Atapattu and J. Evans, “Beamformer design for wireless energy transfer with fairness,” 2016 IEEE International Conference on Communications (ICC), 2016, pp. 1-6, doi: 10.1109/ICC.2016.7511170.<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reproduction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Max-Min Fair Beamforming-&gt;Single &amp; Multiple BF</title>
    <link href="/2022/04/20/BF4WETwithFair/"/>
    <url>/2022/04/20/BF4WETwithFair/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>Beamformer design for wireless energy transfer with fairness</strong>.  <em>Amanthi Thudugalage</em> et.al.  <strong>2016 IEEE International Conference on Communications (ICC), 22-27 May 2016</strong>  (<a href="https://ieeexplore.ieee.org/document/7511170">pdf</a>)  (Citations <strong>19</strong>)</p><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><p>Max-Min Fair Beamforming </p><ul><li>松弛为SDP问题</li><li>考虑Single Beamforming问题和Multiple Beamforming问题</li><li>利用randC（<script type="math/tex">\textbf{w}_l=\textbf{U}\Sigma^{1/2}\textbf{v}_l</script>）得到Single的最优解</li><li>Mutiple BF可以得到精确的解</li><li>Mutiple 比 Single更公平，简单分析了原因</li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="Single-Beamforming建模和松弛"><a href="#Single-Beamforming建模和松弛" class="headerlink" title="Single Beamforming建模和松弛"></a>Single Beamforming建模和松弛</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420221710118.png" alt="建模和松弛" style="zoom: 44%;" /></p><p>松弛的结果不满足rank-one，可以使用<em>randC</em>进行进一步优化-&gt;randomization。</p><blockquote><p>注意，Single Beamforming 意味着是天线在全时间段使用一组<script type="math/tex">\textbf{w}</script>，所以<script type="math/tex">\textbf{w}\in\mathbb{C}^{M\times 1}</script>，所以有rank-one约束。</p></blockquote><h3 id="Multiple-Beamforming建模和松弛"><a href="#Multiple-Beamforming建模和松弛" class="headerlink" title="Multiple Beamforming建模和松弛"></a>Multiple Beamforming建模和松弛</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420222410043.png" alt="示意图" style="zoom:44%;" /></p><p>如上图所示，在时间<script type="math/tex">T_c</script>内，有多个Beamforming，下文中建模都是对(a) equal durations 进行建模，没有对different durations 建模。但是实验好像又用的different durations，只能说结构上是类似的。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420222008513.png" alt="part 1" style="zoom:44%;" /></p><p>值得注意的是，这里没有rank-one约束，因为不再是single Beamforming了。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420222100023.png" alt="Part 2" style="zoom:44%;" /></p><blockquote><p>我理解的different durations，通过对<script type="math/tex">\textbf{X}_{\text{opt}}</script>进行特征值分解，丢弃<script type="math/tex">10^{-5}</script>以下，保留较大项。以特征值作为持续时间，特征向量作为<script type="math/tex">\textbf{w}</script>。从物理意义上而言，仅用较大特征值对应的特征向（作为<script type="math/tex">\textbf{w}</script>）就可以表示其余特征向量；亦或者说较大特征值占用较多时间，那么意味着较小特征值几乎没有占用时间，就可以丢弃了。</p></blockquote><p>简而言之，由于不再是single Beamforming，所以没有rank-one约束，也没有其他rank约束，因为解出来的特征值较大项是多少就用多少的。不需要强制限制。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420223523451.png" alt="exp1" style="zoom: 33%;" /></p><p>与Total-Energy Maximization相比，Single Beamforming的Max-Min Fair Beamforming更公平。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420223624885.png" alt="exp2" style="zoom: 33%;" /></p><p>与Single Beamforming相比，Mutiple Beamforming更为公平（这里等于取rank=3）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420223713263.png" alt="exp3" style="zoom: 33%;" /></p><p>这张图也可以看出来，Mutiple Beamforming中几乎13/20个用户都处于相同水平的Energy；而Single 显得不是那么公平。</p><blockquote><p>作者认为是因为Single Beamforming使用了Randomization，使结果偏离了最优解（除非无线大的集合里面取最优解）；而Mutiple Beamforming解出来的就是比较精确的解（特征值和特征向量）。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Transmit Beamforming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Transmit Beamforming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAX–MIN FAIR BEAMFORMING -&gt; SDP Question</title>
    <link href="/2022/04/20/TransmitBF4Phy-layer-Multicasting/"/>
    <url>/2022/04/20/TransmitBF4Phy-layer-Multicasting/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>Transmit beamforming for physical-layer multicasting</strong>.  <em>N.D. Sidiropoulos</em> et.al.  <strong>IEEE Transactions on Signal Processing, June 2006</strong>  (<a href="https://ieeexplore.ieee.org/document/1634819">pdf</a>)  (Citations <strong>904</strong>)</p><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><p>考虑MAX–MIN FAIR BEAMFORMING</p><ul><li>将 Precoder原先的非凸优化问题松弛到SDP问题</li><li>考虑松弛后，对结果进行再优化<ul><li>如果解出来的矩阵是rank-one，那么就是这个原始问题的最优结果</li><li>如果解出来的矩阵不是rank-one，那么这个解就是满足约束的下限</li></ul></li><li>在非rank-one的前提下，给出三种 based on <em>randomization</em>的方法，选择出最优的结果</li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220420210025213.png" alt="建模" style="zoom: 50%;" /></p><p>值得注意的一个等价形式：</p><script type="math/tex; mode=display">\tilde{\mathbf{h}}_{i}^{H} \mathbf{w} \mathbf{w}^{H} \tilde{\mathbf{h}}_{i}=\Tr(\tilde{\mathbf{h}}_{i}^{H} \mathbf{w} \mathbf{w}^{H} \tilde{\mathbf{h}}_{i})=\Tr(\mathbf{w} \mathbf{w}^{H}\tilde{\mathbf{h}}_{i}\tilde{\mathbf{h}}_{i}^{H})=\Tr(\textbf{XQ}_i)</script><p>Drop rank-one constraint 会得到一个松弛结果。</p><p>由松弛结果可以得到<script type="math/tex">\textbf{X}_{\text{opt}}</script>，然后得到a set of candidate weight vectors，再根据某种判别条件（好像不同文章中的从set中选择最优的条件不同）选择最优结果。</p><h3 id="randA"><a href="#randA" class="headerlink" title="randA"></a>randA</h3><p>对解得的<script type="math/tex">\textbf{X}_{\text{opt}}</script>有<script type="math/tex">\textbf{X}_{\text{opt}}=\textbf{U}\Sigma\textbf{U}^H</script>，可以得到a set of candidate weight vectors <script type="math/tex">\textbf{w}_l=\textbf{U}\Sigma^{1/2}\textbf{e}_l</script>，其中<script type="math/tex">[\textbf{e}_l]_i=e^{j\theta_{l,j}}</script>，且<script type="math/tex">\theta_{l,j}\sim U[0,2\pi)</script>。以保证有<script type="math/tex">\textbf{w}_l^H\textbf{w}_l=\Tr(\textbf{X}_{\text{opt}})</script></p><h3 id="randB"><a href="#randB" class="headerlink" title="randB"></a>randB</h3><p>对解得的<script type="math/tex">\textbf{X}_{\text{opt}}</script>做<script type="math/tex">[\textbf{w}_l]_i=\sqrt{[\textbf{X}]_{ii}}[\textbf{e}_l]_i</script>，以保证有<script type="math/tex">|[\textbf{w}_l]_i|^2=[\textbf{X}_{\text{opt}}]_{ii}</script>，其中<script type="math/tex">\textbf{e}_{l}</script>同<em>randA</em>。</p><h3 id="randC"><a href="#randC" class="headerlink" title="randC"></a>randC</h3><p>类似于<em>randA</em>，有<script type="math/tex">\textbf{w}_l=\textbf{U}\Sigma^{1/2}\textbf{v}_l</script>，其中<script type="math/tex">\textbf{v}_l\sim\mathcal{CN}(0,1)</script>，以保证有<script type="math/tex">\text{E}[\textbf{w}_l\textbf{w}^H]=\textbf{X}_{\text{opt}}</script></p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Transmit Beamforming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Transmit Beamforming</tag>
      
      <tag>Channel Estimation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Statistical-CSI 一般CSI-Based模型+Statistical模型+低复杂度实现Statistical</title>
    <link href="/2022/04/19/alow-complexity-beamforming-design/"/>
    <url>/2022/04/19/alow-complexity-beamforming-design/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>A Low-Complexity Beamforming Design for Multiuser Wireless Energy Transfer</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Wireless Communications Letters, Jan.  2021</strong>  (<a href="https://ieeexplore.ieee.org/document/9184149">pdf</a>)  (Citations <strong>4</strong>)</p><ul><li><script type="math/tex">\sup(\cdot)</script>: 最小上界</li><li><script type="math/tex">\inf(\cdot)</script>: 最大下界</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><ul><li>只利用信道的一阶统计量CSI-limited</li><li>提出了一种低复杂度但有效的EB算法，可以获得接近最优结果（在低<script type="math/tex">\kappa</script>时甚至优于平均CSI的最优化结果（Optimum））</li><li>多用户性能随天线数目的增加而提高，同时可以利用旋转天线来获得更好的性能</li><li><strong>可以直接适用于WPCN和SWIPT</strong></li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="一般CSI-Based模型"><a href="#一般CSI-Based模型" class="headerlink" title="一般CSI-Based模型"></a>一般CSI-Based模型</h3><p>第<script type="math/tex">i</script>th element接收信号为：</p><script type="math/tex; mode=display">y_i=\sqrt{\beta_i}\textbf{h}_i^T\sum\limits_{k=1}^K\textbf{w}_kx_k,\quad i=1,\cdots,N</script><p>所以有接收到的能量：</p><script type="math/tex; mode=display">\begin{aligned}E_i&=E[y_i^Hy_i]=\beta_iE_x\left[\left(\sum\limits_{k=1}^K\textbf{h}_i^T\textbf{w}_kx_k\right)^H\left(\sum\limits_{k=1}^K\textbf{h}_i^T\textbf{w}_kx_k\right)\right]\\&=\beta_i\sum\limits_{k=1}^K|\textbf{h}_i^T\textbf{w}_k|^2E{[x_k^Hx_k]}=\beta_i\sum\limits_{k=1}^K|\textbf{h}_i^T\textbf{w}_k|^2\end{aligned}</script><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220419154355123.png" alt="Proof" style="zoom: 33%;" /></p><p>目标是以公平的方式最大化每个设备收集的能量：</p><script type="math/tex; mode=display">\textbf{P1}: \text{maximize} \inf\limits_{i=1,\cdots,N}\{E_i\}\\\text{subject to} \sum\limits_{k=1}^K||\textbf{w}_k||^2\leq1</script><p>可以看到，优化目标是非凸的，优化约束是凸的。按照参考文献<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="A. Thudugalage, S. Atapattu and J. Evans, “Beamformer design for wireless energy transfer with fairness,” 2016 IEEE International Conference on Communications (ICC), 2016, pp. 1-6, doi: 10.1109/ICC.2016.7511170.">[1]</span></a></sup>转换为SDP问题（semi-definite programming）：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220406225456729.png" alt="first part" style="zoom: 50%;" /></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220406225513750.png" alt="second part" style="zoom:48.6%;" /></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220419160245638.png" alt="证明" style="zoom:33%;" /></p><h3 id="Statistical-Beamforming-Design"><a href="#Statistical-Beamforming-Design" class="headerlink" title="Statistical Beamforming Design"></a>Statistical Beamforming Design</h3><p>因为前面的一般CSI-Based模型都需要完全知道CSI，即<script type="math/tex">\textbf{h}</script>是完全已知的。这在实际中有获取CSI消耗能量过大这类的限制，所以为了解决这个问题，可以使用统计CSI（部分CSI）来进行优化。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220419160707585.png" alt="image-20220419160707585" style="zoom:50%;" /></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220419161440897.png" alt="Proof" style="zoom: 33%;" /></p><ul><li><script type="math/tex">\bar{\textbf{h}}</script>不容易估计错误</li><li>它在更大的时间范围内变化，不需要频繁更新</li><li>当信道完全确定，即<script type="math/tex">\kappa\to\infty</script>时，Statistical model与Full-CSI model接近，因为<script type="math/tex">\hat{\textbf{h}}\to\textbf{0}</script></li></ul><p>在本文中，<script type="math/tex">\bar{\textbf{h}}_i=\sqrt{\frac{\kappa_i}{1+\kappa_i}}e^{\text{i}\phi_i}</script>，<script type="math/tex">\hat{\textbf{h}}_i\sim\sqrt{\frac{1}{\kappa_i+1}}\mathcal{CN}(\textbf{0},\textbf{I})</script>，这是OneL大部分工作中使用的信道模型。</p><h3 id="A-low-Complexity-Solution（Based-on-Statistical-Beamforming-Design）"><a href="#A-low-Complexity-Solution（Based-on-Statistical-Beamforming-Design）" class="headerlink" title="A low Complexity Solution（Based on Statistical Beamforming Design）"></a>A low Complexity Solution（Based on Statistical Beamforming Design）</h3><p>随着PB天线数量增加，SDP方案计算成本很高，所以作者提出了一种低复杂度的算法（复杂度低，性能接近（低<script type="math/tex">\kappa</script>时超过）平均CSI的最优结果）：</p><blockquote><p>可以考虑用于simple low-power IoT devices</p></blockquote><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220419162008954.png" alt="image-20220419162008954" style="zoom: 50%;" /></p><ul><li>只利用信道的一阶统计量CSI-limited</li><li>提出了一种低复杂度但有效的EB算法，可以获得接近最优结果（在低<script type="math/tex">\kappa</script>时甚至优于平均CSI的最优化结果（Optimum））</li><li>多用户性能随天线数目的增加而提高，同时可以利用旋转天线来获得更好的性能</li><li><strong>可以直接适用于WPCN和SWIPT</strong></li></ul><blockquote></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>A. Thudugalage, S. Atapattu and J. Evans, “Beamformer design for wireless energy transfer with fairness,” 2016 IEEE International Conference on Communications (ICC), 2016, pp. 1-6, doi: 10.1109/ICC.2016.7511170.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Channel Estimation</tag>
      
      <tag>CSI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-Matrix Calculus</title>
    <link href="/2022/04/18/matrixcalculus/"/>
    <url>/2022/04/18/matrixcalculus/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="矩阵求导-Matrix-Calculus"><a href="#矩阵求导-Matrix-Calculus" class="headerlink" title="矩阵求导 Matrix Calculus"></a>矩阵求导 Matrix Calculus</h1><p>记录一下查找的矩阵求导资料，有时间再看：</p><blockquote><p>标量对矩阵求导<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/24709748">[1]</span></a></sup></p><p>向量对矩阵求导<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/24863977">[2]</span></a></sup></p><p><strong>使用科技</strong><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="http://www.matrixcalculus.org/">[3]</span></a></sup></p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/24709748">https://zhuanlan.zhihu.com/p/24709748</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/24863977">https://zhuanlan.zhihu.com/p/24863977</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://www.matrixcalculus.org/">http://www.matrixcalculus.org/</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
      <tag>Matrix Calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-压缩感知基础</title>
    <link href="/2022/04/18/compressedsensingsummary/"/>
    <url>/2022/04/18/compressedsensingsummary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="压缩感知介绍"><a href="#压缩感知介绍" class="headerlink" title="压缩感知介绍"></a>压缩感知介绍</h2><p>Compressed Sensing：压缩感知，即在采样过程中实现了数据的压缩</p><p>奈奎斯特提出的Nyquist采样定理指出，<strong>要想让采样之后的信号完整保留原始信号中的信息，采样频率必须大于信号中最高频率的两倍。</strong>（均匀采样）</p><p>这是因为时域以<script type="math/tex">\tau</script>为间隔采样，频域会以<script type="math/tex">\tau</script>为间隔搬移。如果搬移间隔小于<script type="math/tex">\tau</script>，就会发生频谱混叠。</p><p>但是如果使用非均匀采样，会产生大量不相关（incoherent）的干扰值。随机采样使得频谱不再是整齐地搬移，而是一小部分一小部分胡乱地搬移，频率泄露均匀地分布在整个频域，因而泄漏值都比较小，从而有了恢复的可能。</p><p>与图像压缩完全不同，图像压缩是先进行了全采样，再进行压缩（例如变换后丢掉小系数的值）；压缩感知是直接进行亚采样，即在采样的时候已经完成了压缩。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220418105328353.png" alt="压缩感知示意图" style="zoom: 80%;" /></p><p>其中，<script type="math/tex">\textbf{x}=\Psi\textbf{s}</script>是原始信号，为k-spaese。目的是求解<script type="math/tex">\textbf{s}</script>，然后得到<script type="math/tex">\textbf{x}=\Psi\textbf{s}</script></p><ul><li>M=N，很好解</li><li>M&lt;N，根据RIP特性重构</li></ul><h2 id="恢复条件"><a href="#恢复条件" class="headerlink" title="恢复条件"></a>恢复条件</h2><h3 id="稀疏性"><a href="#稀疏性" class="headerlink" title="稀疏性"></a>稀疏性</h3><blockquote><p>信号需要在某一个变换域具有<strong>稀疏性</strong>。即<strong>大部分值趋于零</strong>，只有少量大的非零值。</p></blockquote><h3 id="不相关"><a href="#不相关" class="headerlink" title="不相关"></a>不相关</h3><p><strong>Restricted Isometry Property</strong>: RIP有限等距性质，即有：</p><script type="math/tex; mode=display">\begin{align}    (1-\delta_K)\Vert\textbf{u}\Vert_2^2\leq\Vert\Phi\textbf{u}\Vert_2^2\leq(1+\delta_K)\Vert\textbf{u}\Vert_2^2\label{eqn:7}\end{align}</script><p>其中<script type="math/tex">\delta_K</script>称为k-阶受限等距常数(Restricted isometry Constant)。</p><p><strong>但是一个矩阵是否满足RIP很难确定，所以Baraniuk证明了等价条件：</strong></p><blockquote><p>RIP的等价条件是观测矩阵和稀疏基不相关</p></blockquote><p><strong>陶哲轩和Candes证明，独立同分布的高斯随机测量矩阵可以称为普适的压缩感知测量矩阵。</strong></p><p>如果一个信号<strong>在某个变换域是稀疏的</strong>，那么就可以用一个<strong>与变换基不相关的</strong>观测矩阵将变换所得高维信号投影到一个低维空间上，然后通过求<strong>解一个优化问题</strong>就可以从这些少量的投影中以高概率重构出原信号。</p><h2 id="恢复算法"><a href="#恢复算法" class="headerlink" title="恢复算法"></a>恢复算法</h2><p>压缩感知信号的重构方法主要包括贪婪算法、凸优化方法、非凸优化方法、阈值方法以及深度学习方法等。其中，贪婪算法主要包括正交匹配追踪算法(Orthogonal Matching Pursuit, OMP)、分段正交匹配追踪算法(Stagewise Orthogonal Matching Pursuit, StOMP)、压缩采样匹配追踪算法(Compressive Sample Matching Pursuit, CoSaMP)、子空间追踪算法(Subspace Pursuit, SP)等；凸优化方法主要包括基追踪算法(Basis Pursuit, BP)、最小绝对收缩与选择算子算法(Least Absolute Shrinkage Selection Operator,  LASSO)、全变差降噪算法(Total Variation, TV)等；非凸优化方法主要包括迭代加权最小二乘法(Iteratively Re-Weighted Least Squares, IRWLS)、焦点欠定系统解算法(Focal Underdetermined System Solution, FOCUSS)等；阈值方法主要包括迭代硬阈值算法(Iterative Hard Thresholding, IHT)、迭代软阈值算法(Iterative Soft Thresholding, IST)、近似消息传递算法(Approx-imate Message Passing, AMP)等；随着深度学习技术的发展，一些基于深度学习的压缩感知信号重构算法被提出，主要包括近似消息传递网(Learned Approximate Message Passing Network)、交替方向乘子网(Alternating Direction Method of Multipliers Net, ADMM-Net)、迭代收缩阈值网络(Iterative Shrinkage-Thresholding Algorithm Net, ISTA-Net)等。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/ReconstructionAlgorithm.jpg" alt="ReconstructionAlgorithm"></p><h3 id="OMP"><a href="#OMP" class="headerlink" title="OMP"></a>OMP</h3><blockquote><p>将向量<script type="math/tex">\textbf{b}</script>投影到水平面上，其投影为<script type="math/tex">\textbf{p}</script>，<script type="math/tex">a_1,a_2</script>为水平面的两个线性无关向量，<script type="math/tex">\textbf{A}=[a_1,a_2]</script></p><p>投影矩阵：<script type="math/tex">P=\textbf{A}(\textbf{A}^\mathrm{T}\textbf{A})^{-1}\textbf{A}^\mathrm{T}</script></p><p>投影<script type="math/tex">\textbf{p}</script>为：<script type="math/tex">\textbf{p}=\textbf{P}\textbf{b}</script></p></blockquote><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/585228-20151215111251146-1870941303.jpg" alt="OMP Algorithm" style="zoom: 80%;" /></p><p><strong>MP基本原理：</strong>从字典矩阵<script type="math/tex">\textbf{D}</script>（也称为过完备原子库中），选择一个与信号<script type="math/tex">\textbf{y}</script>（观测值）最匹配的原子(也就是某列)，构建一个稀疏逼近，并求出信号残差，然后继续选择与信号残差最匹配的原子，反复迭代，信号<script type="math/tex">\textbf{y}</script>（观测值）可以由这些原子的线性和，再加上最后的残差值来表示。很显然，如果残差值在可以忽略的范围内，则信号<script type="math/tex">\textbf{y}</script>（观测值）就是这些原子的线性组合。<br><strong>OMP改进：</strong>OMP 算法是在 MP 算法的基础上进行改进的，其挑选原子的标准和 MP 算法一致，也就是在训练字典<script type="math/tex">\textbf{D}</script>里挑选和观测样本<script type="math/tex">\textbf{y}</script>最为匹配的字典原子。不相同之处在于：OMP 算法在每一次迭代过程中对所挑选的全部原子先要执行 Schmidt 正交化操作，来确保每一次循环结果都是最优解。使得在同等精度的条件下，OMP 算法的性能更好，其收敛速度也更快。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/22445302">https://zhuanlan.zhihu.com/p/22445302</a></p><p><a href="https://blog.csdn.net/tengweitw/article/details/41174555">https://blog.csdn.net/tengweitw/article/details/41174555</a></p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Compressed Sensing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-矩阵相关</title>
    <link href="/2022/04/12/fundamentalofMatrixtheory/"/>
    <url>/2022/04/12/fundamentalofMatrixtheory/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整理常见的矩阵理论相关知识</p><h2 id="Hadamard-product-to-textbf-A-circ-textbf-B"><a href="#Hadamard-product-to-textbf-A-circ-textbf-B" class="headerlink" title="Hadamard product \to \textbf{A}\circ\textbf{B}"></a>Hadamard product <script type="math/tex">\to \textbf{A}\circ\textbf{B}</script></h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>参考百度百科<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://baike.baidu.com/item/%E5%93%88%E8%BE%BE%E7%8E%9B%E7%A7%AF/18894493?fr=aladdin">[1]</span></a></sup></p></blockquote><p>设<script type="math/tex">\textbf{A},\textbf{B}\in\mathbb{C}^{m\times n}</script>，且<script type="math/tex">\textbf{A}=\{a_{ij}\},\textbf{B}=\{b_{ij}\}</script>，则：</p><script type="math/tex; mode=display">\left[\begin{array}{cccc}a_{11} b_{11} & a_{12} b_{12} & \cdots & a_{1 n} b_{1 n} \\a_{21} b_{21} & a_{22} b_{22} & \cdots & a_{2 n} b_{2 n} \\\vdots & \vdots &\ddots & \vdots \\a_{m 1} b_{m 1} & a_{m 2} b_{m 2} & \cdots & a_{m n} b_{m n}\end{array}\right]</script><p>即<strong>对应元素相乘</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://baike.baidu.com/item/%E5%93%88%E8%BE%BE%E7%8E%9B%E7%A7%AF/18894493?fr=aladdin">[1]</span></a></sup>，称为矩阵<script type="math/tex">A</script>与矩阵<script type="math/tex">B</script>的哈达玛 (Hadamard) 积。记作<script type="math/tex">\textbf{A}\circ\textbf{B}</script></p><h3 id="主要性质"><a href="#主要性质" class="headerlink" title="主要性质"></a>主要性质</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220412110920251.png" alt="image-20220412110920251"></p><h2 id="Kronecker-product-to-textbf-A-otimes-textbf-B"><a href="#Kronecker-product-to-textbf-A-otimes-textbf-B" class="headerlink" title="Kronecker product \to \textbf{A}\otimes\textbf{B}"></a>Kronecker product <script type="math/tex">\to \textbf{A}\otimes\textbf{B}</script></h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>参考百度百科<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://baike.baidu.com/item/%E5%85%8B%E7%BD%97%E5%86%85%E5%85%8B%E7%A7%AF/6282573?fr=aladdin">[2]</span></a></sup></p></blockquote><p>数学上，<strong>克罗内克积</strong>是两个<strong>任意大小</strong>的矩阵间的运算。克罗内克积是张量积的特殊形式，以德国数学家利奥波德·克罗内克命名<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://baike.baidu.com/item/%E5%85%8B%E7%BD%97%E5%86%85%E5%85%8B%E7%A7%AF/6282573?fr=aladdin">[2]</span></a></sup>。</p><p>若<script type="math/tex">\textbf{A}\in\mathbb{C}^{m\times n},\textbf{B}\in\mathbb{C}^{p\times q}</script>，则<strong>克罗内克积</strong>（Kronecker product）是一个<script type="math/tex">\textbf{A}\otimes \textbf{B}=\textbf{C}\in\mathbb{C}^{mp\times nq}</script>的分块矩阵：</p><script type="math/tex; mode=display">\begin{aligned}\textbf{A}\otimes\textbf{B}=\left[\begin{array}{ccc}a_{11}\textbf{B}&\cdots&a_{1n}\textbf{B}\\\vdots&\ddots&\vdots\\a_{m1}\textbf{B}&\cdots&a_{mn}\textbf{B}\end{array}\right]\end{aligned}</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>满足双线性与结合律：</p><script type="math/tex; mode=display">\begin{aligned}\begin{array}{c}A \otimes(B+C)=A \otimes B+A \otimes C \quad (\text{if $$B$$ and $$C$$ have the same size}) \\(A+B) \otimes C=A \otimes C+B \otimes C \quad (\text{if $$A$$ and $$B$$ have the same size}) \\(k A) \otimes B=A \otimes(k B)=k(A \otimes B) \\(A \otimes B) \otimes C=A \otimes(B \otimes C)\end{array}\end{aligned}</script><p><strong>不符合交换律</strong>：<script type="math/tex">\textbf{A}\otimes\textbf{B}</script>不同于<script type="math/tex">\textbf{B}\otimes\textbf{A}</script></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220412113228476.png" alt="image-20220412113228476"></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220412113250013.png" alt="image-20220412113250013"></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220412113256344.png" alt="image-20220412113256344"></p><h2 id="矩阵的迹-to-tr-textbf-A"><a href="#矩阵的迹-to-tr-textbf-A" class="headerlink" title="矩阵的迹 \to tr(\textbf{A})"></a>矩阵的迹 <script type="math/tex">\to tr(\textbf{A})</script></h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>参考百度百科<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%B9/8889744?fr=aladdin">[3]</span></a></sup></p></blockquote><p>矩阵的迹，数学、线性代数名词，在线性代数中，一个n×n矩阵<script type="math/tex">\textbf{A}</script>的主对角线（从左上方至右下方的对角线）上各个元素的总和被称为矩阵<script type="math/tex">\textbf{A}</script>的<strong>迹</strong>（或<strong>迹数</strong>），一般记作<script type="math/tex">tr(\textbf{A})</script>。[]即：</p><script type="math/tex; mode=display">tr\textbf{A}=\sum\limits_{i=1}^na_{ii}</script><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li><p>迹是所有主对角元素的和</p></li><li><p>迹是所有特征值的和</p></li></ul><h2 id="Khatri-Rao-product-to-textbf-A-odot-textbf-B"><a href="#Khatri-Rao-product-to-textbf-A-odot-textbf-B" class="headerlink" title="Khatri-Rao product \to \textbf{A}\odot\textbf{B}"></a>Khatri-Rao product <script type="math/tex">\to \textbf{A}\odot\textbf{B}</script></h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>参考CSDN<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/xuehuitanwan123/article/details/104291475">[4]</span></a></sup></p></blockquote><p>Khatri-Rao product的定义是两个具有相同列数的矩阵<script type="math/tex">\textbf{A}\in\mathbb{C}^{I\times K},\textbf{B}\in\mathbb{C}^{J\times K}</script>，的对应列向量的Kronecker product排列而成的，其生成的矩阵大小为<script type="math/tex">\textbf{A}\odot\textbf{B}=\textbf{C}\in\mathbb{C}^{IJ\times K}</script>。</p><script type="math/tex; mode=display">\begin{aligned}\textbf{A}\odot\textbf{B}=\left[\begin{array}{cccc}a_{:,1}\otimes b_{:,1}&a_{:,2}\otimes b_{:,2}&\cdots a_{:,K}\otimes b_{:,K}\end{array}\right]\end{aligned}</script><h3 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h3><script type="math/tex; mode=display">A \odot B \odot C=(A \odot B) \odot C=A \odot(B \odot C)\\ (A\odot B)^{T}(A \odot B)=(A^{T} A)(B^{T} B)</script><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E5%93%88%E8%BE%BE%E7%8E%9B%E7%A7%AF/18894493?fr=aladdin">https://baike.baidu.com/item/%E5%93%88%E8%BE%BE%E7%8E%9B%E7%A7%AF/18894493?fr=aladdin</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E5%85%8B%E7%BD%97%E5%86%85%E5%85%8B%E7%A7%AF/6282573?fr=aladdin">https://baike.baidu.com/item/%E5%85%8B%E7%BD%97%E5%86%85%E5%85%8B%E7%A7%AF/6282573?fr=aladdin</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%B9/8889744?fr=aladdin">https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%B9/8889744?fr=aladdin</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/xuehuitanwan123/article/details/104291475">https://blog.csdn.net/xuehuitanwan123/article/details/104291475</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matrix theory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-信道模型整理</title>
    <link href="/2022/04/11/channelmodelsummary/"/>
    <url>/2022/04/11/channelmodelsummary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整理不同的信道模型以及它们的使用场景</p><h2 id="Rician-Fading"><a href="#Rician-Fading" class="headerlink" title="Rician Fading"></a>Rician Fading</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>MISO System: Transmitter with M antennas and the receiver has only one antenna.</strong></p><p>It is a very general assumption that allows modeling a wide variety of channels by tuning the Rician factor <script type="math/tex">\kappa\geq0</script></p><ul><li><script type="math/tex">\kappa=0</script>, the channel envelope is Rayleigh distributed</li><li><script type="math/tex">\kappa\to\infty</script>, the channel is a fully deterministic LOS channel</li></ul><blockquote><p><strong>莱斯衰落信</strong>道指除了经反射折射散射等来的信号外， 还有从发射机直接到达接收机 （如从卫星直接到达地面接收机）的信号，那么总信号的强度服从分布莱斯分布。有一条主路径，其余多径传输过来的信号仍如<strong>瑞利衰落</strong>所述。</p><p><strong>瑞利衰落</strong>只适用于从发射机到接收机不存在直射信号（LOS，Line of Sight）的情况，即信道模型能够描述由电离层和对流层反射的短波信道，以及建筑物密集的城市环境。否则应使用<strong>莱斯衰落</strong>信道作为信道模型。</p></blockquote><h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><script type="math/tex; mode=display">\textbf{h}=\sqrt{\frac{\kappa}{1+\kappa}}e^{\text{i}\varphi_0}\textbf{h}_{\text{los}}+\sqrt{\frac{1}{1+\kappa}}\textbf{h}_{\text{nlos}}</script><p>其中<script type="math/tex">\varphi_0</script>是初始相位。有LOS部分：</p><script type="math/tex; mode=display">\textbf{h}_{\text{los}}=[1,e^{\text{i}\Phi_1},\cdots,e^{\text{i}\Phi_{M-1}}]^\mathrm{T}</script><p>且<script type="math/tex">\Phi_t=-t\pi\sin\phi</script>，<script type="math/tex">\phi</script>是<strong>azimuth angle</strong> relative to the boresight of the transmitting antenna array。</p><p>有Rayleigh部分：</p><script type="math/tex; mode=display">\textbf{h}_{\text{nlos}}\sim\mathcal{CN}(\textbf{0},\textbf{R})</script><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>CSI-Free中，对Wireless Energy Transfer的信道进行建模。</p><div class="note note-success">            <ul><li><strong>On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Internet of Things Journal, Jan.1, 1 2021</strong>  (<a href="https://ieeexplore.ieee.org/document/9119347">pdf</a>)  (Citations <strong>8</strong>)</li></ul>          </div><h2 id="Wideband-geometric-channel-model"><a href="#Wideband-geometric-channel-model" class="headerlink" title="?? Wideband geometric channel model"></a>?? Wideband geometric channel model</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Consider a transmitter-IRS channel, <script type="math/tex">\textbf{h}_{T,k}</script>, (and similarly for the IRS-receiver channel) consisting of <em>L</em> clusters. Each cluster contributes with one ray from the transmitter to the IRS. The ray parameters are: azimuth/elevation angles of arrival, <script type="math/tex">\theta_l,\phi_l\in[0,2\pi)</script>; complex coefficient ; <script type="math/tex">\alpha_l\in\mathbb{C}</script>; time delay <script type="math/tex">\tau_l\in\mathbb{R}</script>. The transmitter-IRS path loss is denoted by <script type="math/tex">\rho_T</script>. The pulse shaping function, with <script type="math/tex">T_s</script>-spaced signaling, is defined as <script type="math/tex">p(\tau)</script> at <script type="math/tex">\tau</script> seconds. The frequency-domain channel vector, <script type="math/tex">\textbf{h}_{T,k}</script>, can then be defined as</p><h3 id="建模-1"><a href="#建模-1" class="headerlink" title="　建模"></a>　建模</h3><script type="math/tex; mode=display">\mathbf{h}_{\mathrm{T}, k}=\sqrt{\frac{M}{\rho_{\mathrm{T}}}} \sum_{d=0}^{D-1} \sum_{\ell=1}^{L} \alpha_{\ell} \mathbf{a}\left(\theta_{\ell}, \phi_{\ell}\right) p\left(d T_{S}-\tau_{\ell}\right) e^{-j \frac{2 \pi k}{K} d}</script><p>where <script type="math/tex">\mathbf{a}\left(\theta_{\ell}, \phi_{\ell}\right)\in\mathbb{C}^{M\times 1}</script>  is the IRS array response vector. Assume a block-fading channel model, where <script type="math/tex">\textbf{h}_{T,k}</script> and <script type="math/tex">\textbf{h}_{T,k}</script> are assumed to stay constant over the channel coherence time.</p><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><p>Both transmitter and Receiver have only one antenna.</p><div class="note note-success">            <ul><li><strong>Deep Learning Coordinated Beamforming for Highly-Mobile Millimeter Wave Systems</strong>.  <em>Ahmed Alkhateeb</em> et.al.  <strong>IEEE Access, 2018</strong>  (<a href="https://ieeexplore.ieee.org/document/8395149">pdf</a>)  (Citations <strong>186</strong>)</li><li><strong>Deep Reinforcement Learning for Intelligent Reflecting Surfaces: Towards Standalone Operation</strong>.  <em>Abdelrahman Taha</em> et.al.  <strong>2020 IEEE 21st International Workshop on Signal Processing Advances in Wireless Communications (SPAWC), 26-29 May 2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9154301">pdf</a>)  (Citations <strong>24</strong>)</li></ul>          </div><h2 id="Saleh-Valenzuela-SV-model-Narrowband-geometric-channel-model"><a href="#Saleh-Valenzuela-SV-model-Narrowband-geometric-channel-model" class="headerlink" title="Saleh-Valenzuela (SV) model (Narrowband geometric channel model)"></a>Saleh-Valenzuela (SV) model (Narrowband geometric channel model)</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Saleh-Valenzuela (SV) model where a geometric channel model is adopted with limited scattering.</p><p>eg: BS-&gt;IRS</p></blockquote><h3 id="建模-2"><a href="#建模-2" class="headerlink" title="建模"></a>建模</h3><script type="math/tex; mode=display">\textbf{H}=\sqrt{\frac{NM}{\rho}}\sum\limits_{l=1}^L\varrho_l\textbf{a}_r(\vartheta_l,\gamma_l)\textbf{a}_l^\mathrm{H}(\phi_l)</script><p>其中，<script type="math/tex">\rho</script> average path-loss between BS and IRS; <script type="math/tex">L</script> is the number of paths; <script type="math/tex">\varrho</script> denotes the complex gain associated with the <script type="math/tex">l</script>-th path; <script type="math/tex">\vartheta_l</script>  and <script type="math/tex">\gamma_l</script> denote the azimuth angle and elevation angle of arrival (AoA), respectively. <script type="math/tex">\phi_l</script>  is the angle of departure (AoD),  <script type="math/tex">\textbf{a}_r</script> and <script type="math/tex">\textbf{a}_t</script> represent the receive and transmit array response vectors, respectively. </p><p>假设IRS为一个有<script type="math/tex">M_x\times M_y</script>个elements的UPA (Uniform Planner Array)，则有：</p><script type="math/tex; mode=display">\textbf{a}_r(\vartheta_l,\gamma_l)=\textbf{a}_x(u)\otimes\textbf{a}_y(v)</script><p>其中，<script type="math/tex">\otimes</script>表示Kronecker product（克罗内克积）。<script type="math/tex">\textbf{a}_x(u)</script>和<script type="math/tex">\textbf{a}_y(v)</script>表示导向矢量 or 相应向量 (steering vector) or 阵列流形 (array manifold)。 且<script type="math/tex">u\triangleq2\pi d\cos(\gamma_l)/\lambda</script>（即空间相位）,<script type="math/tex">v\triangleq2\pi d\sin(\gamma_l)\cos(\vartheta_l)/\lambda</script>，<script type="math/tex">d</script>表示天线位置：</p><script type="math/tex; mode=display">\begin{aligned}&\boldsymbol{a}_{x}(u) \triangleq \frac{1}{\sqrt{M_{x}}}\left[\begin{array}{llll}1 & e^{j u} & \ldots & e^{j\left(M_{x}-1\right) u}\end{array}\right]^{T} \\&\boldsymbol{a}_{y}(v) \triangleq \frac{1}{\sqrt{M_{y}}}\left[\begin{array}{llll}1 & e^{j v} & \ldots & e^{j\left(M_{y}-1\right) v}\end{array}\right]^{T}\end{aligned}</script><p><strong>由于毫米波信道的稀疏散射特性，路径L的数目相对于G的维度很小。</strong></p><h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><p>考虑毫米波稀疏散射特性，有<script type="math/tex">L</script>个路径。</p><div class="note note-success">            <ul><li><strong>Compressed Channel Estimation for Intelligent Reflecting Surface-Assisted Millimeter Wave Systems</strong>.  <em>Peilan Wang</em> et.al.  <strong>IEEE Signal Processing Letters, 2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9103231">pdf</a>)  (Citations <strong>72</strong>)</li><li><strong>Deep Channel Learning for Large Intelligent Surfaces Aided mm-Wave Massive MIMO Systems</strong>.  <em>Ahmet M. Elbir</em> et.al.  <strong>IEEE Wireless Communications Letters, Sept.  2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9090876">pdf</a>)  (Citations <strong>51</strong>)</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Communication</tag>
      
      <tag>Channel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通信基础-循环对称复高斯噪声</title>
    <link href="/2022/04/11/CSCG/"/>
    <url>/2022/04/11/CSCG/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>CSCG: Circularly Symmetric Complex zero-mean white Gaussian noise 循环对称复高斯噪声</strong></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数学定义：</p><script type="math/tex; mode=display">\textbf{Z}\sim\mathcal{CN}(0,1)\to \Re{\textbf{Z}} \perp \!\!\! \perp\Im{\textbf{Z}}\\and\\\Re{\textbf{Z}}\sim \mathcal{N}(0,1/2)\quad \Im{\textbf{Z}}\sim\mathcal{N}(0,1/2)</script><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><ul><li>Circularly: means the variance of the real and imaginary parts are equal.</li><li>Gaussian: means the probability distribution of the amplitudes of the noise samples is Gaussian</li></ul><h2 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h2><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">(</span><span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>sigma<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>其中sigmal是方差</p><h2 id="正态分布的再生性"><a href="#正态分布的再生性" class="headerlink" title="正态分布的再生性"></a>正态分布的再生性</h2><p>设随机比昂量<script type="math/tex">X</script>和<script type="math/tex">Y</script>相互独立且分别服从正态分布<script type="math/tex">N\sim(\mu_1,\sigma_1^2)</script>和<script type="math/tex">N\sim(\mu_2,\sigma_2^2)</script>，则<script type="math/tex">Z=X+Y</script>服从正态分布<script type="math/tex">N\sim(\mu_1+\mu_2,\sigma_1^2+\sigma_2^2)</script></p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSCG</tag>
      
      <tag>Communication</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通信基础-IQ调制</title>
    <link href="/2022/04/11/IQmodulation/"/>
    <url>/2022/04/11/IQmodulation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IQ调制"><a href="#IQ调制" class="headerlink" title="IQ调制"></a>IQ调制</h1><h2 id="IQ调制原理"><a href="#IQ调制原理" class="headerlink" title="IQ调制原理"></a>IQ调制原理</h2><p>首先，已调信号可以表示为：</p><script type="math/tex; mode=display">M(t)\cos(wt+\phi(t))\label{eqn:1}</script><p>所谓调制，无非是调整幅度<script type="math/tex">M(t)</script>或者相位<script type="math/tex">\phi(t)</script>（由于频率是相位关于时间的微分，所以调频也可以包含在调相中）。</p><p>如式<script type="math/tex">\ref{eqn:1}</script>的形式，在极坐标中可以表示为：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200317215459221.png" alt="调制信号极坐标表示" style="zoom:50%;" /></p><p>所以可以得到<script type="math/tex">i(t)=M(t)\cos(\phi(t)),q(t)=M(t)\sin(\phi(t))</script>。</p><p>映射完坐标，就需要上变频，IQ调制上变频的方式如下：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/v2-c78e0ca1a780df0d2f94628aa22985cb_1440w.jpg" alt="上变频" style="zoom: 67%;" /></p><p>根据频域卷积定理可得：</p><script type="math/tex; mode=display">\begin{aligned}&i(t) \cdot \cos \left(\omega_{c} t\right) \leftrightarrow \frac{1}{2 \pi} \cdot I(\omega) *\left\{\pi \cdot\left[\delta\left(\omega+\omega_{c}\right)+\delta\left(\omega-\omega_{c}\right)\right]\right\}=\frac{1}{2} \cdot\left[I\left(\omega+\omega_{c}\right)+I\left(\omega-\omega_{c}\right)\right] \\&q(t) \cdot \sin \left(\omega_{c} t\right) \leftrightarrow \frac{1}{2 \pi} \cdot Q(\omega) *\left\{j \pi \cdot\left[\delta\left(\omega+\omega_{c}\right)-\delta\left(\omega-\omega_{c}\right)\right]\right\}=\frac{1}{2} j \cdot\left[Q\left(\omega+\omega_{c}\right)-Q\left(\omega-\omega_{c}\right)\right]\end{aligned}</script><p>可以知道对I路<script type="math/tex">i(t)</script>乘<script type="math/tex">\cos(w_ct)</script>等于在频域上对信号频谱进行搬移。由于正余弦的傅里叶变换有：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/v2-0f4b43ee7389c065abde1f122ab65141_1440w.jpg" alt="正余弦傅立叶变换" style="zoom:67%;" /></p><p>则进行频谱搬移的过程可以由下图展示：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/v2-fe0a0c2d3fd5001439db3ddb585e3445_1440w.jpg" alt="img"></p><p>可以看到，搬上去的时候出现了负频率（图画得有问题）。合路后发射。<br><div class="note note-warning">            <p>带宽问题怎么理解？是单边带还是双边带？</p>          </div></p><p>接收端接受到了之后，进行下变频：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/v2-5a91f588fa13b91ffb3773ad9b7ac892_1440w.jpg" alt="下变频" style="zoom:67%;" /></p><p>对于<script type="math/tex">q(t)</script>路，<script type="math/tex">i(t)</script>路相关的基带信号抵消了，所以用一个低通滤波器就可以恢复出<script type="math/tex">q(t)</script>路；对<script type="math/tex">i(t)</script>路同理。</p><h2 id="为什么IQ调制"><a href="#为什么IQ调制" class="headerlink" title="为什么IQ调制"></a>为什么IQ调制</h2><p>(1) IQ调制可以通过<strong>提高符号速率</strong>或者<strong>采用高阶调制</strong>实现更高的数据速率，非常方便灵活，这是传统的模拟调制所远远不及的。</p><p>(2) 实现高速通信时，<strong>IQ</strong> <strong>调制更加易于实现</strong>。IQ 调制可以非常方便地将符号映射至矢量坐标系中，从而完成数字调制；同理，在接收侧也可以非常方便地根据符号映射解调出原始数据比特流。</p><p>(3) <strong>IQ</strong> <strong>调制具有更高地频谱利用率</strong>。因为I和Q是在相位上面正交的（不相干）,可以作为两路信号看待。</p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IQ  Modulation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Channel Estimation相关其他文章阅读</title>
    <link href="/2022/04/10/ChannelEstimation-Other/"/>
    <url>/2022/04/10/ChannelEstimation-Other/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>Compressed Channel Estimation for Intelligent Reflecting Surface-Assisted Millimeter Wave Systems</strong>.  <em>Peilan Wang</em> et.al.  <strong>IEEE Signal Processing Letters, 2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9103231">pdf</a>)  (Citations <strong>72</strong>)</p><div class="note note-success">            <p>IRS辅助MISO系统的信道估计问题：忽略direct channel，只考虑cascaded channel（这种假设也比较常见），利用级联信道的稀疏结构将估计值转换为压缩感知问题。</p>          </div><p>具体内容可以<a href="https://blog.csdn.net/weixin_39274659/article/details/105085411">参考博客</a>以及<a href="https://blog.csdn.net/weixin_39274659/article/details/110494905">仿真</a>。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel Estimation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sketchy Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora and Hexo工具箱</title>
    <link href="/2022/04/09/typorautils/"/>
    <url>/2022/04/09/typorautils/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Typora-工具箱"><a href="#Typora-工具箱" class="headerlink" title="Typora 工具箱"></a>Typora 工具箱</h2><h3 id="公式编号"><a href="#公式编号" class="headerlink" title="公式编号"></a>公式编号</h3><ul><li>手动：</li></ul><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$$y=a+b\label&#123;eqn:1&#125;\tag&#123;1&#125;$$This is eqn $$\ref&#123;eqn:1&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\begin{align*}y=a+b\label{eqn:1}\tag{1}\end{align*}</script><p>This is eqn <script type="math/tex">\ref{eqn:1}</script></p><ul><li>自动：</li></ul><p>打开偏好设置中的自动编号，就不用写 \tag{1} 了。</p><h3 id="引用段落"><a href="#引用段落" class="headerlink" title="引用段落"></a>引用段落</h3><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">引用第一段</span>](<span class="token url">###公式编号</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><a href="###公式编号">引用第1.1段</a></p><h2 id="Hexo-Fluid-工具箱"><a href="#Hexo-Fluid-工具箱" class="headerlink" title="Hexo Fluid 工具箱"></a>Hexo Fluid 工具箱</h2><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note success %&#125;文字 或者 markdown 均可&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><div class="note note-success">            <p>文字 或者 markdown 均可</p>          </div><h3 id="段内标签"><a href="#段内标签" class="headerlink" title="段内标签"></a>段内标签</h3><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% label primary @text %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><span class="label label-primary">在这里填写的文字部分（text部分）不能以(at)开头</span>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>Typora</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/09/channelestimationBySL/MyPaperNote/"/>
    <url>/2022/04/09/channelestimationBySL/MyPaperNote/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="./paper.pdf" width="100%" height="100%"></iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Supervised Learning for Channel Estimation</title>
    <link href="/2022/04/09/channelestimationBySL/"/>
    <url>/2022/04/09/channelestimationBySL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Deep Channel Learning for Large Intelligent Surfaces Aided mm-Wave Massive MIMO Systems</strong>.  <em>Ahmet M. Elbir</em> et.al.  <strong>IEEE Wireless Communications Letters, Sept.  2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9090876">pdf</a>)  (Citations <strong>51</strong>)</p><p>其余细节可以参考<a href=".\MyPaperNote.html">我的论文笔记</a></p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>LIS: Large Intelligent Surface==Intelligent Reflecting Surface</li><li>NMSE: Normalized Mean-Square-Error</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><ul><li><p>提出一种基于监督学习的IRS信道估计，<strong>对一个用户K</strong>，信道分为direct channel 和 cascaded channel：</p><ul><li><p>direct channel：只有1个信道</p></li><li><p>cascaded channel of IRS with L elements：有L个信道，即每个element都有一个级联信道，从BS-&gt;element-&gt;User K</p></li></ul></li><li><p>每个用户有<strong>两个一样的ChannelNet</strong>进行训练，一个负责和预测direct channel，一个负责训练和预测cascaded channel</p></li><li>用一些不同信噪比以及噪声数据进行Robust训练</li><li>训练样本的标记有<strong>两种approach</strong>获得（只用关心<strong>第一种</strong>，逻辑通顺，且效果更好）</li><li>训练样本有三个通道，I路Q路和absolute路，说这样<strong>效果比单纯IQ好</strong>（我持怀疑态度）</li><li>信道估计的衡量标准是NMSE</li><li><strong>信道建模为SV信道</strong></li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="系统模型"><a href="#系统模型" class="headerlink" title="系统模型"></a>系统模型</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409204214678.png" alt="An IRS assisted mm-Wave massive MIMO scenario" style="zoom:50%;" /></p><ul><li>BS有<script type="math/tex">M</script>根天线</li><li>同时服务于<script type="math/tex">K</script>个Users</li><li>IRS有<script type="math/tex">L</script>个elements</li></ul><h3 id="发射信号建模"><a href="#发射信号建模" class="headerlink" title="发射信号建模"></a>发射信号建模</h3><p>对第<script type="math/tex">k</script>th Users发射的信号用<script type="math/tex">s_k\in\mathbb{C}</script>表示；第<script type="math/tex">k</script>th用户需求的precoder用<script type="math/tex">\textbf{f}_k\in\mathbb{C}^{M\times1}</script>表示，且有<script type="math/tex">\textbf{F}=[\textbf{f}_1,\cdots,\textbf{f}_K]\in\mathbb{C}^{M\times K}</script>，所以发射信号为：</p><script type="math/tex; mode=display">\begin{align}\bar{s}=\sum\limits_{k=1}^K=\sqrt{\gamma_k}\bar{\textbf{f}}_ks_k\quad\in\mathbb{C}^{M\times1} \label{eqn1}\tag{1}\end{align}</script><p>where <script type="math/tex">\bar{\textbf{f}}_k=\frac{\textbf{f}_k}{||\textbf{f}_k||_2}</script>，<script type="math/tex">\gamma_k</script>是给<script type="math/tex">k</script>th User 分配的功率。</p><div class="note note-light">            <p>值得注意的是：BS是同时给<script type="math/tex">K</script>个用户发射信号的，这一点与雷达中不同。</p>          </div><h3 id="接收信号建模"><a href="#接收信号建模" class="headerlink" title="接收信号建模"></a>接收信号建模</h3><p>根据<a href="##发射信号建模">3.2小结</a>建模的发射信号，并结合IRS的建模（参考以往文章），得到接收端信号：</p><script type="math/tex; mode=display">y_k=(\textbf{h}_{D,k}^\mathrm{H}+\textbf{h}_{A,k}^{\mathrm{H}}\Psi^{\mathrm{H}}\textbf{H}^\mathrm{H})\bar{s}+n_k\label{eqn:2}\tag{2}</script><p>其中，<script type="math/tex">\Psi</script>为IRS反射的幅度相位对角阵，<script type="math/tex">\Psi=\text{diag}\{\beta_1exp(j\phi_1),\cdots,\beta_Lexp(j\phi_L)\}</script>，可以控制<script type="math/tex">\beta_i</script>的大小<script type="math/tex">\{0,1\}</script>来控制IRS反射与否；<script type="math/tex">\textbf{h}_{D,k}^\mathrm{H}\in\mathbb{C}^M</script>是 direct channel，<script type="math/tex">\textbf{H}^\mathrm{H}\in\mathbb{C}^{M\times L}</script>是BS-&gt;IRS的信道，<script type="math/tex">\textbf{h}_{A,k}^{\mathrm{H}}\in\mathbb{C}^L</script>是IRS到User的信道，级联起来有<script type="math/tex">\textbf{G}_k=\textbf{H}\cdot\text{diag}\{\textbf{h}_{A,k}\}\in\mathbb{C}^{M\times L}</script>，则有式<script type="math/tex">\ref{eqn:2}</script>的级联版本：</p><script type="math/tex; mode=display">y_k=(\textbf{h}_{D,k}^\mathrm{H}+\Psi^{\mathrm{H}}\textbf{G}_k^\mathrm{H})\textbf{X}+\textbf{n}_k\label{eqn:3}\tag{3}</script><p>where <script type="math/tex">\textbf{X}=[\textbf{x}_1,\cdots,\textbf{x}_P]\in\mathbb{C}^{M\times P}</script>为导频信号矩阵，<script type="math/tex">P\geq M</script>为导频数量。</p><h3 id="得到信道标签"><a href="#得到信道标签" class="headerlink" title="得到信道标签"></a>得到信道标签</h3><blockquote><p>有approach 1 和approach 2，但是由于approach 1 比较好理解而且性能更好，只整理approach 1</p></blockquote><ul><li>首先，<script type="math/tex">\beta_i=0,\forall i=1,\cdots,L</script>，即turn off 所有element</li></ul><blockquote><blockquote><p>值得注意的是，这里<script type="math/tex">\beta_i</script>实际中不可能取0，所以后文也讨论了非0的情况（<script type="math/tex">\beta</script>是一个极小值）</p></blockquote></blockquote><ul><li>然后，可以由接受到的信号：</li></ul><script type="math/tex; mode=display">\textbf{y}_{D}^{(k)}=\textbf{h}_{D,k}^\mathrm{H}\textbf{X}+\textbf{n}_{D,k}\tag{4}</script><p>得到<script type="math/tex">\textbf{h}_{D,k}</script>，<span class="label label-primary">作为direct channel 的标签</span></p><ul><li>再然后，依次打开<script type="math/tex">l-th \quad\forall l=1,\cdots,L</script> element（每次<script type="math/tex">L</script>个elements中只有一个被激活），有：</li></ul><script type="math/tex; mode=display">\textbf{y}_{C}^{(k,l)}=(\textbf{h}_{D,k}^\mathrm{H}+\textbf{g}_{k,l}^\mathrm{H})\textbf{X}+\textbf{n}_{k,l}\tag{5}</script><ul><li>由LS算法有：</li></ul><script type="math/tex; mode=display">\hat{\textbf{g}}_{k,l}=(\textbf{y}_C^{(k,l)}\textbf{X}^\mathrm{H}(\textbf{X}\textbf{X}^\mathrm{H})^{-1})\mathrm{H}-\textbf{h}_{D,k}\tag{6}</script><p>所以有了<script type="math/tex">\hat{\textbf{h}}_{D,k}</script>，就有了<script type="math/tex">\hat{\textbf{g}}_{k,l}</script>，则有<script type="math/tex">\hat{G}_k=[\hat{\textbf{g}}_{k,1}\cdots,\hat{\textbf{g}}_{k,L}]</script>，<span class="label label-primary">作为cascaded channel 的标签</span></p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409215504129.png" alt="Data Generation" style="zoom: 67%;" /></p><h3 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409215556530.png" alt="ChannelNet" style="zoom:80%;" /></p><p>把direct channel数据reshape成了矩阵，方便输入模型；cascaded channel 的数据本来就是一个matrix</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409215731318.png" alt="with SNR"></p><p>可以看到proposed 结果比LS、MLP好，<strong>（因为Direct channel 中，Method 1 和Method 2都是一样的，所以只有一条线）</strong>，而cascaded channel中，Method 1最好。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409215936625.png" alt="with noise"></p><p>给标签（channel Information）加了一定的噪声，以实现泛化 or robustness。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409220124999.png" alt="with angle"></p><p>随角度变化（robustness），鲁棒性不错</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220409220240072.png" alt="image-20220409220240072"></p><p>考虑<script type="math/tex">\beta_i\neq0</script>这种实际情况，也有不错的表现。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel Estimation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
      <tag>Channel Estimation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSI相关其他文献阅读</title>
    <link href="/2022/04/08/CSI-Free-Ohter/"/>
    <url>/2022/04/08/CSI-Free-Ohter/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>Ultra-Low Latency, Low Energy, and Massiveness in the 6G Era via Efficient CSIT-Limited Scheme</strong>.  <em>Onel L. A. Lopez</em> et.al.  <strong>IEEE Communications Magazine, November  2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9269936">pdf</a>)  (Citations <strong>9</strong>)</p><p>总结了一些主要的<strong>CSI在发射端获取的限制</strong>，展望如何设计CSIT-limited scheme，然后提出future work。</p><ul><li>依靠统计CSIT</li><li>使用基于位置的策略来有效分配导频序列</li></ul><hr><blockquote><p><strong>A Low-Complexity Beamforming Design for Multiuser Wireless Energy Transfer</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Wireless Communications Letters, Jan.  2021</strong>  (<a href="https://ieeexplore.ieee.org/document/9184149">pdf</a>)  (Citations <strong>4</strong>)</p><p>提出一种优化方法（Ultra-Low Latency, Low Energy, and Massiveness）</p><ul><li>只利用信道的一阶统计量CSI-limited</li><li>提出了一种低复杂度但有效的EB算法，可以获得接近最优结果（在低<script type="math/tex">\kappa</script>时甚至优于平均CSI的最优化结果（Optimum））</li><li>多用户性能随天线数目的增加而提高，同时可以利用旋转天线来获得更好的性能</li><li><strong>可以直接适用于WPCN和SWIPT</strong></li></ul></blockquote><div class="note note-success">            <p><a href="https://lcjoffrey.top/2022/04/19/alow-complexity-beamforming-design/">FINISHED</a></p>          </div><hr>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sketchy Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRL和IRS的结合（主要关注IRS怎么获取CSI）</title>
    <link href="/2022/04/08/DRL-IRS/"/>
    <url>/2022/04/08/DRL-IRS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Deep Reinforcement Learning for Intelligent Reflecting Surfaces: Towards Standalone Operation</strong>.  <em>Abdelrahman Taha</em> et.al.  <strong>2020 IEEE 21st International Workshop on Signal Processing Advances in Wireless Communications (SPAWC), 26-29 May 2020</strong>  (<a href="https://ieeexplore.ieee.org/document/9154301">pdf</a>)  (Citations <strong>24</strong>)</p><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><p>提出一种DRL（Deep Reinforcement Learning）的方法，不用<strong>额外的训练开销</strong>就可以获得接近Supervised Learning 和Perfect CSI的性能。而且这个方法不受其他基站控制，是<strong>standalone</strong>的。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220407205815166.png" alt="示意图" style="zoom: 50%;" /></p><p>值得注意的是，对于整个IRS，并不是全部无源的，而是部分有源，<strong>称为Active element</strong>，等同于对全部IRS CSI进行sample。</p><p>实验结果说明：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220407210210939.png" alt="实验一" style="zoom: 40%;" /></p><p>实验结果说明，虽然DRL需要更多的样本训练，但是DRL方案仅对每个训练片段使用一个Beam，而DL方案需要400个。</p><p>然后利用类似半监督-伪标记的方法，用DRL预测最优希望的<script type="math/tex">k_B</script>波束，并把这些波束添加到训练集中</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220408102154327.png" alt="image-20220408102154327" style="zoom: 80%;" /></p><p>同时，还可以看到，Ideal Rewarding 性能更加，即仅当可达速率等于期望值时，才给正向反馈，否则都是负向反馈。</p><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220408102710833.png" alt="算法流程" style="zoom: 80%;" /></p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Intelligent Reflecting Surface</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IRS</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSI-Free总结</title>
    <link href="/2022/03/30/summaryOfCSIFree/"/>
    <url>/2022/03/30/summaryOfCSIFree/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSI-Free-总结"><a href="#CSI-Free-总结" class="headerlink" title="CSI-Free 总结"></a>CSI-Free 总结</h1><h2 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h2><p>无线能量传输（WET/WPT）,经历了从①设计更好的接收机电路<script type="math/tex">\to</script>②设计能量波束赋形（Energy Beamforming）<script type="math/tex">\to</script>③设计能量波形（Energy Waveform）<script type="math/tex">\to</script>④设计能量调制（Energy Modulation）等阶段。到现在研究主要分四个方向：</p><ul><li>Partial CSI-Based EB/Statistical CSI: 统计CSI，不是瞬时的<ul><li>在大时间内变化， 而不需要频繁更新。</li><li>有限CSI采集开销和能量消耗得到。</li><li>更不容易出错（统计的）</li></ul></li><li>CSI-Free：不需要CSI，具体有三种算法<ul><li><a href="https://lcjoffrey.top/2022/03/20/CSI-FREE-Transmit-diversity/">APS-EMW</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="B. Clerckx and J. Kim, “On the Beneficial Roles of Fading and Transmit Diversity in Wireless Power Transfer With Nonlinear Energy Harvesting,” in IEEE Transactions on Wireless Communications, vol. 17, no. 11, pp. 7731-7743, Nov. 2018, doi: 10.1109/TWC.2018.2870377.">[1]</span></a></sup></li><li><a href="https://lcjoffrey.top/2022/03/27/OnCSIFree/">AA-IS/SA</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[3]</span></a></sup></li><li><a href="https://lcjoffrey.top/2022/03/27/OnCSIFree/">AA-SS 两种</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[3]</span></a></sup></li></ul></li><li>Positioning-Based：在CSI-Free的基础上，通过位置信息，旋转PB的天线以获得更好的性能（AA-SS可以从中获得较好的增益）</li><li>Hybrid：混合模式，结合Perfect CSI、Limit CSI、CSI-free、Positioning-Based EB等。例如在IoT设备电量较低时先通过CSI-Free传输能量，电量得到补充后，可以传输导频，再使用perfect CSI等。</li></ul><p>目前主要调研的是CSI-Free算法。主要有由Bruno等人研究的构造快衰信道来实现能量接收端增益<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="B. Clerckx and J. Kim, “On the Beneficial Roles of Fading and Transmit Diversity in Wireless Power Transfer With Nonlinear Energy Harvesting,” in IEEE Transactions on Wireless Communications, vol. 17, no. 11, pp. 7731-7743, Nov. 2018, doi: 10.1109/TWC.2018.2870377.">[1]</span></a></sup>和Onel等人研究的多天线发射机和单天线接收机的结构<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.">[3]</span></a></sup>。</p><pre><code class="mermaid" >graph LRA[Wireless Energy Transfer]-->B[Statistical CSI]A-->C["CSI-Free"]A-->D["Positioning-Based"]D-->D2["AA-SS受旋转影响(角度影响)大"]A-->E["Hybrid"]C-->F["Bruno et.al."]F-->G["快衰信道对EH有增益"]C-->H["OneL et.al."]H-->I1["OA(性能很差)"]H-->I2["AA"]H-->I3["SA(WET和AA-IS相近，WIT比AA-IS好)"]I2-->II1["AA-SS"]I2-->II2["AA-IS"]II1-->III1["AA-SS<sub>min var</sub>"]II1-->III2["AA-SS<sub>max E</sub>"]</code></pre><h3 id="构造快衰信道实现WET的增强"><a href="#构造快衰信道实现WET的增强" class="headerlink" title="构造快衰信道实现WET的增强"></a>构造快衰信道实现WET的增强</h3><h4 id="衰落对能量接收的增强"><a href="#衰落对能量接收的增强" class="headerlink" title="衰落对能量接收的增强"></a>衰落对能量接收的增强</h4><p>Bruno Clerckx等人提出，信道衰落（fading）对能量收集（EH）是有益的：这是因为能量接收器通常是<strong>非线性的</strong>。<strong>对这个非线性特性的能量接收模型进行四阶泰勒展开，得到有衰落的情况下，能量受益增大</strong>。但同时，衰落会降低信道容量，意味着对WIT有害。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220320210336493.png" alt="天线等效电路和二极管整流器（包括非线性器件-二极管和低通滤波器）" style="zoom: 50%;" /></p><h4 id="分集对能量接收的增强"><a href="#分集对能量接收的增强" class="headerlink" title="分集对能量接收的增强"></a>分集对能量接收的增强</h4><p>基于此结论，仅考虑WPT（或者称为WET），使用分集发射，即在每根天线上添加一个时变的相位<script type="math/tex">\psi_m(t)</script>，如下图所示：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220320212227078.png" alt="分集发射的一般结构" style="zoom: 50%;" /></p><p>则发射端信号为：</p><script type="math/tex; mode=display">\begin{aligned}x_m(t)&=\sqrt{\frac{2P}{M}}\cos(w_0t+\psi_m(t))\\&=\sqrt{\frac{2P}{M}}\Re\{e^{j(w_0t+\psi_m(t))}\}\end{aligned}</script><p>其中<script type="math/tex">P</script>为总能量；<script type="math/tex">M</script>为天线个数；<script type="math/tex">\Re(\cdot)</script>为取实部。</p><p>接收端信号为：</p><script type="math/tex; mode=display">y(t)=\sqrt{\frac{2P}{M}}\mathscr\{\Lambda^{-1/2}h(t)e^{jw_0t}\}</script><p>其中：</p><script type="math/tex; mode=display">h(t)=\sum\limits_{m=1}^Mh_me^{j\psi_m(t)}</script><p>其中，接收天线的路径损耗和衰落为<script type="math/tex">\Lambda ^{-1/2}h_m</script>。</p><p><strong>可以理解为分集在衰落上<script type="math/tex">h</script>上乘了一个系数，创造了一个快衰信道，结合衰落使能量接收增加的特点，使能量接收增益增大</strong></p><h4 id="天线数目对能量收集器的增强"><a href="#天线数目对能量收集器的增强" class="headerlink" title="天线数目对能量收集器的增强"></a>天线数目对能量收集器的增强</h4><p>建模出来在泰勒展开四阶项中有一个系数<script type="math/tex">G_{td}=(1+\frac{M-1}{M})</script>，即有如下趋势：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220320214305022.png" alt="随天线数目增益" style="zoom: 50%;" /></p><p>进一步，还可以结合Energy Modulation和Energy Waveforming来进一步增强能量接收。</p><h3 id="讨论不同发射机结构对WET的影响"><a href="#讨论不同发射机结构对WET的影响" class="headerlink" title="讨论不同发射机结构对WET的影响"></a>讨论不同发射机结构对WET的影响</h3><p>以下内容中，接收机都是单天线设备。</p><h4 id="OA（only-antenna）：发射机为单天线，单天线全功率输出。性能很差。"><a href="#OA（only-antenna）：发射机为单天线，单天线全功率输出。性能很差。" class="headerlink" title="OA（only  antenna）：发射机为单天线，单天线全功率输出。性能很差。"></a>OA（only  antenna）：发射机为单天线，单天线全功率输出。性能很差。</h4><h4 id="AA（all-antenna）：发射机为多天线，功率平均分配。可以选择不同的侧重优化方式和不同的发射信号。"><a href="#AA（all-antenna）：发射机为多天线，功率平均分配。可以选择不同的侧重优化方式和不同的发射信号。" class="headerlink" title="AA（all antenna）：发射机为多天线，功率平均分配。可以选择不同的侧重优化方式和不同的发射信号。"></a>AA（all antenna）：发射机为多天线，功率平均分配。可以选择不同的侧重优化方式和不同的发射信号。</h4><ul><li>AA-SS：多天线，每根天线发射相同的信号。根据优化需求，分为<script type="math/tex">AA-SS_{\min var}</script>和<script type="math/tex">AA-SS_{\max E}</script></li></ul><p><script type="math/tex">AA-SS_{\min var}</script>优化结果为，能量信号与发射机天线（ULA）的法线方向平行（能量信号方向与天线夹角为0度），此时取得接收机能量有最小方差，但此时均值最小。</p><p><script type="math/tex">AA-SS_{\max E}</script>优化结果为，能量信号与发射机天线（ULA）的法线方向垂直（能量信号方向与天线夹角为90度），且天线与天线之间存在<script type="math/tex">\pi</script>相位差，此时取得接收机能量有最大均值，但此时方差最大。</p><ul><li>AA-IS：多天线，每根天线发射i.i.d.信号。和下面的SA性能接近</li></ul><h4 id="SA（Switching-Antennas）：多天线，每次选一根天线全功率输出，输出时间是总时间的1-M。性能和AA-IS相似，但是只需要一个发射链路，方差小（均值与AA-SS相比也小）。"><a href="#SA（Switching-Antennas）：多天线，每次选一根天线全功率输出，输出时间是总时间的1-M。性能和AA-IS相似，但是只需要一个发射链路，方差小（均值与AA-SS相比也小）。" class="headerlink" title="SA（Switching Antennas）：多天线，每次选一根天线全功率输出，输出时间是总时间的1/M。性能和AA-IS相似，但是只需要一个发射链路，方差小（均值与AA-SS相比也小）。"></a>SA（Switching Antennas）：多天线，每次选一根天线全功率输出，输出时间是总时间的<script type="math/tex">1/M</script>。性能和AA-IS相似，但是只需要一个发射链路，方差小（均值与AA-SS相比也小）。</h4><p>注意，由于<script type="math/tex">SA</script>实现简单，而且可以很好地利用其余天线做WIT发射分集，所以<script type="math/tex">SA</script>和<script type="math/tex">AA-IS</script>相比，肯定选择<script type="math/tex">SA</script>。</p><h2 id="CSI-Free算法对比"><a href="#CSI-Free算法对比" class="headerlink" title="　CSI-Free算法对比"></a>　CSI-Free算法对比</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220328152458628.png" alt="几种方式的对比" style="zoom: 50%;" /><br>具体内容见Onel文章<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, H. Alves, R. D. Souza, S. Montejo-Sánchez, E. M. G. Fernández and M. Latva-Aho, “Massive Wireless Energy Transfer: Enabling Sustainable IoT Toward 6G Era,” in IEEE Internet of Things Journal, vol. 8, no. 11, pp. 8816-8835, 1 June1, 2021, doi: 10.1109/JIOT.2021.3050612.">[4]</span></a></sup><br>由图可知，APS-EMW和AA-IS/SA策略的接收能量都比较发散（均匀）。而AA-SS的两种优化形式都比较具有方向性。</p><p>APS-EMW的低能量区域比较大，只适用于一些低能量要求的场景，如下图所示：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220328152530913.png" alt="几种算法能量分布对比" style="zoom: 50%;" /></p><p>注意到，<script type="math/tex">AA-SS_{\min var}</script>全能量值覆盖区间都比较低；<script type="math/tex">AA-SS_{\max E}</script>具有全能量值覆盖区间都高；<script type="math/tex">SA</script>和<script type="math/tex">AA-IS</script>介于二者中间。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220330221528144.png" alt="几种CSI-Free算法的总结" style="zoom: 50%;" /></p><p><em>虽然总结上写SA/AA-IS不适合结合IRS，因为其能量传输是全方位的。但换个角度讲，SA方案方差性能比较好，但能量传输不具有方向性，IRS是否可以作为集中SA发射能量的一种方式？？</em></p><h2 id="CSI-Free-versus-CSI-Based"><a href="#CSI-Free-versus-CSI-Based" class="headerlink" title="CSI-Free versus CSI-Based"></a>CSI-Free versus CSI-Based</h2><p>这里对比的是CSI-Free和CSI-Based在WPCN情况下的性能<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="O. L. A. López, N. H. Mahmood, H. Alves and M. Latva-aho, “CSI-Free vs CSI-Based Multi-Antenna WET for Massive Low-Power Internet of Things,” in IEEE Transactions on Wireless Communications, vol. 20, no. 5, pp. 3078-3094, May 2021, doi: 10.1109/TWC.2020.3047355.">[5]</span></a></sup>，因为作者认为，WIT是较少发生的，WPT/WET是持续发生的。所以作者考虑WPCN系统而不是SWIPT系统。</p><p>CSI-Free采取SA，CSI-Based采取MMSE进行波束形成（precoding）(同时证明了在文章设置中，MMSE比ZF好)</p><p>作者考虑了两种情况：</p><ul><li>WIT事件出现<script type="math/tex">\sim</script>Periodic Traffic</li><li>WIT事件出现<script type="math/tex">\sim</script>Possion Traffic</li></ul><p>得到一些主要结论（结论有很多，这里只写了主要结论，其余见原文或者<a href="https://lcjoffrey.top/2022/03/29/CSIFreeversusCSIBased/">我的笔记</a>）</p><ul><li><p>CSI-Free和CSI-Based在接收机数量/节点数量<script type="math/tex">\to\infty</script>时相同，因为CSI-Free和接收机数量无关（不需要波束形成），而CSI-Based随接收机数量增多，天线波束增益下降</p></li><li><p>CSI-Free在Periodic Traffic 情况下是比较好的，但Periodic Traffic  情况下不太行</p></li><li>Possion Traffic <strong>存在一个最佳的碰撞概率</strong></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>B. Clerckx and J. Kim, “On the Beneficial Roles of Fading and Transmit Diversity in Wireless Power Transfer With Nonlinear Energy Harvesting,” in IEEE Transactions on Wireless Communications, vol. 17, no. 11, pp. 7731-7743, Nov. 2018, doi: 10.1109/TWC.2018.2870377.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>O. L. A. López, H. Alves, R. D. Souza and S. Montejo-Sánchez, “Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer,” in IEEE Transactions on Communications, vol. 67, no. 10, pp. 7245-7262, Oct. 2019, doi: 10.1109/TCOMM.2019.2928542.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>O. L. A. López, S. Montejo-Sánchez, R. D. Souza, C. B. Papadias and H. Alves, “On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer,” in IEEE Internet of Things Journal, vol. 8, no. 1, pp. 278-296, 1 Jan.1, 2021, doi: 10.1109/JIOT.2020.3003114.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>O. L. A. López, H. Alves, R. D. Souza, S. Montejo-Sánchez, E. M. G. Fernández and M. Latva-Aho, “Massive Wireless Energy Transfer: Enabling Sustainable IoT Toward 6G Era,” in IEEE Internet of Things Journal, vol. 8, no. 11, pp. 8816-8835, 1 June1, 2021, doi: 10.1109/JIOT.2021.3050612.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>O. L. A. López, N. H. Mahmood, H. Alves and M. Latva-aho, “CSI-Free vs CSI-Based Multi-Antenna WET for Massive Low-Power Internet of Things,” in IEEE Transactions on Wireless Communications, vol. 20, no. 5, pp. 3078-3094, May 2021, doi: 10.1109/TWC.2020.3047355.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSI Free</tag>
      
      <tag>WET</tag>
      
      <tag>WPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/29/CSIFreeversusCSIBased/MyPaperNote/"/>
    <url>/2022/03/29/CSIFreeversusCSIBased/MyPaperNote/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="./paper.pdf" width="100%" height="100%"></iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSI-FREE Versus CSI-Based</title>
    <link href="/2022/03/29/CSIFreeversusCSIBased/"/>
    <url>/2022/03/29/CSIFreeversusCSIBased/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>推导比较复杂， 主要整理了结论，更多信息见<a href=".\MyPaperNote.html">我的论文笔记</a></p><p><strong>CSI-Free vs CSI-Based Multi-Antenna WET for Massive Low-Power Internet of Things</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Transactions on Wireless Communications, May  2021</strong>  (<a href="https://ieeexplore.ieee.org/document/9316281">pdf</a>)  (Citations <strong>1</strong>)</p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>HTT: Harvest then Transmit</li><li>HAP: Hybrid Access Point: 可以接收数据or发射能量</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><h3 id="assumption"><a href="#assumption" class="headerlink" title="assumption"></a>assumption</h3><ul><li>构建的是<strong>WPCN模型</strong>，因为在实际中<strong>WPCN</strong>比<strong>SWIPT</strong>更贴近实际：<strong>大量时间都进行WPT/WET，少量时间进行WIT</strong></li><li>CSI-Free采用<strong>SA策略</strong>，CSI-Based采用<strong>MMSE</strong>和<strong>ZF</strong>进行波束形成（precoding）</li><li>以最差的（最远的、最大path loss的）节点性能来作为<strong>衡量标准</strong></li><li>考虑<strong>Possion Traffic</strong> 和 <strong>Periodic Traffic</strong>两种情况</li></ul><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><ul><li>最远节点比其他节点<strong>多</strong>经历至少3dB的功率衰减时，<strong>MRT波束形成器接近最优</strong>（CSI-Based）</li><li>SA虽然不能提供更高的平均EH增益，<strong>但是提供更大的WIT、WET分集增益</strong>，因为它只用一根天线WET，其余WIT</li><li><strong>CSI-Free</strong>在<strong>Periodic Traffic</strong>下性能很好，但是在<strong>Possion Traffic</strong>下不太行</li><li>Possion Traffic <strong>存在一个最佳的碰撞概率</strong></li><li>在<strong>WPCN</strong>场景中使用<strong>MMSE</strong>比<strong>ZF</strong>好</li></ul><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="WET-Performance"><a href="#WET-Performance" class="headerlink" title="WET Performance"></a>WET Performance</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329211029929.png" alt="fig. 3" style="zoom: 80%;" /></p><ul><li>CSI-Based（green）随天线数量增多而降低，这是因为波束形成增益随<script type="math/tex">|S|</script>的增大而减小</li><li><strong>CSI-Based（Red）是使用MRT对最远（最大path loss）节点进行供电时的下界（最远的节点-&gt;最差的能源接收性能），一直都比CSI-Free（Blue）大<script type="math/tex">10\log_{10}M_t</script></strong></li><li>SA和AA-IS虽然看起来性能曲线相同，但是由于SA的成本低（WET单发射链路），且可以WIT分集（只有一根天线做WET，其他的作WIT），所以之后都选择SA</li><li>当<script type="math/tex">|S|\to \infty</script>时，CSI-Based（Green）<script type="math/tex">\approx</script> CSI-Free（Blue）</li><li>CSI-Free（AA-SS，Yellow and Orange）仅支持某些特定空间（有ERs）</li></ul><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329213211839.png" alt="fig. 4" style="zoom:80%;" /></p><ul><li>（上）Possion Traffic能量中断概率，（下）Periodic Traffic能量中断概率。横坐标表示对每个天线的导频信号进行CSI估计一些列处理所需要的能量</li><li>因为CSI-Free不需要导频，所以是一根直线；对于CSI-Free大量能量用于CSI，则EH能量减少，以至于能量中断</li><li>虽然天线数量<script type="math/tex">M</script>的增加看起来导致<strong>CSI的获取成本增加</strong>，但是多<strong>天线带来的增益</strong>显然比成本<strong>更有好处</strong></li><li>（下）明显比（上）效率更高：因为下面的确保active的能量是50μw，上面是20μw，意味着同等情况下（下）更容易出现中断</li></ul><h3 id="WIT-Performance"><a href="#WIT-Performance" class="headerlink" title="WIT Performance"></a>WIT Performance</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329213539222.png" alt="fig. 5" style="zoom:80%;" /></p><ul><li>（上）Possion Traffic信息传输中断概率，<script type="math/tex">\xi</script>为碰撞概率。<script type="math/tex">t_s</script>为到达时间间隔；<script type="math/tex">T_c/\lambda</script>是平均到达间隔时间。</li><li>一般而言，高SINR时，MMSE和ZF性能差不多，但是这边做出来的结果MMSE远好于ZF，e.g. fig 5（上）（因为是低功率第低速率WIT）。</li></ul><h3 id="General-Performance"><a href="#General-Performance" class="headerlink" title="General Performance"></a>General Performance</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329214330457.png" alt="fig. 6" style="zoom:80%;" /></p><ul><li><strong>（上）Possion Traffic 能量中断概率随碰撞概率曲线，可以看到存在一个最优碰撞概率（（上）中绿色标点）</strong></li><li><script type="math/tex">M_t\geq M_r</script>会得到更好的结果：（上）中<script type="math/tex">M_t=M-1</script>是最好结果</li><li>Possion Traffic 对非完美SIC比较敏感：（下）中在-70dB就开始上升了（但是意义不大，因为SIC已经比较成熟了）</li></ul><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329214856838.png" alt="fig. 7" style="zoom:80%;" /></p><ul><li>（上）（中）Possion Traffic；（下）Periodic Traffic</li><li><strong>在Possion Traffic中，小<script type="math/tex">M</script>时SA最好，大<script type="math/tex">M</script>时，需要CSI-Based结合一个公平的天线分配（<script type="math/tex">M_t=M/2</script>）</strong></li><li><strong>Periodic Traffic中，SA吊打一切。</strong></li></ul><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329215404520.png" alt="fig. 8" style="zoom:80%;" /></p><ul><li>（上）Possion Traffic 能量中断概率是一个和<strong>信息解码所需能量<script type="math/tex">\tilde{\xi}_0</script></strong>和<strong>对导频信号一些列处理所需能量<script type="math/tex">\xi_0</script></strong>有关的函数（完美CSI的前提下）；</li><li>（下）非完美CSI性能对比<script type="math/tex">\tilde{\xi}_0</script>太小，影响信息中断（信息解码不太行），太大，影响能量中断（没什么能量给EH了）</li></ul><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220329220615250.png" alt="fig. 9" style="zoom:80%;" /></p><ul><li>（上）信息中断性能随平均到达间隔时间（Possion Traffic）曲线；（下）信息中断性能随到达间隔时间（Periodic Traffic）曲线</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSI Free</tag>
      
      <tag>WET</tag>
      
      <tag>WPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/27/OnCSIFree/MyPaperNote/"/>
    <url>/2022/03/27/OnCSIFree/MyPaperNote/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="./paper.pdf" width="100%" height="100%"></iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSI-FREE 分析AA-SS/AA-IS/SA三种结构</title>
    <link href="/2022/03/27/OnCSIFree/"/>
    <url>/2022/03/27/OnCSIFree/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>On CSI-Free Multiantenna Schemes for Massive RF Wireless Energy Transfer</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Internet of Things Journal, Jan.1, 1 2021</strong>  (<a href="https://ieeexplore.ieee.org/document/9119347">pdf</a>)  (Citations <strong>8</strong>)</p><p>因为论文中设计大量推导以及证明和实验，所以具体内容只整理了部分，其余见<a href=".\MyPaperNote.html">我的论文笔记</a>：</p><div>            <input type="checkbox" disabled checked="checked">信道建模、非线性能量转换建模、Preventive Adjustment of Mean Phases          </div><div>            <input type="checkbox" disabled >AA-SS、AA-IS、SA等等          </div><div>            <input type="checkbox" disabled >实验等          </div><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><p>AA-SS: PB所有天线都发射相同的信号，且每根天线功率相同</p><p>AA-IS: PB所有天线发射i. i. d.信号</p><p>SA: M根天线中随机选一根，持续时间1/M</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>准静态信道：时间缓慢变换的信道就是准静态信道了，不随时间变化的信道一般就是静态信道。比如在一段时间内，信道是不变化的，那么在这段时间内就可以看成静态信道。多普勒频移的倒数可以看成信道时变性（信道相干时间）的基准，如果符号持续时间远大于相干时间，那么就是个非静态信道如果符号持续时间远小于相干时间，就可以认为是准静态信道了。</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><p>对AA-SS、AA-IS、SA三种结构进行建模分析，得到其接收机入射端的能量的均值和能量方差是一个Trade off。</p><ul><li>近PB（path loss 小），AA-IS好；远PB（path loss 大），SA好（二者性能统计上比较接近，后面分析也是一起分析的）。</li><li>在AA-SS结构中，阵元数（天线数）<script type="math/tex">M</script>也不是越多越好。越多<script type="math/tex">M</script>越多极小值，取到极小值的几率也增大（fig 1(a)）。</li><li>可以通过<script type="math/tex">\pi</script>相移取得AA-SS的较好结果（图fig 2 (b)）:极小值个数不变；最佳增益在<script type="math/tex">|\phi|=\pi/2</script>时；<strong>曲线下面积增大了</strong>。<strong>能量均值严重依赖天线的平均相移</strong>。</li><li>优化AA-SS有两种：<script type="math/tex">AA-SS_{\max E}</script>和<script type="math/tex">AA-SS_{\min Var}</script>，<script type="math/tex">\max E</script>的variance大，<script type="math/tex">\min Var</script>的mean小。</li><li>优化AA-IS发现：能量均值计算时，由于<script type="math/tex">M</script>在分母，而分子的值极小，所以AA-IS<strong>入射能量均值</strong>与<strong>天线数目关系不大</strong>；而<script type="math/tex">M</script>的增大可以<strong>有效减小方差</strong>。</li><li>优化SA没有讲，因为难以建模，但是和AA-IS性能相近。</li><li>非特定空间/方向，选AA-IS or SA；特定空间和方向选择AA-SS</li><li>AA-SS提供最大的能量均值，但是其方差性能差，而且中断概率高。<strong>似乎AA-SS更适合物联网设备积累能量的场景。</strong></li><li>信道相关性对AA-SS是有益的。</li><li>预防性相移可以用来控制最大化能量均值或者最小化能量方差。</li><li>对于AA-SS， LOS并不是总是有益的。甚至<script type="math/tex">\kappa=0dB</script>的中断概率低于<script type="math/tex">\kappa=10dB</script>。</li><li>AA-IS和SA都受益于小的相关性（越小越好），和大的天线数量（越多越好）和LOS</li></ul><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="Channel-Model"><a href="#Channel-Model" class="headerlink" title="Channel Model"></a>Channel Model</h3><p>莱斯信道建模，由<script type="math/tex">\kappa</script>来控制信道是<strong>瑞利衰落信道</strong>（<script type="math/tex">\kappa=0</script>）还是<strong>完全确定LOS信道</strong>（<script type="math/tex">\kappa\to\infin</script>）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220327000145442.png" alt="image-20220327000145442" style="zoom: 67%;" /></p><p>其中，<script type="math/tex">\textbf{h}_{los}=\left[\begin{array}11 & e^{i\Phi_1} & \cdots e^{i\Phi_{M-1}}\end{array}\right]</script>是确定LOS信道，并且<script type="math/tex">\Phi_t,t\in\{1,\cdots,M-1\}</script>是第<script type="math/tex">(t+1)</script>个阵元相对于第一个阵元的平均相移。<script type="math/tex">\varphi_0</script>是初相；</p><p>其中，<script type="math/tex">\textbf{h}_{nlos}\sim\mathcal{CN}(\textbf{0,R})</script>表示瑞利信道系数。</p><p>考虑ULA，可以得到：</p><script type="math/tex; mode=display">\Phi_t=-t\pi\sin\phi</script><p>其中，<script type="math/tex">t</script>是阵元间隔，<script type="math/tex">\phi</script>是来波（能量信号）和阵元的方向夹角。</p><h3 id="Preventive-Adjustment-of-Mean-Phases"><a href="#Preventive-Adjustment-of-Mean-Phases" class="headerlink" title="Preventive Adjustment of Mean Phases"></a>Preventive Adjustment of Mean Phases</h3><p>做<script type="math/tex">\textbf{h}^*=\Psi\textbf{h}</script>，且有：</p><script type="math/tex; mode=display">\Psi=diag(1,e^{i\psi_1},\cdots,e^{i\psi_{M-1}})</script><p>得到：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220327101257249.png" alt="image-20220327101257249" style="zoom: 67%;" /></p><p>证明见<strong>Noteability</strong>。</p><h3 id="EH-Transfer-Function"><a href="#EH-Transfer-Function" class="headerlink" title="EH Transfer Function"></a>EH Transfer Function</h3><p>非线性表达式：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220327101409153.png" alt="image-20220327101409153" style="zoom:67%;" /></p><p><strong>a,b代表什么物理含义？？</strong></p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSI Free</tag>
      
      <tag>WET</tag>
      
      <tag>WPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSI-FREE 统计分析CSI-FREE能量传输结构</title>
    <link href="/2022/03/24/statistical4WET/"/>
    <url>/2022/03/24/statistical4WET/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Statistical Analysis of Multiple Antenna Strategies for Wireless Energy Transfer</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Transactions on Communications, Oct.  2019</strong>  (<a href="https://ieeexplore.ieee.org/document/8760520">pdf</a>)  (Citations <strong>16</strong>)</p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>PB: Power Beacon</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><ul><li>三种CSI-free方案和两种CSI-Based方案在不同条件下的性能对比</li><li>各种意义上的建模和数学推导（<strong>太难了，看不懂啊</strong>）</li></ul><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><p>系统模型：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220324170240238.png" alt="PB多天线ER单天线系统结构" style="zoom: 120%;" /></p><h3 id="CSI-Free-Strategies"><a href="#CSI-Free-Strategies" class="headerlink" title="CSI-Free Strategies"></a>CSI-Free Strategies</h3><p>一般接收端接收信号建模为：</p><script type="math/tex; mode=display">\begin{aligned}\xi^{rf}_j=\varrho_j|\textbf{h}_j^T\sum\limits^l_{k=1}\textbf{w}_kx_k|^2=\varrho_j\sum\limits_{k=1}^l|\textbf{h}_j^T\textbf{w}_k|^2\end{aligned}</script><p>其中<script type="math/tex">\varrho_j</script>是发射机到接收机的路径损耗<script type="math/tex">\times</script>总功率，<script type="math/tex">\textbf{w}_k</script>是发射机波束形成（precoding vector， 预编码向量）。</p><p>由于考虑二极管电路的特点，最终收到的能量<script type="math/tex">\xi_j</script>与接收机输入的能量<script type="math/tex">\xi_j^{rf}</script>之间的关系如下：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220324173153144.png" alt="最终能量额接收机输入能量的非线性关系式"></p><p>其中<script type="math/tex">\bar{w}_1</script>代表接收门限；<script type="math/tex">\bar{w}_2</script>代表二极管的击穿电压，在未击穿的时候是线性的；击穿后是恒定的；<script type="math/tex">\eta</script>是能量效率。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220324173429153.png" alt="非线性关系式图解" style="zoom: 33%;" /></p><h4 id="Only-Antenna-OA"><a href="#Only-Antenna-OA" class="headerlink" title="Only Antenna, OA"></a>Only Antenna, OA</h4><p>只有<script type="math/tex">M</script>根天线中的一根天线全功率输出。</p><script type="math/tex; mode=display">\begin{aligned}\xi_{jOA}=g(\varrho_j|h_i,j|^2)\end{aligned}</script><p>其中<script type="math/tex">\textbf{w}</script>只有一个元素是1，其余全为0。</p><h4 id="All-Antenna-at-Once-AA"><a href="#All-Antenna-at-Once-AA" class="headerlink" title="All Antenna at Once, AA"></a>All Antenna at Once, AA</h4><p> 一次性所有<script type="math/tex">M</script>根天线共同输出，总功率不变（每根天线的功率变为OA的1/M）,<script type="math/tex">\textbf{w}=(1/\sqrt{M})\textbf{1}_{M\times1}</script>：</p><script type="math/tex; mode=display">\begin{aligned}\xi_{jAA}=g(\frac{\varrho_j}{M}|\sum\limits_{i=1}^Mh_{i,j}|^2)\end{aligned}</script><p>在<script type="math/tex">M</script>根天线中选择<script type="math/tex">K</script>个天线是一种普遍情况，这种普遍情况的性能应该介于OA和AA之间。</p><h4 id="Switching-Antennas-SA"><a href="#Switching-Antennas-SA" class="headerlink" title="Switching Antennas, SA"></a>Switching Antennas, SA</h4><p> 一次一根天线，分<script type="math/tex">M</script>个时间块，每根天线持续1个时间块：</p><script type="math/tex; mode=display">\begin{aligned}\xi_{jSA}=\frac{1}{M}\sum\limits_{i=1}^Mg(\varrho_j|h_{i,j}|^2)\end{aligned}</script><p>其中<script type="math/tex">\textbf{w}</script>在每个时间块与OA相同，但是不同时间块选择不同的天线。等于OA的时变版本。</p><h3 id="CSI-Based"><a href="#CSI-Based" class="headerlink" title="CSI-Based"></a>CSI-Based</h3><h4 id="OA-CSI"><a href="#OA-CSI" class="headerlink" title="OA-CSI"></a>OA-CSI</h4><p>对应于OA，在已知CSI的条件下，从整个集合中选择提供最大<strong>总收获能量</strong>的天线：</p><script type="math/tex; mode=display">\sum\limits_{j=1}^{|\mathcal{S}|}\xi_{jOA-CSI}=\max\limits_{i=1,\cdots,M}\sum\limits_{j=1}^{|\mathcal{S}|}g(\varrho_j|h_{i,j}|^2)</script><p>其<script type="math/tex">w</script>和OA的类似，只有一个为1，其余全0。</p><h4 id="AA-CSI"><a href="#AA-CSI" class="headerlink" title="AA-CSI"></a>AA-CSI</h4><p>对应于AA，在一直CSI的条件下，不是在每个天线上以相同的功率进行发送，而是在发送之前通过<script type="math/tex">\textbf{w}_k</script>对信道和EH硬件效应进行预补偿，使得在接收端处的总收获能量被最大化：</p><script type="math/tex; mode=display">\begin{aligned}\sum\limits_{j=1}^{|\mathcal{S}|}\xi_{jAA-CSI}=\max\limits_{\textbf{w}_k}\sum\limits_{j=1}^{|\mathcal{S}|}g(\varrho_j\sum\limits_{k=1}^{M}|\textbf{h}_j^T\textbf{w}_k|^2)\end{aligned}</script><p><strong>与AA−CSI相比，OA−CSI方案对CSI缺陷的敏感度较低。这是因为OA-CSI仅依赖于通道的功率增益，而AA−CSI需要通道系数的完全表征、包络和相位。</strong></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>在小能量要求的情况下，AA-CSI&gt;OA-CSI&gt;SA&gt;AA&gt;OA</li><li>在大能量要求的情况下，AA很好，甚至超过OA-CSI，同样AA-CSI最好</li><li>天线单元之间的空间相关性，在所有天线以相同功率同时发射时，有好处，否则性能会随着相关性增大而降低</li><li>SA策略由最小能量方差，这是很好的。因为我们不仅要最大的均值，也要最小的方差。方差小意味着可预测性强（能够预估收到多少能量）</li><li>在NLOS情况下，SA效果很好，当LOS增大时，天线以相同功率同时发射（AA）效果更好</li><li>随着设备数量的增加，CSI-free性能接近CSI-based</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSI Free</tag>
      
      <tag>WET</tag>
      
      <tag>WPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSI-FREE 衰落对能量信号有益-发射分集</title>
    <link href="/2022/03/20/CSI-FREE-Transmit-diversity/"/>
    <url>/2022/03/20/CSI-FREE-Transmit-diversity/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>On the Beneficial Roles of Fading and Transmit Diversity in Wireless Power Transfer With Nonlinear Energy Harvesting</strong>.  <em>Bruno Clerckx</em> et.al.  <strong>IEEE Transactions on Wireless Communications, Nov.  2018</strong>  (<a href="https://ieeexplore.ieee.org/document/8470248">pdf</a>)  (Citations <strong>40</strong>)</p><p>只整理了<strong>基础部分</strong>：</p><ul><li>[x] 基础部分</li><li>[ ] <strong>proposed + Energy Waveform</strong></li><li>[ ] <strong>proposed + Energy Modulation</strong></li><li>[ ] 不同结构的能量采集器是否都从proposed方法中受益</li><li>[ ] 物理样机的实现</li></ul><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>CSIT：Channel State Information at the Transmitter</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><p>与直觉相反，fading、multiple antennas、diversity都对能量收集有益。<strong>而且不需要信道信息CSI-FREE</strong>。</p><ul><li>证明了在能量信号捕获中（Energy Harvesting），<strong>衰落（fading）对能量捕获是有益的</strong>（由于EF-DC采集器的非线性特点）</li><li><p>提出一种<strong>发射端分集</strong>的方法，可以有效增强接收端的能量捕获（这个分集的作用是<strong>改变信道特性</strong>，所以对于多用户而言，收益很大，因为大量的用户都可以<strong>直接</strong>从这个信道特性中受益，而不需要额外的优化），还可以直接结合两种考虑非线性的算法，即设计能量波形（Energy Waveform）和设计能量调制（Energy Modulation）</p></li><li><p>在两种能量采集器结构中验证了提出算法的可行性和有效性，证明不是因为潜在的能量采集器特性造成的结果。并且进行样机实现</p></li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>以前能量收集性能提升的研究在于设计一个高效的整流器。之后，近几年出现了三个种类的研究方向：</p><ul><li>设计能量波束赋形（Energy Beamforming），需要知道CSIT。</li><li>设计能量波形（Energy Waveform），有CSIT和无CSIT都可以设计。利用<strong>能量采集器的非线性</strong>。</li><li>设计能量调制（Energy Modulation），也是利用<strong>采集器的非线性</strong>。</li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="Fading正向作用的证明"><a href="#Fading正向作用的证明" class="headerlink" title="Fading正向作用的证明"></a>Fading正向作用的证明</h3><p>未调制的单频信号可以建模为：</p><script type="math/tex; mode=display">x(t)=\sqrt{2P}\cos(w_0t)=\sqrt{2P}\mathscr{R}\{e^{jw_0t}\}</script><p>其中<script type="math/tex">\mathscr{R}\{\cdot\}</script>是取实部，且<script type="math/tex">\mathbb{E}[x(t)^2]=P</script>即信号的功率为<script type="math/tex">P</script>。接收机收到的信号表示为：</p><script type="math/tex; mode=display">y(t)=\sqrt{2P}\mathscr{R}\{\Lambda^{-1/2}he^{jw_0t}\}</script><p>其中<script type="math/tex">\Lambda</script>是路径损耗，<script type="math/tex">h</script>是复衰落稀疏（由于变化很慢，可以省略时间相关性）</p><p>对二极管采集器电路建模，进行泰勒展开，因为其非线性特点体现在<strong>四阶以及更高阶</strong>，所以取<strong>四阶</strong>。（如果取到二阶，那么是线性的）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220320210336493.png" alt="天线等效电路和二极管整流器（包括非线性器件-二极管和低通滤波器）" style="zoom:67%;" /></p><p>则有eq(5):</p><script type="math/tex; mode=display">i_{out}\approx k_0'+k_2'R_{ant}\mathbb{E}[y(t)^2]+k_4'R^2_{ant}\mathbb{E}[y(t)^4]</script><ul><li>假设<script type="math/tex">|h|^2=1</script>，可以得到整流天线模型</li></ul><script type="math/tex; mode=display">z_{dc,cw}=k_2R_{ant}\bar{P}_{rf}+\frac{3}{2}k_4R_{ant}\bar{P_{rf}^2}</script><ul><li>假设<script type="math/tex">h\sim\mathcal{NC}(0, \sigma^2)</script>，且<script type="math/tex">\mathbb{E}[|h^2|]=1</script>，<script type="math/tex">\mathbb{E}[|h^4|]=2</script>，则有：</li></ul><script type="math/tex; mode=display">\begin{aligned}\bar{z}_{dc,cw}&=\mathbb{E}_h[z_{dc,cw}]\\&=k_2R_{ant}\bar{P}_{rf}\mathbb{E}[|h|^2]+\frac{3}{2}k_4R_{ant}^2\bar{P}^2_{rf}\mathbb{E}[|h|^4]\\&=k_2R_{ant}\bar{P}_{rf}+3k_4R^2_{ant}\bar{P}^2_{rf}\end{aligned}</script><p>观察可以看到，二阶项没有变化，四阶项double了。所以fading对能量采集器的输入功率是有帮助的。</p><p><strong>但是这种快衰信道的信道容量不如AWGN，是否意味着对WPT有益，但对WIT有害？</strong></p><h3 id="Transmit-Diversity的正向作用"><a href="#Transmit-Diversity的正向作用" class="headerlink" title="Transmit Diversity的正向作用"></a>Transmit Diversity的正向作用</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220320212227078.png" alt="分集发射的一般结构" style="zoom:67%;" /></p><ul><li>分集：<a href="[https://baike.baidu.com/item/%E5%88%86%E9%9B%86%E6%8A%80%E6%9C%AF/2550274?fr=aladdin](https://baike.baidu.com/item/分集技术/2550274?fr=aladdin">分集是接收端对它收到的衰落特性相互独立地进行特定处理，以降低信号电平起伏的办法。分集是指分散传输和集中接收。所谓分散传输是使接收端能获得多个统计独立的、携带同一信息的衰落信号。集中接收是接收机把收到的多个统计独立的衰落信号进行合并(选择与组合)以降低衰落的影响。</a>)</li></ul><p>在保持总功率为<script type="math/tex">P</script>的前提下，可以得到每个天线的功率为<script type="math/tex">P/M</script>，发射分集的理论是在每个发射天线上添加一个时变的相位<script type="math/tex">\psi_m(t)</script>，所以第<script type="math/tex">m</script>个天线的发射信号变为：</p><script type="math/tex; mode=display">\begin{aligned}x_m(t)&=\sqrt{\frac{2P}{M}}\cos(w_0t+\psi_m(t))\\&=\sqrt{\frac{2P}{M}}\mathscr{R}\{e^{j(w_0t+\psi_m(t))}\}\end{aligned}</script><p>接收机信号变为：</p><script type="math/tex; mode=display">y(t)=\sqrt{\frac{2P}{M}}\mathscr\{\Lambda^{-1/2}h(t)e^{jw_0t}\}</script><p>其中：</p><script type="math/tex; mode=display">h(t)=\sum\limits_{m=1}^Mh_me^{j\psi_m(t)}</script><p>其中，接收天线的路径损耗和衰落为<script type="math/tex">\Lambda ^{-1/2}h_m</script>。</p><p><strong>可以理解为分集在$h$上乘了一个系数，等于创造了一个快衰信道？？</strong></p><h3 id="Multiple-Antennas的正向作用"><a href="#Multiple-Antennas的正向作用" class="headerlink" title="Multiple Antennas的正向作用"></a>Multiple Antennas的正向作用</h3><p>继续上面的公式，假设<script type="math/tex">h_m=1\forall m</script>，且<script type="math/tex">\{\psi_m(t)\}_{\forall m}\sim U(0,2\pi)</script>，则有：</p><script type="math/tex; mode=display">\begin{aligned}\bar{z}_{dc,td-cw}&=k_2R_{ant}\bar{P}_{rf}\frac{\mathbb{E}[|h|^2]}{M}+\frac{3}{2}k_4R_{ant}^2\bar{P}^2_{rf}\frac{\mathbb{E}[|h|^4]}{M^2}\\&=k_2R_{ant}\bar{P}_{rf}+\frac{3}{2}k_4R^2_{ant}\bar{P}^2_{rf}(1+\frac{M-1}{M})\end{aligned}</script><p>等于天线数目<script type="math/tex">M</script>也对能量采集器输入功率有提升，令<script type="math/tex">G_{td}=(1+\frac{M-1}{M})</script>，则有如下曲线：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220320214305022.png" alt="随天线数目增益" style="zoom:67%;" /></p><p>小结一下<strong>基础部分</strong>：</p><ul><li>这种发射多天线分集的方式，其实改变的是信道，所以无论有多少用户，都可以直接从中受益。并且是完全不需要信道信息的，即<strong>CSI-FREE</strong>。</li><li>二阶建模，只能用EB增强，因为没有涉及能量采集器的非线性；而四阶建模可以使用之前提到的三种+文章proposed+文章proposed和三种中的后两种结合。</li><li>文章proposed的方法可以和设计能量波形和设计能量调制完美结合并且能量采集器能够从中收到更大的增益。详细见文章第<strong>Ⅴ</strong>节。</li></ul><h2 id="Future-Work"><a href="#Future-Work" class="headerlink" title="Future Work"></a>Future Work</h2><ul><li>WIT和WPT的分集是否可以结合？</li><li>其他传输的分集方法是否对WPT有益？</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSI Free</tag>
      
      <tag>WET</tag>
      
      <tag>WPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雷达通信频谱共享及一体化：综述与展望</title>
    <link href="/2022/03/19/radarandcommunication/"/>
    <url>/2022/03/19/radarandcommunication/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://radars.ac.cn/article/doi/10.12000/JR20113?viewType=HTML">原文链接</a></p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>RCSS：雷达与通信的频谱共享  Radar and Communication Spectrum Sharing</li><li>RCC：雷达与通信系统的同频共存 Radar-Communication Coexistence</li><li>DFRC：雷达通信一体化系统设计 Dual-Functional Radar-Communication</li><li>V2X：车联网 Vehicle to everything</li><li>GNSS：全球卫星导航系统 Global Navigation Satellite System</li><li>WPS：WiFi室内 定位系统 WiFi-based Positioning System</li></ul><h2 id="RCSS研究路径"><a href="#RCSS研究路径" class="headerlink" title="RCSS研究路径"></a>RCSS研究路径</h2><ol><li>雷达与通信频谱共享（RCC）：考虑分立的雷达与通信系统共同用同一频谱</li><li>雷达通信一体化（DFRC）：除了共享同一频谱外，还共用同一硬件平台，如何设计一体化信号处理方案来同时实现通信与雷达感知功能（<strong>重要</strong>：不仅在于对频谱资源利用率的提升，还扩展到包括车联网、室内定位和隐蔽通信在内的多种新兴的民用与军用场景）</li></ol><h2 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h2><ol><li><p>5G车联网毫米波定位</p><p>​    可以预见，5G通信技术能够利用大规模MIMO天线阵列和毫米波频谱赖满足V2X的高分辨率和低时延要求。</p><ul><li>毫米波段具有充裕的可用带宽，不仅可以实现更高的数据传输效率，也可以显著提升距离分辨率。</li><li>大规模MIMO可以形成“铅笔式”的窄波束。补偿毫米波信号的路径损失，同时提高方位角的估计精度。</li><li>由于毫米波的稀疏性，包含的多径分量少，毫米波信道中雷达目标回波受到的杂波干扰小。</li></ul></li><li><p>WiFi室内定位及动作识别</p><ol><li>根据用户端发射的信号进行TOA或者AOA，利用信号强度和其他信息来获取定位信息。</li><li>WiFi路由能从信道状态信息提取因人体动作所引起的微多普勒频移，从而识别人的行为。</li></ol></li><li><p>无人机感知与通信</p></li><li><p>多功能射频系统</p></li><li><p>雷达辅助的低截获率通信</p></li><li><p>无源雷达</p></li></ol><h2 id="主要研究问题"><a href="#主要研究问题" class="headerlink" title="主要研究问题"></a>主要研究问题</h2><h3 id="RCC"><a href="#RCC" class="headerlink" title="RCC"></a>RCC</h3><ol><li>干扰信道估计：非合作式的干扰信道估计方法</li><li>发射机设计：同时考虑雷达探测与通信的性能指标</li><li>接收抗干扰设计：接收机会同时收到雷达回波和通信信号</li></ol><h2 id="DFRC"><a href="#DFRC" class="headerlink" title="DFRC"></a>DFRC</h2><ol><li>雷达通信一体化信息论</li><li>雷达通信一体化信号处理（<strong>国内外研究重要</strong>）</li><li>雷达通信一体化协议及系统架构设计</li></ol><h2 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h2><h3 id="RCC-1"><a href="#RCC-1" class="headerlink" title="RCC"></a>RCC</h3><ol><li>机会频谱共享：要求次级用户（通信系统）感知频谱，在未占用时进行传输</li><li>干扰信道估计</li><li>具有闭式解的预编码方案</li><li>基于凸优化方法的预编码设计</li><li>接收机设计：接收机在雷达干扰的情况下解调通信信号，或者是在通信干扰的情况下对雷达目标进行估计</li></ol><h3 id="DFRC-1"><a href="#DFRC-1" class="headerlink" title="DFRC"></a>DFRC</h3><ol><li>雷达通信一体化系统的信息论研究</li><li>雷达通信一体化系统的时频域信号处理：设计一种新型复用波形，使之既能携带通信信号，又能用于雷达目标探测</li><li>雷达通信一体化系统的空频域信号处理</li><li>5G时代的雷达通信一体化</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Radar and Communication</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Radar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大规模无线能量传输综述（能量信道CSI-Free）</title>
    <link href="/2022/03/19/MassiveWirelessEnergyTransfer/"/>
    <url>/2022/03/19/MassiveWirelessEnergyTransfer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Massive Wireless Energy Transfer: Enabling Sustainable IoT Toward 6G Era</strong>.  <em>Onel L. A. López</em> et.al.  <strong>IEEE Internet of Things Journal, June1, 1 2021</strong>  (<a href="https://ieeexplore.ieee.org/document/9319211">pdf</a>)  (Citations <strong>18</strong>)</p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>DASs: Distributed Antenna Systems</li></ul><h2 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220319160826065.png" alt="WIT和WET结构" style="zoom:67%;" /></p><p><strong>WET系统结构：</strong>WIT和WET/WPT自然而然的会在一起考虑。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220319160926828.png" alt="BS和PB实现WIT和WET" style="zoom:67%;" /></p><p>并且由于WET的路径损耗大，对功率要求高，所以得需要BS+PB才能达到到WIT Zone范围左右的WET Zone</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220319161142285.png" alt="WET和WIT的两种实现结构" style="zoom:67%;" /></p><p>设计WIT和WET发射机的两种形式，In-band 和Out-of-band。一般选择In-Band。其实就是<strong>时分复用</strong>和<strong>频分复用</strong>。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220319161254502.png" alt="(a)多天线单PB (b)多PBs单天线 (c)多天线多PBs" style="zoom:67%;" /></p><p>在只考虑WET的情况下，上图(a)表示一个PB带有M个天线；(b)表示分布式天线，即一个PB只有一根天线，共M个PBs；下方表示的DAS和EB结合的模式，即4个/8个PBs，每个M/4||||M/8根天线。</p><p><strong>实验结果如图：</strong></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220319161530798.png" alt="不同结构性能对比" style="zoom: 67%;" /></p><ul><li><p><em>Single PB (EB):</em> A PB located at the circle center equipped with <em>M</em> antennas.</p></li><li><p><em>Single-Antenna PBs (DAS): M</em> single-antenna PBs random and uniformly distributed in the area.</p></li><li><p><em>Single-Antenna PBs (Optimized DAS –oDAS):</em> Similar to the single-antenna PBs deployment but the PBs’ locations are set using the well-known <em>K-means</em> clustering algorithm [60].</p></li><li><p><em>Four PBs (EB</em>+<em>oDAS):</em> Four PBs, each equipped with M/4 antennas, are deployed and their locations are set using the <em>K-means</em> clustering algorithm.</p></li><li><p><em>Eight PBs (EB</em>+<em>oDAS):</em> Eight PBs, each equipped with M/8 antennas, are deployed and their locations are set using the <em>K-means</em> clustering algorithm.</p></li></ul><p>结论：</p><ol><li>没有位置优化（k-means 聚类）的DAS最差，甚至不如单个在圆心的结构</li><li>位置优化能够给DAS带来巨大的性能提升</li><li>DAS+EB的效果更好</li></ol><h2 id="CSI-related"><a href="#CSI-related" class="headerlink" title="CSI related"></a>CSI related</h2><p>分四个部分：</p><h3 id="Partial-CSI-Based-EB-Statistical-CSI"><a href="#Partial-CSI-Based-EB-Statistical-CSI" class="headerlink" title="Partial CSI-Based EB/Statistical CSI"></a>Partial CSI-Based EB/Statistical CSI</h3><p>统计CSI，不是瞬时的</p><ul><li>在大时间内变化， 而不需要频繁更新。</li><li>有限CSI采集开销和能量消耗得到。</li><li>更不容易出错（统计的）</li></ul><p><strong>QUESTION：</strong></p><ul><li><em>什么叫做信道的一阶统计信息、二阶统计信息（例如协方差矩阵）？？</em></li></ul><h3 id="CSI-Free"><a href="#CSI-Free" class="headerlink" title="CSI-Free"></a>CSI-Free</h3><p>不需要CSI，具体有三种算法</p><ul><li><p><a href="https://lcjoffrey.top/2022/03/20/CSI-FREE-Transmit-diversity/">APS-EMW</a></p></li><li><p><a href="https://lcjoffrey.top/2022/03/27/OnCSIFree/">AA-IS/SA</a></p></li><li><p><a href="https://lcjoffrey.top/2022/03/27/OnCSIFree/">AA-SS 两种</a></p></li></ul><p>由图可知，APS-EMW和AA-IS/SA策略的物联网节点接收能量都比较发散（均匀）。而AA-SS的两种优化形式都比较具有方向性。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220328152458628.png" alt="image-20220328152458628" style="zoom: 50%;" /></p><p>从下图可以看到，APS-EMW的低能量区域比较大，说明它只适用于一些低能量要求的场景。SA是这几种方案中，唯一一种只需要单射频发射链路的，其结构最简单。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220328152530913.png" alt="image-20220328152530913" style="zoom:50%;" /></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220328145642755.png" alt="image-20220328145642755"></p><h3 id="Positioning-Based"><a href="#Positioning-Based" class="headerlink" title="Positioning-Based"></a>Positioning-Based</h3><p>在CSI-Free的基础上，通过位置信息，旋转PB的天线以获得更好的性能</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220328152756402.png" alt="image-20220328152756402" style="zoom:50%;" /></p><p>节点空域角度聚类，再进行天线旋转传输能量。AA-SS两种方案都从旋转角度中受益。</p><h3 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h3><p>混合模式，结合Perfect CSI、Limit CSI、CSI-free、Positioning-Based EB等。例如在IoT设备电量较低时先通过CSI-Free传输能量，电量得到补充后，可以传输导频，再使用perfect CSI等。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Channel State Information</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WET</tag>
      
      <tag>WPT</tag>
      
      <tag>SWIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IRS辅助SWIPT（二）</title>
    <link href="/2022/03/13/IRSaidedSWIPT2/"/>
    <url>/2022/03/13/IRSaidedSWIPT2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文<a href="https://ieeexplore.ieee.org/document/9110849">Intelligent Reflecting Surface Aided MIMO Broadcasting for Simultaneous Wireless Information and Power Transfer</a></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img/image-20220313155156040.png" alt="IRS辅助SWIPT"></p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>WSR: Weighted sum rate</li><li>TPC: Transmit precoding matrices</li><li>WMMSE: weighted minimum mean-square error</li></ul><h2 id="主要挑战"><a href="#主要挑战" class="headerlink" title="主要挑战"></a>主要挑战</h2><p>通过IRS辅助SWIPT。联合优化BS、的发射预编码（波束赋形）矩阵TPC和IRS被动波束赋形的TPC，来描述WSR最大化问题，并满足EHS的能量需求。挑战在于引入能量捕获阈值后，是一个非凸约束。</p><h2 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h2><ol><li>通过WMMSE转化问题，方便应用BCD</li><li>通过BCD算法将原优化问题分解为多个子问题</li><li>基于每个子问题提出一种低复杂度的迭代算法，交替优化TPC矩阵和相移矩阵，并证明BCD算法收敛于原问题的KKT点</li><li>设计可行性检查方法来探究其可行性</li></ol><h2 id="Future-work"><a href="#Future-work" class="headerlink" title="Future work"></a>Future work</h2><ul><li>本文考虑的是perfect CSI，imperfect CSI是一个极大地挑战</li><li>为了优化方便选取的是continued phase shift，实际中应该是discrete phase shift</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Intelligent Reflecting Surface</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IRS</tag>
      
      <tag>SWIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IRS辅助SWIPT（一）</title>
    <link href="/2022/03/11/IRSaidedSWIPT1/"/>
    <url>/2022/03/11/IRSaidedSWIPT1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文<a href="https://ieeexplore.ieee.org/document/8941080">Weighted Sum Power Maximization for Intelligent Reflflecting Surface Aided SWIPT</a></p><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>IDRs: Information Decoding Receivers</li><li>EHRs: Energy Harvesting Receivers</li><li>CSCG: Circularly Symmetric Complex Gaussian denoted by <script type="math/tex">\mathcal{C}\mathcal{N}(x, \sigma^2)</script>(with mean <script type="math/tex">x</script> and variance <script type="math/tex">\sigma^2</script> )</li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="主要思路："><a href="#主要思路：" class="headerlink" title="主要思路："></a>主要思路：</h3><p>提出使用<strong>IRS协助多天线AP服务于多IDRs和多EHRs</strong>。因为能量一般路径损耗较大，难以满足需求（需要更大能量才能被接收，而信息信号只需要少量功率就可以成功解调）。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220311150044247.png" alt="IRS辅助SWIPT" style="zoom:50%;" /></p><h3 id="文章主要贡献："><a href="#文章主要贡献：" class="headerlink" title="文章主要贡献："></a>文章主要贡献：</h3><ul><li><strong>提出一种联合优化发射机的预编码向量（波束赋形）、IRS的相移（反射幅度为1），在IDRs的单个信干噪比的约束下，最大化EHRs接收的加权和功率。</strong></li><li><strong>仅在AP处发送信息信号就可以同时服务于IDRs和EHRs，不需要专用的能量信号。（能量信号对于IDRs而言是干扰）</strong></li></ul><p>理论上而言，如果用户之间（IDRs和EHRs）之间的信道是统计独立的，那么不需要再使用专用的能量信号<sup><a href="#fn_1" id="reffn_1">1</a></sup>。文章中Ⅳ小节中详细证明：即使用户的信道在统计上不是独立的，仅发送信息信号就足以在EHRs处实现最大加权和功率。（专用能量信号不仅消耗发射机功率，还会对IDRs产生干扰）</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>实验模型：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220311145105721.png" alt="模型" style="zoom:50%;" /></p><p>其中$r_1=2$。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220311144927006.png" alt="提出的算法性能" style="zoom: 50%;" /></p><p>可以看到使用IRS能够极大提升EHRs接收性能；LoS信道比瑞利衰落信道下EHRs效率更高（接收更多RF能量）。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220311145433868.png" alt="EHRs接收能量和IDRs信噪比需求关系" style="zoom: 67%;" /></p><p>红色虚线代表文献<sup><a href="#fn_1" id="reffn_1">1</a></sup>中提出的单独设计专用能量信号的方案。即：</p><ol><li>先最小化满足SINR条件的IDRs总功率</li><li>剩下的能量通过波束赋形全部用于EHRs</li></ol><p>可以看到联合设计&gt;单独设计&gt;无IRS。也证明了文章中的建议：不应使用专用能量信号。</p><p>作者说文献<sup><a href="#fn_2" id="reffn_2">2</a></sup>研究内容与本文相似。</p><p>[1]: Xu, Jie, Liang Liu, and Rui Zhang. “Multiuser MISO beamforming for simultaneous wireless information and power transfer.” <em>IEEE Transactions on Signal Processing</em> 62.18 (2014): 4798-4810.</p><p>[2]: Pan, Cunhua, et al. “Intelligent reflecting surface aided MIMO broadcasting for simultaneous wireless information and power transfer.” <em>IEEE Journal on Selected Areas in Communications</em> 38.8 (2020): 1719-1734.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Intelligent Reflecting Surface</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IRS</tag>
      
      <tag>SWIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IRS综述阅读（一）</title>
    <link href="/2022/03/07/introductionofIRS/"/>
    <url>/2022/03/07/introductionofIRS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文<a href="https://ieeexplore.ieee.org/document/9326394">Intelligent Reflecting Surface-Aided Wireless Communications: A Tutorial</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><em>Intelligent Reflecting Surface-Aided Wireless Communications: A Tutorial</em>文章的整理。</p><ul><li>[x] IRS基础部分及建模</li><li>[ ] IRS优化</li><li>[ ] IRS信道估计</li><li>[ ] IRS部署</li><li>[ ] 拓展</li></ul><h2 id="IRS介绍"><a href="#IRS介绍" class="headerlink" title="IRS介绍"></a>IRS介绍</h2><p><strong>IRS</strong>: Intelligent reflecting surface</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>6G存在的需求，例如超高数据速率和能源效率，极高的可靠性和低延迟等</li><li>解决来自用户的时变无线信道</li></ul><h3 id="什么是IRS"><a href="#什么是IRS" class="headerlink" title="什么是IRS"></a>什么是IRS</h3><p>Generally speaking, IRS is a planar surface comprising a large number of <strong>passive reflecting elements</strong>, each of which is able to induce a controllable amplitude and/or phase change to the incident signal independently</p><ul><li>IRS elements 是<strong>无源的</strong>（虽然后面会讲到还是需要一定的能源（用来调整幅度反射和相位反射），但是相比其他设备，这些能源是微乎其微的，还是可以认为是无源的）</li></ul><h3 id="IRS作用及优势"><a href="#IRS作用及优势" class="headerlink" title="IRS作用及优势"></a>IRS作用及优势</h3><p><strong>从概念上：</strong></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220307143040521.png" alt="IRS在无线信道重配置中额主要功能" style="zoom: 33%;" /></p><ul><li>(a): 创建虚拟视距(LoS)链接以通过智能反射面绕过收发器之间的障碍物</li><li>(b): 在期望的方向添加额外的信号路径以提升信道等级条件</li><li>(c): 改善信道分布，例如将瑞利/快衰落转换为Rician/慢衰落以实现超高可靠性</li><li>(d): 抑制一些干扰</li></ul><p><strong>在实施上</strong></p><ul><li>因为是无缘的（仅被动反射信号），所以不需要任何发射射频反射链，硬件要求低（与传统有源中继相比）。</li><li>全双工工作模式，没有任何天线噪声放大和自干扰。</li><li>安装拆除简单</li><li>极大的灵活性和与现有无线系统的兼容性</li></ul><h2 id="IRS挑战"><a href="#IRS挑战" class="headerlink" title="IRS挑战"></a>IRS挑战</h2><ul><li>无源反射原件需要适当设计，实现IRS element之间的协同信号聚焦或干扰消除。考虑与基站、用户的传输联合设计。</li><li>由于IRS没有发射射频链，所以要考虑如何获得IRS与其用户之间的信道状态信息。</li><li>IRS在无线网络中最大化网络容量的最佳部署策略需要重新设计。</li></ul><h2 id="IRS建模"><a href="#IRS建模" class="headerlink" title="IRS建模"></a>IRS建模</h2><p>以<script type="math/tex">x(t)</script>表示等效复值基带发射信号，对于一个有<script type="math/tex">N</script>个反射单元的IRS，以<script type="math/tex">n</script>代表单元，即<script type="math/tex">n\in\{1, \cdots, N\}</script>，用<script type="math/tex">\alpha_{1, n}e^{-j\xi_{1, n}}</script>表示基带信号从发射机到IRS的反射单元$n$的复信道系数，其中<script type="math/tex">\alpha_{1, n}</script>表示幅度衰减（amplitude attenuation），<script type="math/tex">e^{-j\xi_{1,n}}</script>表示窄带系统平坦信道的相移。所以其带通信号（经过上变频）可以表示为：</p><script type="math/tex; mode=display">\begin{aligned}y_{in,n}(t)=Re\{\alpha_{1, n}e^{-j\xi_{1, n}}x(t)e^{j2\pi f_ct}\}\end{aligned}</script><p>其中，<script type="math/tex">f_c</script>是载波频率；该单元（第<script type="math/tex">n</script>个单元）的幅度衰减和时间延迟分别用<script type="math/tex">\beta_n\in[0, 1]</script>（因为是无源的）和<script type="math/tex">t_n\in[0, 1/f_c]</script>表示。忽略电路非线性和相位噪声等硬件缺陷，IRS单元<script type="math/tex">n</script>的反射信号表示为：</p><script type="math/tex; mode=display">\begin{aligned}y_{out,n}(t)&=\beta_ny_{in,n}(t-t_n)\\&=Re\{\beta_n\alpha_{1,n}e^{-j\xi_{1,n}}x(t-t_n)e^{j2\pi f_c(t-t_n)}\}\\&\approx Re\{[\beta_ne^{-j\theta^{'}_n}\alpha_{1,n}e^{-j\xi_{1,n}}x(t)]e^{j2\pi f_ct}\}\end{aligned}</script><p>其中，在<script type="math/tex">t_n\leq1/f_c\ll1/B</script>的前提下，假设<script type="math/tex">x(t-t_n)\approx x(t)</script>；并有<script type="math/tex">-\theta_n^{'}\triangleq-2\pi f_ct_n\in[-2\pi,0]</script>是单元<script type="math/tex">n</script>引起的相移。由<script type="math/tex">s_{in,n}(t)\triangleq \alpha_{1, n}e^{-j\xi_{1, n}}x(t)</script>并且有<script type="math/tex">s_{out,n}\triangleq\beta_ne^{-j\theta^{'}_n}\alpha_{1,n}e^{-j\xi_{1,n}}x(t)</script></p><p>进一步，由于<script type="math/tex">\theta^{'}_n</script>是以<script type="math/tex">2\pi</script>为周期的，所以为方便后续部分，取<script type="math/tex">\theta_n\in [0,2\pi]</script>，有：</p><script type="math/tex; mode=display">\begin{aligned}s_{out,n}(t)=\beta_ne^{-j\theta^{'}_n}s_{in,n}(t)=\beta_ne^{j\theta_n}s_{in,n}(t)\end{aligned}</script><p><strong>所以在基带信号模型中，IRS单元<script type="math/tex">n</script>的输出/反射信号是通过将相应的输入/入射信号乘以复反射系数<script type="math/tex">\beta_ne^{-j\theta_n}</script>得到的</strong>。</p><p>再接上从IRS单元<script type="math/tex">n</script>到接收端的信号（与前面相似的等效窄带平坦频率信道），则有接收端的表达式：</p><script type="math/tex; mode=display">\begin{aligned}y_{r,n}(t)=Re\{[\alpha_{1,n}e^{-j\xi_{1,n}}\beta_ne^{j\theta_n}\alpha_{2,n}e^{-j\xi_{2,n}}x(t)]e^{j2\pi f_ct}\}\end{aligned}</script><p>用<script type="math/tex">h^*_{r,n}\triangleq\alpha_{1,n}e^{-j\xi_{1,n}}</script>（发射端到IRS的信道），并用<script type="math/tex">g_n\triangleq\alpha_{2,n}e^{-j\xi_{2,n}}</script>（IRS到接收端的信道），上式变为：</p><script type="math/tex; mode=display">\begin{aligned}y_n(t)=\beta_ne^{j\theta_n}h^*_{r,n}g_nx(t)\end{aligned}</script><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/3328208a299ddde470516df2ab995f6.jpg" alt="IRS模型示意图" style="zoom:33%;" /></p><p>假设没有信号耦合，即所有IRS单元独立地反射入射信号。并忽略多次反射（因为路径损失较大），则有考虑<script type="math/tex">N</script>个单元时，有接收端：</p><script type="math/tex; mode=display">\begin{aligned}y(t)=(\sum_{n=1}^N\beta_ne^{j\theta_n}h^*_{r,n}g_n)x(t)=\textbf{h}_r^H\Theta\textbf{g}x(t)\end{aligned}</script><p>其中<script type="math/tex">\textbf{h}_r^H=[h^*_{r, 1},\cdots,h^*_{r,N}]$，$\textbf{g}=[g_1,\cdots,g_N]^T</script>，<script type="math/tex">\Theta=diag(\beta_1e^{j\theta_1},\cdots,\beta_Ne^{j\theta_N})</script>因为每个IRS单元独立地反射信号，且没有信号耦合，所以$\Theta$是对角阵。</p><h2 id="IRS硬件实现"><a href="#IRS硬件实现" class="headerlink" title="IRS硬件实现"></a>IRS硬件实现</h2><h3 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a>硬件结构</h3><p>由于发射机、接收机以及周围物体的移动性，信道通常是时变的，因此需要基于信道变化的IRS实时可调。所以需要联网以进行自适应反射。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220307220020933.png" alt="IRS结构" style="zoom:33%;" /></p><ul><li><p>智能控制器，FPGA，总的控制端</p></li><li><p>第一层，调整层，控制层，也可以布置一些传感器（感知周围感兴趣的无线电信号，以方便智能控制器设计反射系数）</p></li><li>第二层，铜，减少信号能量损失</li><li>第三层，可调整的单元</li></ul><p>为了实现重新配置IRS单元以实现高度可控反射，有三种主要方法被提出：</p><ul><li>机械驱动（机械旋转、平移）</li><li>功能材料（液晶、石墨烯等）</li><li>电子设备（PIN二极管等）</li></ul><p>第三种电子设备（PIN二极管等）是最常用的。</p><h3 id="实际限制"><a href="#实际限制" class="headerlink" title="实际限制"></a>实际限制</h3><h4 id="离散的反射幅度和相移"><a href="#离散的反射幅度和相移" class="headerlink" title="离散的反射幅度和相移"></a>离散的反射幅度和相移</h4><p>用固定的PIN二极管，需要大数量才能控制精细相移，例如<script type="math/tex">\log_28=3</script>，即8级相移需要3个PIN二极管；使用变容二极管则需要更大范围的偏置电压，成本更高。</p><p>顺便提出了两个特殊结构：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220307221743796.png" alt="两种特殊结构" style="zoom: 67%;" /></p><h4 id="耦合的反射幅度和相移"><a href="#耦合的反射幅度和相移" class="headerlink" title="耦合的反射幅度和相移"></a>耦合的反射幅度和相移</h4><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220307221921769.png" alt="实际IRS中反射幅度和相移之间的关系" style="zoom:50%;" /></p><p>有人提出反射的幅度和相移之间存在非线性耦合，所以不能单独调节。</p><p>产生这种现象的原因是因为：<strong>0相移时</strong>，反射电流与单元电流同相（in-phase），电流强度增加，导致<strong>发热增多</strong>，<strong>反射幅度下降</strong>；当<strong>电流反相</strong>时（out-of-phase），电流强度<strong>减弱</strong>，<strong>发热变少</strong>，<strong>反射幅度增加</strong>。</p><p>此外，IRS理论上是无源的（passive），但是例如控制PIN二极管时，需要消耗一部分能量。只是说这部分能量相对较小。</p><h3 id="其他相关内容及未来研究方向"><a href="#其他相关内容及未来研究方向" class="headerlink" title="其他相关内容及未来研究方向"></a>其他相关内容及未来研究方向</h3><ul><li><strong>IRS单元之间的耦合</strong>目前是被忽略的。考虑在增大IRS单元密度以提高性能时，可能会使耦合更严重，以至于不能忽略。<strong>考虑耦合反射系数</strong>或者<strong>开发有效的去耦、隔离技术</strong>。</li><li>目前考虑的模型对信号的<strong>入射角不敏感</strong>。目前的部分实现证明IRS反射系数，特别是相移，对<strong>入射角非常敏感</strong>。同时这也意味着<strong>信道互易假设可能不再有效</strong>，即上行链路的信道估计不再适用于下行链路的信道估计，vice versa。</li><li>对于<strong>宽带信号</strong>的建模以及<strong>频率/时间偏移</strong>、<strong>相位噪声</strong>等。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Intelligent Reflecting Surface</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IRS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-OFDM</title>
    <link href="/2022/03/01/introductionofOFDM/"/>
    <url>/2022/03/01/introductionofOFDM/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OFDM"><a href="#OFDM" class="headerlink" title="OFDM"></a>OFDM</h1><ul><li>宽带系统： 发送信号通过<strong>多条有显著时间的路径</strong>到达接收端， 产生干扰（也就是著名的<strong>多径干扰</strong>）。</li><li>窄带系统： 发送信号通过一条或多条没有时间差的路径到达接收端， 没有干扰（相当于简单的叠加）。</li></ul><p>可以简单认为，系统带宽为<script type="math/tex">B=1/T_B</script>，即系统带宽约等于码元周期的倒数；而发射的信号，由于多经，最大的延时时间为<script type="math/tex">\tau_{max}</script>，当<script type="math/tex">\tau_{max}<T_B</script>时，即在第二个码元发射时，第一个码元已经完全接收，所以不会产生多径干扰和码间干扰，<span class="label label-primary">认为是窄带系统</span></p><p><strong>为了提高传输速率，<script type="math/tex">1/T_B</script>会增大</strong>，即会出现<script type="math/tex">\tau_{max}>T_B</script>。当前数据还没接收完毕，那么当前数据的最后一条径和下一个数据的第一条径就会重叠，产生多径干扰和码间干扰。数据的一部分会加强，一部分会减弱，在频域内表现为频率选择性衰落，<span class="label label-primary">认为是宽带系统</span></p><div class="note note-success">            <p><strong>对于相同的场景， 相同的时延， 传输带宽不同， 决定了系统到底有没有多径干扰</strong>。</p>          </div><p>为了将宽带系统<script type="math/tex">\to</script>窄带系统，速率不公<script type="math/tex">\to</script>频分复用，所以推出OFDM调制</p><h2 id="OFDM介绍-lt-span-class-”hint—top-hint—rounded”-aria-label-”https-zhuyulab-blog-csdn-net-article-details-109907244"><a href="#OFDM介绍-lt-span-class-”hint—top-hint—rounded”-aria-label-”https-zhuyulab-blog-csdn-net-article-details-109907244" class="headerlink" title="OFDM介绍&lt;span class=”hint—top hint—rounded” aria-label=”https://zhuyulab.blog.csdn.net/article/details/109907244"></a>OFDM介绍<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote">&lt;span class=”hint—top hint—rounded” aria-label=”<a href="https://zhuyulab.blog.csdn.net/article/details/109907244">https://zhuyulab.blog.csdn.net/article/details/109907244</a></h2><p>“&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;</p><p>是一种多载波的传输方法，将频带划分为多个子带（子信道）进行并行传输，将高速数据流分为多个并行的低速数据流，然后调制到每个信道的子载波上进行传输。</p><ul><li>各个子载波之间相互正交，以便接收端能够完全地分离各路信号。</li><li>为了提高频谱利用率和增大传输速率，各路子载波的<strong>已调信号</strong>频谱有部分重叠。</li><li>每路子载波的调制是多进制调制，而且每路子载波的调制制度可以不同。<strong>可以根据各个子载波处信道特性的优劣不同采用不同的体制。</strong></li></ul><div class="note note-success">            <p>主要优势：OFDM能很好地对抗频率选择性衰落和窄带干扰。在多载波系统中，每一时刻只会有少部分的子信道收到深衰落的影响。</p>          </div><h2 id="数学模型"><a href="#数学模型" class="headerlink" title="　数学模型"></a>　数学模型</h2><h3 id="OFDM子带信号形式"><a href="#OFDM子带信号形式" class="headerlink" title="OFDM子带信号形式"></a>OFDM子带信号形式</h3><p>假设在一个OFDM系统中有$N$个子信道，每个子信道采用信号为：</p><script type="math/tex; mode=display">x_k(t)=B_kcos(2\pi f_kt+\varphi_k)\quad\quad k=0,1,\cdots,N-1</script><p>式中：$B_k$为第$k$路子载波的振幅，它受基带码元的调制；$f_k$为第$k$路子载波的频率；$\varphi_k$为第$k$路子载波的初始相位，则在此系统中$N$路子信号之和可以表示为：</p><script type="math/tex; mode=display">\begin{align}e(t)=\sum\limits_{k=1}^{N-1}x_k(t)=\sum\limits_{k=1}^{N-1}B_kcos(2\pi f_kt+\varphi_k)\end{align}=\sum\limits_{k=1}^{N-1}\textbf{B}_ke^{j(2\pi f_kt+\varphi_k)}</script><p>其中，$\textbf{B}_k$是一个复数，为第$k$路子信道中的复输入数据。</p><h3 id="正交化"><a href="#正交化" class="headerlink" title="正交化"></a>正交化</h3><p>为了使这$N$路子信道信号在接收时能够完全分离，要求他们满足正交条件。在<strong>码元持续时间</strong>$T_B$内任意两个子载波都正交：</p><script type="math/tex; mode=display">\int^{T_B}_0\cos(2\pi f_kt+\varphi_k)\cos(2\pi f_it+\varphi_i)=0</script><p>具体推导见书本<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="P243-P244 樊昌信, and 曹丽娜. 通信原理.第7版. 国防工业出版社, 2012.">[1]</span></a></sup>。</p><p>结果是要求子载频满足</p><script type="math/tex; mode=display">f_k=k/2T_B</script><p>且要求子载频间隔：</p><script type="math/tex; mode=display">\Delta f=f_k-f_i=n/T_B</script><p>即最小子载频间隔为：</p><script type="math/tex; mode=display">\Delta f_{min}=1/T_B</script><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220301162046926.png" alt="多路子载波频谱的模" style="zoom: 33%;" /></p><p>看起来各路子载波的频谱重叠，但是实际上在<strong>一个码元持续时间内它们是正交的</strong>。所以可以用此正交特性将各路子载波分离开。</p><p>采用不同的调制方式，<strong>仅幅度和相位有变化</strong>，不破坏其正交性。</p><p>其总带宽为：</p><script type="math/tex; mode=display">B_{OFDM}=\frac{N+1}{T_B}(Hz)</script><p>为什么是$(N+1)$而不是$N$？？</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220301163409959.png" alt="MQAM的OFDM实现" style="zoom:33%;" /></p><p>以MQAM为例。<strong>由于OFDM信号表示式的形式如同逆离散傅里叶变换式(IDFT)</strong>，所以可以用计算IDFT和DFT的方式进行OFDM的调制和解调<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="P245-P245 樊昌信, and 曹丽娜. 通信原理.第7版. 国防工业出版社, 2012.">[2]</span></a></sup>。还可以参考blog<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label=" https://zhuyulab.blog.csdn.net/article/details/111075990">[6]</span></a></sup></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220301163850059.png" alt="OFDM数字化处理框图-发射端" style="zoom:33%;" /></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220301163929060.png" alt="OFDM数字化处理框图-接收端" style="zoom:33%;" /></p><p>详细推导及实现结构可以参考资料<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/30538458">[4]</span></a></sup>，简而言之就是<script type="math/tex">N</script>路用<script type="math/tex">N</script>个正交子载波进行调制，最后在时域相加，则有：</p><script type="math/tex; mode=display">s(t)=\sum\limits_{n=0}^{N-1}s_ie^{j2\pi f_it}</script><p>这不和离散傅立叶变换差不多嘛。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>由于多径效应，可能会产生干扰（信号经过不同的信道，所带来的延时不同）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220301164040842.png" alt="多径干扰的示意图" style="zoom:33%;" /></p><p>引入<strong>保护间隔</strong>：</p><ul><li>补零</li><li>插入循环前缀（cp）或循环后缀（cs）</li></ul><p>一般采用循环前缀，即将OFDM的后部的采样复制到前面，长度为$T<em>{cp}$，故每个符号的长度为$T</em>{sym}=T<em>{B}+T</em>{cp}$且$T_{cp}$大于等于多径时延。</p><h2 id="符号之间的关系-lt-span-class-”hint—top-hint—rounded”-aria-label-”https-zhuanlan-zhihu-com-p-57967971"><a href="#符号之间的关系-lt-span-class-”hint—top-hint—rounded”-aria-label-”https-zhuanlan-zhihu-com-p-57967971" class="headerlink" title="符号之间的关系&lt;span class=”hint—top hint—rounded” aria-label=”https://zhuanlan.zhihu.com/p/57967971"></a>符号之间的关系<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote">&lt;span class=”hint—top hint—rounded” aria-label=”<a href="https://zhuanlan.zhihu.com/p/57967971">https://zhuanlan.zhihu.com/p/57967971</a></h2><p>“&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">$T_B$</td><td style="text-align:center">有效数据部分时间</td></tr><tr><td style="text-align:center">$T_{cp}$</td><td style="text-align:center">循环前缀长度</td></tr><tr><td style="text-align:center">$T_{sym}$</td><td style="text-align:center">OFDM符号长度，$T<em>s=T_B+T</em>{cp}$</td></tr><tr><td style="text-align:center">$N$</td><td style="text-align:center">子载波数</td></tr><tr><td style="text-align:center">$\Delta f$</td><td style="text-align:center">子载波间隔，$\Delta f=\frac{1}{T_B}$</td></tr><tr><td style="text-align:center">$B$</td><td style="text-align:center">带宽，$B=(N+1)\Delta f$</td></tr><tr><td style="text-align:center">$T_{sample}$</td><td style="text-align:center">采样时间间隔，$T_{sample}=\frac{1}{B}=\frac{T_B}{N+1}$</td></tr><tr><td style="text-align:center">$F_s$</td><td style="text-align:center">采样频率，$F<em>s=\frac{1}{T</em>{sample}}=\frac{N+1}{T_B}$</td></tr></tbody></table></div><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>P243-P244 樊昌信, and 曹丽娜. 通信原理.第7版. 国防工业出版社, 2012.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>P245-P245 樊昌信, and 曹丽娜. 通信原理.第7版. 国防工业出版社, 2012.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/57967971">https://zhuanlan.zhihu.com/p/57967971</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/30538458">https://zhuanlan.zhihu.com/p/30538458</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://zhuyulab.blog.csdn.net/article/details/109907244">https://zhuyulab.blog.csdn.net/article/details/109907244</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://zhuyulab.blog.csdn.net/article/details/111075990">https://zhuyulab.blog.csdn.net/article/details/111075990</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OFDM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-空间调制</title>
    <link href="/2022/03/01/spatialmodulation/"/>
    <url>/2022/03/01/spatialmodulation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="空间调制"><a href="#空间调制" class="headerlink" title="空间调制"></a>空间调制</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>空间调制（Spatial Modulation,SM）将一部分的比特信息隐含在发射天线的索引当中，在一定程度上拟补了频谱效率的损失。<strong>是一种单射频链的系统</strong>。</p><p>每次仅仅激活比特信息所映射的特定天线传输数据，从而避免了多天线间的干扰。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220301101910095.png" alt="SM结构示意图"></p><p>输入的原始比特信息被分为两部分：</p><ul><li>一部分映射为天线序号，用来选择被激活传输数据的物理天线，称为<strong>空间比特</strong></li><li>一部分映射为APM符号，采用QAM/PSK调制，称为<strong>符号比特</strong></li></ul><p>每个时隙，仅有一根特定天线被激活用于传输特定的符号，其余天线则处于闲置状态，或者说发射的信号为0。</p><h2 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h2><p>假设如上图所示的一个$N_r\times N_t,N_t=2^{b_1}$的SM系统，其中$N_r$和$N_t$分别为接收和发射的天线数量，$b_1$为空间比特数。采用$M$阶数字调制，$M=2^{b_2}$，$b_2$为符号比特数目。所以单个时隙里传输的比特数为$B$:</p><script type="math/tex; mode=display">B=b_1+b_2=\log_2(N_t)+\log_2(N_r)</script><p>将原始比特信息分为数量为$\log_2(N_t)$和$\log_2(M)$两部分，分别映射激活天线序号和APM符号。假设此时隙里被激活的天线序号为$i$，APM符号为$x_k$，其中$i\in\mathcal{A}={1,2,\cdots,N_t}$，$k\in\mathcal{B}={1,2,\cdots,M}$，此时发射信号可以表示为：</p><script type="math/tex; mode=display">\textbf{x}=\left[\begin{matrix}0&\cdots&\mathop{x_k}\limits_{i-th}&\cdots0\end{matrix}\right]^T</script><p>发射信号$\textbf{x}$是一个稀疏向量，其中只存在一个非0元数$x_{k}$，由符号比特映射，而该元素的位置为$i$，对应着第$i$根发射天线，由空间比特所决定。其余0元素表示剩余未激活的天线不发送任何信号。</p><p>定义MIMO瑞利衰落的信道矩阵$\textbf{H}\in\mathbb{C}^{N_r\times N_t}$如下：</p><script type="math/tex; mode=display">\begin{align}    \textbf{H}=&\left[\begin{array}{cccc}\textbf{h}_1&\textbf{h}_2&\cdots&\textbf{h}_{N_t}\end{array}\right]    \\=&    \left[    \begin{array}{cccc}    h_{11}&h_{12}&\cdots&h_{1N_t}\\    h_{21}&h_{22}&\cdots&h_{2N_t}\\    \vdots&\vdots&\ddots&\vdots\\    h_{N_r1}&h_{N_r2}&\cdots&h_{N_rN_t}    \end{array}    \right]\end{align}</script><p>其中$\textbf{h}_l,l\in\mathcal{A}$，表示第$k$根发射天线与接收天线之间所对应的信道向量，其中包含$N_r$个元素，每个元素为信道的衰落系数，且都服从均值为0，方差为1的复高斯分布$\mathcal{C}\mathcal{N}(0,1)$。在经过无线信道后，接收信号矢量可以表示如下：</p><script type="math/tex; mode=display">\begin{align}\textbf{y}=\sqrt{\rho}\textbf{H}\textbf{x}+\textbf{n}\end{align}</script><p>其中$\rho$表示系统的发射功率，$\textbf{n}$表示加性高斯白噪声向量，其中每个元素均服从高斯分布$\mathcal{C}\mathcal{N}(0,1)$。</p><h2 id="缺陷及应用限制"><a href="#缺陷及应用限制" class="headerlink" title="缺陷及应用限制"></a>缺陷及应用限制</h2><p>优势：</p><ul><li>单射频链</li><li>无天线间的干扰</li><li>合理利用空域资源</li><li>……</li></ul><p>缺点：</p><ul><li>RF链和发射天线之间需要频繁切换，在信息速率时可能无法实现</li><li>增加天线可以增加空间比特数，但是导致空间星座点变多，星座点之间的欧式距离减少，空间调制性能下降。</li><li>仅有接收分集，没有发射分集。</li></ul>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spatial modulation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-MIMO介绍</title>
    <link href="/2022/02/28/introduction4mimo/"/>
    <url>/2022/02/28/introduction4mimo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MIMO"><a href="#MIMO" class="headerlink" title="MIMO"></a>MIMO</h1><h2 id="MIMO介绍"><a href="#MIMO介绍" class="headerlink" title="MIMO介绍"></a>MIMO介绍</h2><p>SISO：Single Input Single Output：独木桥</p><p>MISO：Multi Input Single Output：发射端丢一点没关系，只要保证Multi Input 中有成功传输即可（发射分集）</p><p>SIMO：Single Input Multi Output：接收端丢一些没关系，只要保证Multi Output中有成功接收即可（接收分集）</p><p>MIMO：Multi Input Multi Output：利用多天线，复用空间中不同的传输路径并行发送多份不同数据来提升容量（空分复用）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220228200503468.png" alt="SISO到MIMO"></p><p><strong>MIMO的性能受限于短板，即MIMO的最大容量受制于Input和Output端中天线数量少的一端。</strong></p><p><strong>For example：</strong></p><p>$A \times B $的MIMO，代表基站端有$A$根天线，用户端/手机有$B$根天线。$4\times 4$MIMO的最大容量可以达到SISO的<strong>4</strong>倍；而$4\times 2$MIMO的最大容量是SISO的<strong>2</strong>倍。</p><h2 id="MIMO建模"><a href="#MIMO建模" class="headerlink" title="MIMO建模"></a>MIMO建模</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220228203934811.png" alt="2 times 2 MIMO示意图"></p><p>得到一个方程组：</p><script type="math/tex; mode=display">\begin{align}Y_1=h_{11}X_1+h_{21}X_2\\Y_2=h_{12}X_1+h_{22}X_2\\即\left[\begin{matrix}Y_1\\Y_2\end{matrix}\right]=\left[\begin{matrix}h_{11}&h_{21}\\h_{12}&h_{22}\end{matrix}\right]\cdot\left[\begin{matrix}X_1\\X_2\end{matrix}\right]\end{align}</script><p>但由于<strong>信道之间存在相关性</strong>，导致了容量的变化。</p><p>进一步推导，假设简化模型为：</p><script type="math/tex; mode=display">\left[\begin{matrix}Y^{'}_1\\Y^{'}_2\end{matrix}\right]=\left[\begin{matrix}\lambda_1&0\\0&\lambda_2\end{matrix}\right]\cdot\left[\begin{matrix}X_1^{'}\\X_2^{'}\end{matrix}\right]</script><p>只有一个对角线有数据的矩阵称为对角阵，其中对角线上<strong>非零数据</strong>的个数，称为矩阵的秩。</p><p>很好理解，如果秩为1的话，即表达式中的$\lambda_2=0$，就表示这个2x2 MIMO系统的传输空间相关性很大，从MIMO退化成了SISO或者SIMO，只能同时收发一路数据；如果秩为2的话，就表示该系统有两条相对独立空间信道，可以同时收发两路数据。</p><p>但是这样的情况下也不一定是SISO的两倍。定义<strong>条件数</strong>：</p><script type="math/tex; mode=display">条件数=\frac{\lambda_1}{\lambda_2}</script><ul><li>如果条件数=1，说明两个信道半斤八两，此时的MIMO系统的容量达到最大。</li><li>如果条件数&gt;1，说明两个信道有一定差距，此时系统会将主要资源放在质量好的信道上，此时$2\times 2$的MIMO系统的最大容量就介于$1\sim2$之间。</li></ul><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220228234827809.png" alt="合作通信"></p><p>基站和用户（手机）之间是合作通信，所以信道信息是可知的，这样就可以让基站进行选择。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/41520064">https://zhuanlan.zhihu.com/p/41520064</a></p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MIMO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-无线信道</title>
    <link href="/2022/02/28/wirechannel/"/>
    <url>/2022/02/28/wirechannel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Wireless-Channel"><a href="#Wireless-Channel" class="headerlink" title="Wireless Channel"></a>Wireless Channel</h1><h2 id="强度衰减"><a href="#强度衰减" class="headerlink" title="强度衰减"></a>强度衰减</h2><p> $L_s=32.44+20\log d(km)+20\log f(MHz)$</p><p>即路径衰减与电磁波的<strong>频率</strong>及<strong>距离</strong>有关。</p><h2 id="多普勒频移"><a href="#多普勒频移" class="headerlink" title="多普勒频移"></a>多普勒频移</h2><p>由于发射或接收端的运动引起的频率偏移</p><h2 id="多径效应"><a href="#多径效应" class="headerlink" title="多径效应"></a>多径效应</h2><p>电磁波从发射端到接收端有许多时延不同、损耗各异的传输路径，例如直射、反射、绕射等。不同路径的相同信号在接收端叠加会增大或减小信号能量。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220228195339911.png" alt="image-20220228195339911"></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><strong>一旦发射机、接收机、以及周边的环境相对位置固定了，无线信道就是固定的，不会随时间变化。</strong></p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic knowledge</tag>
      
      <tag>communicaiton</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阅读笔记-Modulation and Coding Design for Simultaneous Wireless Information and Power Transfer</title>
    <link href="/2022/02/26/modulationandcodingdesign4swipt/"/>
    <url>/2022/02/26/modulationandcodingdesign4swipt/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="缩写说明"><a href="#缩写说明" class="headerlink" title="缩写说明"></a>缩写说明</h2><ul><li>WPT: wireless power transfer</li><li>WIT: wireless information transfer</li><li>SWIPT: simultaneous wireless information and power transfer, coordinating WIT and WPT in the same RF spectral band thus yields the research of SWIPT</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ul><li>Introduce the popular transceiver architecture of SWIPT</li><li>unary code and run-length-limited (RLL) code in SWIPT. These two codes can show the trade-off between WIT and WPT performance</li><li>The impact of wireless channels and hardware constraints on the practical modulation design in the SWIPT system is studied for a single user scenario.</li><li>The principle of the modulation design in multi-user SWIPT systems relying on the superposition symbols is introduced.</li><li>Open problems concerning the modulation and coding design in the SWIPT system are envisioned.</li></ul><h2 id="收发机结构"><a href="#收发机结构" class="headerlink" title="收发机结构"></a>收发机结构</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/149477c0dc394a332caeea51db437e80.png" alt="trancevier"></p><h2 id="SWIPT接收机"><a href="#SWIPT接收机" class="headerlink" title="SWIPT接收机"></a>SWIPT接收机</h2><p>接收机由两个部分，分别用作WIT和WPT。RF信号被接收机接收后，根据一定规则用作WIT和WPT。现有成果都主要研究收发机结构，很少研究编码和调制的影响。</p><h3 id="非线性整流"><a href="#非线性整流" class="headerlink" title="非线性整流"></a>非线性整流</h3><p>只有当信号功率大于一定<strong>阈值</strong>，才会激活接收机的整流器电路，才会接收能量。</p><h2 id="编码与SWIPT"><a href="#编码与SWIPT" class="headerlink" title="编码与SWIPT"></a>编码与SWIPT</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/006b17b4138c9d95b731f764a4715a8e.png" alt="coding with SWIPT"></p><p>结合上图，同一种调制方式2ASK(OOK)，因为编码后的码元不同，导致波形不同，根据上面接收机的设计，携带的能量也不同。给设备充电的能力也不同。<strong>但是要注意能量不宜过高，造成能源浪费，也不宜过低，造成设备能源短缺。</strong></p><p>所以传输能量和信息之间有一个trade-off：</p><ol><li><p>无论传什么信息，编码都是全1，能量达到最大值，但是互信息为0（意味着接收机并不能接受到有用的信息）</p><p>从信息论的角度而言，因为有$H(x)=H(X|Y)+I(X;Y)$</p><p>其中$H(x)$是原本信宿有的信息量，$I(X;Y)=0$，则信道损失熵$H(X|Y)=H(X)$，意味着信息全部丢失。</p></li><li><p>如果完全考虑WIT，则可能不满足WPT的要求，或者说WPT不可控？</p></li></ol><p>基于此，有一些可用的编码方式（这些编码本身也就存在WIT和WPT的trade-off）：</p><p><strong>Compensation Energy Coding:</strong> Dummy binary  bits are directly concatenated behind information bits in order to guarantee that the resultant  codeword has a certain percentage of bit “1.”  This coding approach has the lowest complexity. However, the dummy bits do not carry any  information, which may thus degrade the WIT  performance.<br><strong>Inverse Source Coding:</strong> A classic source  encoder takes non-equi-probable messages to  generate binary sequences having equi-probable  binary bits. By contrast, an inverse source encoder  takes equi-probable messages to generate binary  sequences having certain structures for satisfying  the WPT requirement. However, the asynchronization between the encoder and the decoder imposes difficulties in the efficient decoding design.<br><strong>Constraint Coding:</strong> Some constraint coding  techniques have degrees of freedom to change  the codeword structure for satisfying the WPT  requirement. Since they do not include any  dummy bits, the WIT performance may not suffer  significant degradation. Furthermore, the efficient  symbol-level trellis can be adopted for decoding  the constraint code.</p><p>以及文章中介绍的两种约束编码：</p><p><strong>Unary Code:</strong> The unary encoder maps the j-th input binary  sequence onto a j-bit codeword, which has a  single bit “0” at the end and all the other bits in  front are “1.” For instance, the four-level unary  encoder is capable of encoding four different binary sequences {00, 01, 10, 11}. The first  input sequence ‘00’ is encoded as a codeword  ‘0’, while the fourth input sequence “11” is thus  encoded as a codeword “1110”. Obviously, a  different input binary sequence may be encoded  as a codeword having a different percentage of  energy bit “1.” Therefore, the average percentage of energy bit “1” in unary codewords can be  adjusted by changing the occurrence probabilities  of the input binary sequences, which hence controls the SWIPT performance of the codewords.</p><p><strong>Run-Length-Limited Code</strong>:  Another constraint coding technique is the RLL  code [12]. A type-0 (d, k)-RLL code has the following constraints on a codeword: • The runs of bit “0” have a length of d at least  between successive bit “1.” • The runs of bit “0” have a length of k at most  between successive bit “1.” The run-length of bit “0” may be an arbitrary  value between d and k. For instance, a type-0 (1,  3) RLL code is capable of generating a binary bit  sequence of “10100010010001001 …,” where  the minimum run-length of bit “0” is 1 and its  maximum run-length is 3. Obviously, the average  percentage of energy bit “1” in a type-0 RLL codeword is determined by the occurrence probabilities  of the runs of bit “0” having different lengths. For  instance, if a type-0 (1, 3) RLL encoder increases  the occurrence probability of the runs of bit “0”  having a length of 1, the average percentage of  energy bit “1” can be thus increased. Therefore,  by adjusting the occurrence probabilities of the  runs of bit “0” having different lengths, we may  control the SWIPT performance of the type-0 RLL  codewords. For a type-1 RLL encoder, we should  focus on adjusting the occurrence probabilities of  the runs of bit “1” having different lengths in order  to control its corresponding SWIPT performance.</p><p>都是通过约束0-1出现的百分比，来控制WIT和WPT的权衡。</p><h2 id="Battery-Aware-Design"><a href="#Battery-Aware-Design" class="headerlink" title="Battery-Aware Design"></a>Battery-Aware Design</h2><p>因为编码-调制后，所带有的能量不宜过高，也不宜过低。过高会导致能量溢出，过低会导致设备能源短缺。所以在满足最低的信息传输性能后，需要考虑最小化电池过满概率和下溢概率。</p><h2 id="调制与SWIPT-Single-user"><a href="#调制与SWIPT-Single-user" class="headerlink" title="调制与SWIPT(Single-user)"></a>调制与SWIPT(Single-user)</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/c8ce5d538e20380058d694e86ecafa47.png" alt="signal power and threshold"></p><p>因为整流要设置一定阈值，16-PSK全部不能收集能量（如果阈小于平均功率，16-PSK最好），16-QAM有四个符号超过了阈值（红圈）</p><p><strong>高阶调制方案往往具有更好的WPT性能</strong></p><p>另外，一些干扰，例如多径，会降低WIT性能，但是提高WPT性能。</p><h2 id="调制与SWIPT-Multiple-user"><a href="#调制与SWIPT-Multiple-user" class="headerlink" title="调制与SWIPT(Multiple-user)"></a>调制与SWIPT(Multiple-user)</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/ce492042e336b8ee78f5d86b0930f953.png" alt="constellation rotation"></p><p>通过旋转星座图（如上图（下））来实现多用户时符号的叠加。图（上）的传统叠加方式，与原始符号相比，得到的叠加符号能量损失较大，导致WPT性能下降。而如图（下）的旋转，WPT性能满足，但是会损失一定的WIT性能（因为符号之间的最小欧式距离减小）。</p><h2 id="Future-Challenges"><a href="#Future-Challenges" class="headerlink" title="Future Challenges"></a>Future Challenges</h2><p>The following open problems still need our further investigation.<br><strong>Concatenated Code:</strong> A concatenated encoder  consisting of a source encoder, channel encoder and an energy encoder should be carefully  designed, while a powerful iterative decoder is  also required for processing the sophisticated  concatenated codewords.<br><strong>Coded Modulation:</strong> The bit-to-symbol mapping from the binary bits to the modulated symbols has to be designed by jointly considering the  codeword structure and the modulation characteristic in order to satisfy both the WIT and WPT  requirements.<br><strong>Adaptive Modulation:</strong> In order to exploit the  distinctive WPT and WIT features of a specific  modulation scheme, we should design an adaptive modulation scheme by considering the wireless channel characteristics, the non-linear rectifier  and the diverse SWIPT requirements.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Simultaneous Wireless Information and Power Transfer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SWIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置CLASH规则</title>
    <link href="/2022/01/19/rule4clash/"/>
    <url>/2022/01/19/rule4clash/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设置CLASH规则"><a href="#设置CLASH规则" class="headerlink" title="设置CLASH规则"></a>设置CLASH规则</h1><p>因为最近发现在clash中设置规则，一旦更新配置文件，就会将之前的规则覆盖掉。所以研究了一下怎么在解析器中直接添加规则，这样以后更新配置文件也不会覆盖掉规则了。</p><p>找到clash-&gt;settings-&gt;profiles-&gt;parsers-&gt;edit</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/98e560c90353e3ce71da9cb8f75a6eb.png" alt="98e560c90353e3ce71da9cb8f75a6eb"></p><p>然后在以下界面中编辑自己的规则</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220119170045041.png" alt="image-20220119170045041"></p><p>其中url是自己的订阅地址，也能在配置文件中找到。具体路径如下（就是URL）：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220119170213721.png" alt="image-20220119170213721"></p><p>在prepend-rules中设置自己的规则：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">parsers: # array  - url: https:&#x2F;&#x2F;xxxxxxxxxxxxx    yaml:      prepend-rules:        - DOMAIN-SUFFIX,ieeexplore.ieee.org,DIRECT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>我这里设置ieee的网站都使用直连，方便使用校园网下载文献。</p><p>其他的规则类型还有：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220119172231945.png" alt="image-20220119172231945"></p><ul><li>DOMAIN-SUFFIX：域名后缀匹配</li><li>DOMAIN：域名匹配</li><li>……</li></ul><p>连接的策略有：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20220119172307480.png" alt="image-20220119172307480"></p><ul><li>Direct：直连，不使用代理</li><li>Reject：拒绝访问</li><li>……</li></ul>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自适应波束合成</title>
    <link href="/2022/01/14/beamforming/"/>
    <url>/2022/01/14/beamforming/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自适应波束合成的<strong>自适应</strong>三个字体现在针对不同数据，波束的合成不仅对期望方向有增益，还对干扰方向有一定的抑制。</p><h2 id="信号数据"><a href="#信号数据" class="headerlink" title="信号数据"></a>信号数据</h2><p>因为都要计算自相关矩阵，而不同的信号之间应该是非相干的，噪声之间也是非相干的。所以可以直接用随机数代替信号。并且由于采样率和信号频率之间只决定了快拍数，而信号频率假设已知(因为要计算理想情况下的<script type="math/tex">d=\frac{\lambda}{2}</script>)，所以采样率也忽略了。如果认为噪声的信号为单位1，则信号的功率也为1，所以需要根据snr反算信号的幅度<script type="math/tex">A_s</script>，得到接收信号。</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">M <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">3e8</span><span class="token punctuation">;</span>N<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token number">4.5</span><span class="token operator">*</span><span class="token number">1e6</span><span class="token punctuation">;</span>lambda <span class="token operator">=</span> c<span class="token operator">./</span>f<span class="token punctuation">;</span>SNR <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>R_circ <span class="token operator">=</span> <span class="token number">175</span><span class="token punctuation">;</span>thetaK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phiK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>         As <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span>SNR<span class="token operator">./</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.'</span><span class="token punctuation">;</span>signal<span class="token operator">=</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>thetaK<span class="token punctuation">)</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>SNR<span class="token punctuation">)</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">As</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>noise <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xn <span class="token operator">=</span> A<span class="token operator">*</span>signal<span class="token operator">+</span>noise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="MVDR"><a href="#MVDR" class="headerlink" title="MVDR"></a>MVDR</h3><p>原理导出都有，简单的说就是使期望方向增益不变的前提下，总功率最小的。</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">R <span class="token operator">=</span> xn<span class="token operator">*</span>xn<span class="token operator">'</span><span class="token operator">/</span>N<span class="token punctuation">;</span>expect_n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>noise_n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>noise_nn<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>A_expect <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> expect_n<span class="token punctuation">)</span><span class="token punctuation">;</span>w0 <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">*</span>A_expect<span class="token operator">/</span><span class="token punctuation">(</span>A_expect<span class="token operator">'</span><span class="token operator">*</span><span class="token function">inv</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">*</span>A_expect<span class="token punctuation">)</span><span class="token punctuation">;</span>dis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>theta_scan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>dis<span class="token operator">:</span><span class="token number">90</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phi_scan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>dis<span class="token operator">:</span><span class="token number">360</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>F <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>theta_scan<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length</span><span class="token punctuation">(</span>phi_scan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>theta_scan<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>phi_scan<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token function">lambda</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">theta_scan</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phi_scan</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> w0<span class="token operator">'</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>F_abs <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/MVDR_1.jpg" alt="MVDR_1" style="zoom:25%;" /><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/MVDR_2.jpg" alt="MVDR_2" style="zoom: 25%;" /></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/LCMV_1.jpg" alt="LCMV_1" style="zoom:25%;" /><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/LCMV_2.jpg" alt="LCMV_2" style="zoom:25%;" /></p><h3 id="LCMV"><a href="#LCMV" class="headerlink" title="LCMV"></a>LCMV</h3><p>LCMV是MVDR的直接扩展，由一个约束变为多个约束，将约束条件变为让多个方向（一个也可以）的增益不变，另外的干扰方向的增益为0。</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">M <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">3e8</span><span class="token punctuation">;</span>N<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token number">4.5</span><span class="token operator">*</span><span class="token number">1e6</span><span class="token punctuation">;</span>lambda <span class="token operator">=</span> c<span class="token operator">./</span>f<span class="token punctuation">;</span>SNR <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>R_circ <span class="token operator">=</span> <span class="token number">175</span><span class="token punctuation">;</span>thetaK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phiK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>         As <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span>SNR<span class="token operator">./</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.'</span><span class="token punctuation">;</span>signal<span class="token operator">=</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>thetaK<span class="token punctuation">)</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>SNR<span class="token punctuation">)</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">As</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>noise <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xn <span class="token operator">=</span> A<span class="token operator">*</span>signal<span class="token operator">+</span>noise<span class="token punctuation">;</span>R <span class="token operator">=</span> xn<span class="token operator">*</span>xn<span class="token operator">'</span><span class="token operator">/</span>N<span class="token punctuation">;</span>dis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>theta_scan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>dis<span class="token operator">:</span><span class="token number">90</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phi_scan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>dis<span class="token operator">:</span><span class="token number">360</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>C_matrix <span class="token operator">=</span> A<span class="token punctuation">;</span>matrix_f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.'</span><span class="token punctuation">;</span> <span class="token comment">%约束向量</span>F <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>theta_scan<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length</span><span class="token punctuation">(</span>phi_scan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w0 <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">*</span>C_matrix<span class="token operator">/</span><span class="token punctuation">(</span>C_matrix<span class="token operator">'</span><span class="token operator">*</span><span class="token function">inv</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">*</span>C_matrix<span class="token punctuation">)</span><span class="token operator">*</span>matrix_f<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>theta_scan<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>phi_scan<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>R_circ<span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">theta_scan</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phi_scan</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> w0<span class="token operator">'</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>F_abs <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="RAB"><a href="#RAB" class="headerlink" title="RAB"></a>RAB</h3><p>RAB是鲁棒自适应波束合成，目的是通过导向矢量在信号-干扰子空间上的投影，得到一个更为精确的导向矢量。</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">M <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">3e8</span><span class="token punctuation">;</span>N<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token number">4.5</span><span class="token operator">*</span><span class="token number">1e6</span><span class="token punctuation">;</span>lambda <span class="token operator">=</span> c<span class="token operator">./</span>f<span class="token punctuation">;</span>SNR <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>R_circ <span class="token operator">=</span> <span class="token number">175</span><span class="token punctuation">;</span>thetaK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phiK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>         As <span class="token operator">=</span> <span class="token number">10.</span><span class="token operator">^</span><span class="token punctuation">(</span>SNR<span class="token operator">./</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span>lambda<span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.'</span><span class="token punctuation">;</span>signal<span class="token operator">=</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>thetaK<span class="token punctuation">)</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>SNR<span class="token punctuation">)</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">As</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>noise <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xn <span class="token operator">=</span> A<span class="token operator">*</span>signal<span class="token operator">+</span>noise<span class="token punctuation">;</span>R <span class="token operator">=</span> xn<span class="token operator">*</span>xn<span class="token operator">'</span><span class="token operator">/</span>N<span class="token punctuation">;</span>dis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">% 扫描间隔</span>theta_scan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>dis<span class="token operator">:</span><span class="token number">90</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phi_scan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>dis<span class="token operator">:</span><span class="token number">360</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token punctuation">[</span>E_all<span class="token punctuation">,</span> lambda_all<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eig</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token punctuation">;</span>Es <span class="token operator">=</span> <span class="token function">E_all</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token function">length</span><span class="token punctuation">(</span>thetaK<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C_matrix <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>F <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>theta_scan<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length</span><span class="token punctuation">(</span>phi_scan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C_matrix <span class="token operator">=</span> Es<span class="token operator">*</span>Es<span class="token operator">'</span><span class="token operator">*</span>C_matrix<span class="token punctuation">;</span>w0 <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">*</span>C_matrix<span class="token operator">/</span><span class="token punctuation">(</span>C_matrix<span class="token operator">'</span><span class="token operator">*</span><span class="token function">inv</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">*</span>C_matrix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>theta_scan<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>phi_scan<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>R_circ<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">theta_scan</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">phi_scan</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> w0<span class="token operator">'</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>F_abs <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/RAB_1.jpg" alt="RAB_1" style="zoom:25%;" /><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/RAB_2.jpg" alt="RAB_2" style="zoom:25%;" /></p><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 画图</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">mesh</span><span class="token punctuation">(</span>phi_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span>theta_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span>F_abs<span class="token punctuation">)</span>colorbar<span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'方位角 \phi °'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'俯仰角 \theta ° '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">zlabel</span><span class="token punctuation">(</span><span class="token string">'波束增益 (dB)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'M='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'阵元 环阵CBF三维视图 来波f='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>f<span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'MHz'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">360</span> <span class="token number">0</span> <span class="token number">90</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>F_abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">20</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>F_abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">60</span><span class="token operator">:</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'YTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'ZTick'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>F_abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>expect_n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>noise_n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>noise_nn<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>theta_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'HandleVisibility'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span>hold on<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hold off<span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'期望方向俯仰角切片'</span><span class="token punctuation">)</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">90</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\theta='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'°'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>phi_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'HandleVisibility'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span>hold on<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hold off<span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'期望方向方位角切片'</span><span class="token punctuation">)</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">360</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">60</span><span class="token operator">:</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\phi='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span>expect_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'°'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>theta_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'HandleVisibility'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span>hold on<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hold off<span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'干扰方向1俯仰角切片'</span><span class="token punctuation">)</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">90</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\theta='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'°'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>phi_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'HandleVisibility'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span>hold on<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hold off<span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'干扰方向1方位角切片'</span><span class="token punctuation">)</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">360</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">60</span><span class="token operator">:</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\phi='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'°'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>theta_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'HandleVisibility'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span>hold on<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hold off<span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'干扰方向2俯仰角切片'</span><span class="token punctuation">)</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">90</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>phi_scan<span class="token operator">==</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\theta='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'°'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>phi_scan<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'HandleVisibility'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span>hold on<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hold off<span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'干扰方向2方位角切片'</span><span class="token punctuation">)</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">360</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">F_abs</span><span class="token punctuation">(</span>theta_scan<span class="token operator">==</span><span class="token function">thetaK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">60</span><span class="token operator">:</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\phi='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">phiK</span><span class="token punctuation">(</span>noise_nn<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'°'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">suptitle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'M='</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'阵元 环阵CBF二维切片 来波f='</span><span class="token punctuation">,</span> <span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'MHz'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>radar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>array signal processing</tag>
      
      <tag>radar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>More Is Better 信道建模扩增方法解读</title>
    <link href="/2021/12/21/moreisbetter/"/>
    <url>/2021/12/21/moreisbetter/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=9247526">原文</a></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>作者认为，在<strong>某一个时间点收集的数据集</strong>训练得到的网络在<strong>不同信道条件下的收集的数据集</strong>上表现不佳，是因为同一特征在不同信道条件下的表现不同（learning a channel-distorted fingerprint instead of the pure inherent fingerprint）。所以提出来一种数据增强方式可以模拟原始数据集中没有的信道和噪声变化，从而增强模型的鲁棒性。</p><p>文章提出了两种数据增强（扩充）的方式，分别针对于“<strong>发射端数据</strong>”和“<strong>接收端数据</strong>”进行扩充。在此，发射机数据可以理解为纯净的信号，接收机数据可以认为是已经通过信道的信号。</p><p>迁移学习和再训练的方法可以解决此类问题，但是作者认为These solutions are not always possible, as training during deployment is resource and time consuming. </p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>三个不同的CNN。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211221164228.png" alt="微信图片_20211221164228"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><h3 id="Custom-Dataset-Matlab仿真得到"><a href="#Custom-Dataset-Matlab仿真得到" class="headerlink" title="Custom Dataset(Matlab仿真得到)"></a><a href="http://genesyslab.org/mldatasets">Custom Dataset</a>(Matlab仿真得到)</h3><p>matlab wlan tool-box生成，IEEE 802.11a wifi协议。QPSK调制，码率为0.5。命名为Txdata（发射机数据）</p><p>对上述数据通过信道。得到Day1和Day2数据(信道不同)。</p><p>共三组，分别为Txdata、Day1、Day2.</p><p>每组有16个dB，每个dB下有10个设备，每个设备的信号长19.6 million 采样点。19.6 million采样点中，前60%为训练集，20%为测试集，20%为验证集。</p><p>训练集、测试集、验证集中，每2000个采样点划分为一个example，形成独立传输。每个example中进行滑动窗分割，以保证模型所学特征的 shift invariance。</p><p>训练阶段取batchsize=128，size=[128, 198, 2]=[batchsize, length, channel]</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211221162201752.png" alt="image-20211221162201752"></p><h3 id="DARPA-Dataset-DARPA的时采数据"><a href="#DARPA-Dataset-DARPA的时采数据" class="headerlink" title="DARPA Dataset(DARPA的时采数据)"></a>DARPA Dataset(DARPA的时采数据)</h3><p> it contains signals from 50, 250, 500, and 5000 WiFi devices transmitting IEEE 802.11a/g protocol. </p><p>此数据集中，example已经形成了，只需要进行slice分割即可。</p><h3 id="分类正确率的衡量"><a href="#分类正确率的衡量" class="headerlink" title="分类正确率的衡量"></a>分类正确率的衡量</h3><h4 id="slice的精度"><a href="#slice的精度" class="headerlink" title="slice的精度"></a>slice的精度</h4><p>正确预测的切片数除以总切片数来计算每个切片的精度。</p><h4 id="example的精度"><a href="#example的精度" class="headerlink" title="example的精度"></a>example的精度</h4><p>对每个example进行分类，将该example中所有slice的概率向量求和，并选择值最高的类作为预测类(其实就是<strong>投票</strong>)。我们通过将正确预测的example的数目除以测试example的总数来计算每个example的准确度。</p><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><h3 id="对于发射端数据的增强"><a href="#对于发射端数据的增强" class="headerlink" title="对于发射端数据的增强"></a>对于发射端数据的增强</h3><p>分为channel模型和noise模型。顺序通过channel模型和一个noise模型。channel模型是一个fir滤波器（从特定的分布中抽取滤波点数，并与信号进行卷积）。noise模型是一个高斯噪声发生器。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211221163456370.png" alt="image-20211221163456370"></p><h3 id="对于接收端数据的增强"><a href="#对于接收端数据的增强" class="headerlink" title="对于接收端数据的增强"></a>对于接收端数据的增强</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211221163649.png" alt="微信图片_20211221163649"></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211221163855959.png" alt="image-20211221163855959"></p><p>Day1训练Day2测试的结果可以看到，即使SNR=20dB，也仅有52%左右的正确率。但SNR=20dB时，Day1训练Day1测试可以达到99%左右。</p><p>同样的，用TxData训练，Day2测试，基本等于随机猜</p><p>再上述两个背景下，此文提出的方法，TxData+Aug（即模拟了各种信道的数据）训练，在Day2上测试的结果非常好。说明文章算法的有效性。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>文章中认为无线信道的衰减、反射和延迟，造成的结果是对iq星座图进行向上、向下扩展和旋转。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Data Augment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为Hexo博客添加aplayer音乐播放器</title>
    <link href="/2021/12/12/hexomusic/"/>
    <url>/2021/12/12/hexomusic/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>aplayer是一个非常漂亮好用的HTML5音乐播放器，和dplayer师出同门。我用的主题是fluid，记录一下添加音乐插件的过程。</p><p>我的<a href="https://lcjoffrey.top">HEXO博客</a></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212140343669.png" alt="整体效果"></p><h1 id="安装aplayer"><a href="#安装aplayer" class="headerlink" title="安装aplayer"></a>安装aplayer</h1><p>npm和github两种方式二选一，拿到dist文件夹就可以了。</p><h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><p>在hexo博客的文件夹根目录打开git bash，并输入:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-tag-aplayer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>可以看到在node_module文件夹中多出来一个aplayer文件夹即可</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212133506777.png" alt="dist路径"></p><p>为了方便，将这个dist文件夹复制一份到主题目录下的source文件夹中。</p><h2 id="Github下载源码"><a href="#Github下载源码" class="headerlink" title="Github下载源码"></a>Github下载源码</h2><p><a href="https://github.com/DIYgod/APlayer">去github clone源码</a>，并复制dist文件夹到主题下的source。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212133806994.png" alt="github下载dist"></p><h1 id="配置js组件"><a href="#配置js组件" class="headerlink" title="配置js组件"></a>配置js组件</h1><p>这一步可以根据<a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html">教程</a>选择自己喜欢的模式。新建一个music.js（名字随便起），放到主题的source文件夹里（我放在source/js/diy/music.js）例如：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212135433717.png" alt="我的music.js路径"></p><ul><li>和我选择一样的跟随模式</li></ul><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APlayer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    container<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'aplayer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    fixed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>autoplay<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//自动播放</span>    audio<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        artist<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        cover<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>选择普通模式</li></ul><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APlayer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    container<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'aplayer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    audio<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        artist<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        cover<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>等等</p><h1 id="搞音乐外链"><a href="#搞音乐外链" class="headerlink" title="搞音乐外链"></a>搞音乐外链</h1><ul><li>在一些网站上搜索，例如：<a href="https://www.ytmp3.cn/">https://www.ytmp3.cn/</a></li></ul><p>好用是好用，但是没有cover，逼格不够；包含的音乐也有点少。</p><ul><li>自己动手薅</li></ul><ol><li><p>比如说找<a href="https://music.163.com/#/song?id=483378334">deca joins的浴室</a>，在页面按F12进入开发者模式，选择Network。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212134814313.png" alt="Network"></p></li><li><p>点击播放，找media类型的Request URL就是音乐的URL。<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212135032005.png" alt="media"></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212134955263.png" alt="URL"></p></li><li><p>同样的找到想要的cover图片的URL，然后一起填到之前的music.js中。</p></li></ol><p>例如我的：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APlayer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    container<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'aplayer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    fixed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>autoplay<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//自动播放</span>    audio<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"浴室"</span><span class="token punctuation">,</span>        artist<span class="token operator">:</span> <span class="token string">'deca joins'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'https://m704.music.126.net/20211212133437/6298f876daf4b3a20b984659f71f8968/jdyyaac/000c/560b/5153/7f43625368aa52c4fbb0f968fa2007d2.m4a?authSecret=0000017dad0be60506550aa4681408a0'</span><span class="token punctuation">,</span>        cover<span class="token operator">:</span> <span class="token string">'https://p1.music.126.net/byjfkEIOWI_RmxSKEWTPyw==/18910500486297525.jpg?param=200y200'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="布置到想要的页面中"><a href="#布置到想要的页面中" class="headerlink" title="布置到想要的页面中"></a>布置到想要的页面中</h1><p>因为我用的是fluid主题，作者在_config.yml文件中预留了修改html的接口，所以我就直接添加在</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212135816276.png" alt="_config.yml中添加"></p><div class="code-wrapper"><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;dist&#x2F;APlayer.min.css&quot;&gt;&lt;div id&#x3D;&quot;aplayer&quot;&gt;&lt;&#x2F;div&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;dist&#x2F;APlayer.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;diy&#x2F;music.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>值得注意的是，这里的<code>id=”aplayer”</code>要和上面music.js中的<code>container: document.getElementById(‘aplayer’)</code>填的Id相同。</p><p>然后就保存发布即可！</p><p>最终效果：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20211212140311292.png" alt="整体效果"></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>如何获取歌词lrc，有哪位老哥知道可以和我分享一下。感谢！</p>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>hexo</tag>
      
      <tag>music</tag>
      
      <tag>diy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Novel Robust Band-Limited Signal Detection Approach Using Graph梳理</title>
    <link href="/2021/12/04/signalDetectionwithGraph/"/>
    <url>/2021/12/04/signalDetectionwithGraph/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Novel-Robust-Band-Limited-Signal-Detection-Approach-Using-Graph"><a href="#Novel-Robust-Band-Limited-Signal-Detection-Approach-Using-Graph" class="headerlink" title="Novel Robust Band-Limited Signal Detection Approach Using Graph"></a>Novel Robust Band-Limited Signal Detection Approach Using Graph</h1><p>@<a href="目录">TOC</a></p><h2 id="Paper-Download"><a href="#Paper-Download" class="headerlink" title="Paper Download"></a>Paper Download</h2><p><a href="https://pan.baidu.com/s/1DdZbw4zlOgHQR4fcHH76Dg">原文百度云及提取码</a>：9tok</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><strong>Abstract</strong>— In this letter, a novel graph-based adequate and concise information representation paradigm is explored. This new signal representation framework can provide a promising alternative for manifesting the essential structure of the communication signals. A typical application, namely, band-limited signal detection, can thus be carried out using our proposed new graph-based signal characterization. According to Monte Carlo simulation results, the proposed graph-based signal detection method leads to the outstanding performance, compared with other existing techniques especially when the signal-to-noise ratio is rather small.<br><strong>Index Terms</strong>— Graph representation, cyclic spectral analysis,sparse signal, weak signal detection.</p><h1 id="Implemention"><a href="#Implemention" class="headerlink" title="Implemention"></a>Implemention</h1><p>==BY MYSELF==</p><h2 id="一、信号的生成"><a href="#一、信号的生成" class="headerlink" title="一、信号的生成"></a>一、信号的生成</h2><p>根据文中叙述，使用BPSK进行作为实验数据，信噪比分别是-3dB、-7dB、-11dB、-$\infty$dB：<br>Matlab自带有<code>pskmod</code>函数:<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">function y &#x3D; pskmod(x,M,varargin)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">%PSKMOD Phase shift keying modulation%%   Y &#x3D; PSKMOD(X,M) outputs the complex envelope of the modulation of the%   message signal X, using the phase shift keying modulation. M is the%   alphabet size and must be an integer power or 2. The message signal X%   must consist of integers between 0 and M-1. For two-dimensional%   signals, the function treats each column as 1 channel.%%   Y &#x3D; PSKMOD(X,M,INI_PHASE) specifies the desired initial phase in%   INI_PHASE. The default value of INI_PHASE is 0.%%   Y &#x3D; PSKMOD(X,M,INI_PHASE,SYMBOL_ORDER) specifies how the function %   assigns binary words to corresponding integers. If SYMBOL_ORDER is set %   to &#39;bin&#39; (default), then the function uses a natural binary-coded ordering. %   If SYMBOL_ORDER is set to &#39;gray&#39;, then the function uses a Gray-coded%   ordering.%%   See also PSKDEMOD, MODNORM, comm.PSKModulator.%    Copyright 1996-2013 The MathWorks, Inc.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>我们可以直接调用基带调制：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">MPSK&#x3D;2；msg&#x3D;randi([0 MPSK-1],1,nsymbol); %生成基带数据       msgmod&#x3D;pskmod(msg,MPSK).&#39;; %基带B-PSK调制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><br>然后再通过载波进行搬移：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">T0&#x3D;1;%符号周期fs&#x3D;50&#x2F;T0;%采样率t&#x3D;0:1&#x2F;fs:T0-1&#x2F;fs;%时间向量fc&#x3D;2&#x2F;T0; %载波频率 c&#x3D;sqrt(2)*exp(1i*2*pi*fc*t);%载波信号tx&#x3D;real(msgmod*c);%载波调制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>然后对所得信号进行展开，方便后续计算：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tx1&#x3D;reshape(tx.&#39;,1,length(msgmod)*length(c));   %tx&#39;的每一列是一个码元代表的采样点,现展开为一行    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>现在所得信号是没有噪声的。我们通过SNR和信号功率计算噪声功率，并将信号和其对应的噪声相加，完成信号的模拟：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">for indx&#x3D;1:length(snr_dB)    rx&#x3D;noisegen(tx1,snr_dB(indx),T0,fs); %加入高斯白噪声后的信号    rxy&#x3D;abs(fft(rx,300));%fft    figure(1)%显示fft图像    subplot(4,1,indx)    plot(rxy);    title([&#39;SNR&#x3D;&#39;,num2str(snr_dB(indx)),&#39;dB&#39;]);    xlabel(&#39;fft点数&#39;,&#39;position&#39;,[320 -20]);    ylabel(&#39;幅度&#39;);end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>其中<code>noisegen</code>函数是根据此<a href="https://pdfs.semanticscholar.org/001c/e832fcee885f19c53aa4d3a5b1740df6325f.pdf?_ga=2.266098567.963320733.1592485803-1007630928.1588666286">PAPER</a>自定义的噪声计算及添加。<br>到此完成信号生成（变换到频域）如下：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200805205741630.jpg" alt="四种信噪比下BPSK频域波形"><center><b><font size ='2'>图1. 四种SNR下的BPSK信号FFT</font></b></center>&lt;/font&gt;</p><h2 id="二、计算功率谱-X-m-并归一化"><a href="#二、计算功率谱-X-m-并归一化" class="headerlink" title="二、计算功率谱$X(m)$,并归一化"></a>二、计算功率谱$X(m)$,并归一化</h2><p>归一化公式：</p><script type="math/tex; mode=display">U_X(m)= \frac{X(m)-\theta_{min}}{\theta_{man}-\theta_{man}} , m=0,1,...M-1</script><p>其中$X(m)$是功率谱，$\theta<em>{max}$和$\theta</em>{min}$是功率谱的最大值和最小值。<br>使用FFT计算得到功率谱$X(m)$：</p><script type="math/tex; mode=display">X(m)\overset{def}{=}\frac{1}{K}|\sum_{k=0}^{K-1}x(k)e^{-j2\pi m\frac{k}{K}}|^2,0\leq m\le M-1</script><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">rxy&#x3D;abs(fft(rx,300));%fftUx&#x3D;zeros(1,length(rxy));%%%%%%%%%%Normalized%%%%%%%%%theta_min&#x3D;min(rxy);theta_max&#x3D;max(rxy);for m&#x3D;1:1:length(rxy)Ux(m)&#x3D;(rxy(m)- sita_min)&#x2F;(sita_max-sita_min);  end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="三、量化"><a href="#三、量化" class="headerlink" title="三、量化"></a>三、量化</h2><p>根据论文量化规则：</p><script type="math/tex; mode=display">Q_X(m)\overset{def}{=}\triangle_\gamma(U_X(m)),m=0,1,...,M-1</script><p>得到量化结果：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">%%%%%%%%%%%%quantization%%%%%%%%%%%for mm&#x3D;1:1:length(Ux)[~,r_level(mm)]&#x3D;min(abs(Ux(mm)-r_set));%找到量化等级end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>以此步骤画图得到Fig.1</p><h2 id="四、构建邻接矩阵、度矩阵和拉普拉斯矩阵"><a href="#四、构建邻接矩阵、度矩阵和拉普拉斯矩阵" class="headerlink" title="四、构建邻接矩阵、度矩阵和拉普拉斯矩阵"></a>四、构建邻接矩阵、度矩阵和拉普拉斯矩阵</h2><p>根据论文可总结为：</p><script type="math/tex; mode=display">\widetilde{A}(Q_X(m),Q_X(m+1))=1,m=1,2,...,M-1</script><p>再通过线性代数定理得到Laplacian Matrix：</p><script type="math/tex; mode=display">L=D-A</script><p>其中$L$是Laplacian，$D$ 是Degree Matrix，$A$是 Adjacency Matrix</p><p>这里用一个自己定义的函数<code>get_LaplacianMatrix</code>来实现：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">function Lx&#x3D;get_LaplacianMatrix(r,Qx)Ax_bar&#x3D;zeros(r,r);Dx_bar&#x3D;zeros(r,r);for i &#x3D;1:1:length(Qx)-1    if(Qx(i)~&#x3D;Qx(i+1))        Ax_bar(Qx(i),Qx(i+1))&#x3D;1; %半正定矩阵        Ax_bar(Qx(i+1),Qx(i))&#x3D;1;     endendfor j&#x3D;1:1:r   Dx_bar(j,j)&#x3D;sum(Ax_bar(j,:)); endLx&#x3D;Dx_bar-Ax_bar;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><h2 id="五、计算Laplacian-Matrix-的第二大特征值及其均值"><a href="#五、计算Laplacian-Matrix-的第二大特征值及其均值" class="headerlink" title="五、计算Laplacian Matrix 的第二大特征值及其均值"></a>五、计算Laplacian Matrix 的第二大特征值及其均值</h2><p>求拉普拉斯矩阵Lx的特征值，记第二大特征值为$\lambda_1$。完成1000次计算，得到均值：</p><script type="math/tex; mode=display">\bar{\lambda}_1= \frac{1}{\psi}\sum_{\nu=1}^{\psi}\lambda_1(\nu)</script><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Lx&#x3D;get_LaplacianMatrix(r,r_level);%得到laplacian 矩阵[~,lamda]&#x3D;eig(Lx);%计算特征值[not_sort,~]&#x3D;max(lamda);%提取特征值lamda_sort&#x3D;sort(not_sort);%特征值排序lamda0(indx2)&#x3D;lamda_sort(end-1);%找到第二大特征值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="六、判断"><a href="#六、判断" class="headerlink" title="六、判断"></a>六、判断</h2><p>==根据文中理论，全联通图的$\bar{\lambda}_1$应该等于量化等级$\gamma$:</p><p><script type="math/tex">{\lim_{x \to \infty}}\lambda_1=\gamma</script>即信噪比很小或全是白噪声时，$|\lambda_1-\gamma|&lt;\delta$。$\delta$是一个很小门限参数。==</p><p>此处定理有待证明。。。</p><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>此篇文章出了一个大BUG，通过SNR计算噪声功率出现了错误。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200805221903690.png" alt="正确信噪比下的信号FFT"></p><p><center><b><font size ='2'>图2. 正确信噪比下的信号FFT</font></b></center>&lt;/font&gt;</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200805221950259.png" alt="文章中的信噪比下的信号FFT"></p><p><center><b><font size ='2'>图3. 文章中的信噪比下的信号FFT</font></b></center>&lt;/font&gt;</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2020080522245893.png" alt="在这里插入图片描述"></p><p><center><b><font size ='2'>图4. 正确信噪比下逼近结果</font></b></center>&lt;/font&gt;</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200805222527152.png" alt="在这里插入图片描述"></p><p><center><b><font size ='2'>图5. 文章中信噪比下的逼近结果</font></b></center>&lt;/font&gt;</p><p>可见，文章中的信噪比添加方式是错误的，没有考虑白噪声的功率谱。<br>完整代码见<a href="https://github.com/Joffrey-lc/Novel-Robust-Band-Limited-Signal-Detection-Approach-Using-Graph">My Github</a>  ==Give me a star plz!==</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gcn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GCN小结</title>
    <link href="/2021/12/04/gcn/"/>
    <url>/2021/12/04/gcn/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="入门必看"><a href="#入门必看" class="headerlink" title="入门必看"></a>入门必看</h1><p>推荐顺序由简到难：</p><ol><li><p><a href="https://zhuanlan.zhihu.com/p/71200936">何时能懂你的心——图卷积神经网络（GCN）</a></p></li><li><p><a href="https://www.zhihu.com/question/54504471">知乎Johnny Richards和superbrother的回答</a></p></li><li><p><a href="https://blog.csdn.net/yyl424525/article/details/100058264">CSDN文章</a></p></li><li><p>清华大学综述文章：Graph Neural Networks：A Review of Methods and Applications</p></li><li><p>GCN开山之作：Semi-Supervised Classification With Graph Convolutional Networks</p></li></ol><h1 id="提出思想及发展"><a href="#提出思想及发展" class="headerlink" title="提出思想及发展"></a>提出思想及发展</h1><h2 id="提出"><a href="#提出" class="headerlink" title="提出"></a>提出</h2><p>对于图（pictures）的处理，CNN是一件大法宝；但是由于CNN处理的对象都是Euclidean Structure，无法对Non Euclidean Structure数据进行处理。图（graph）就是典型的Non Euclidean Structure数据。所以GCN（Graph Convolutional Network）应运而生。</p><p>研究GCN的原因，主要可以简答概括为三点（参考知乎<a href="https://www.zhihu.com/question/54504471">superbrother</a> 的回答）：</p><ol><li>CNN无法处理Non Euclidean Structure数据（传统的离散卷积在Non Euclidean Structure数据上无法保持平移不变性）</li><li>希望在拓扑图结构上有效地提取空间特征来进行机器学习</li><li>拓扑连接是一种广义的数据结构，可应用范围广</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>因为在Non Euclidean Structure数据中，传统的图像卷积操作（图像上的数据点的加权求和）不能适用，所以要想完成GCN，就需要重新定义卷积操作。<br>现在的卷积思路有两种：</p><h3 id="谱域图卷积"><a href="#谱域图卷积" class="headerlink" title="谱域图卷积"></a>谱域图卷积</h3><ul><li>根据图谱理论和卷积定理，将数据从空（间）域转换到谱域进行处理</li><li>有较强的理论基础</li></ul><p>因为傅里叶变换的一个重要性质：<br><em>函数$f_1(t)$和函数$f_2(t)$的傅里叶变换，等于二者傅里叶变换的乘积的逆变换</em>,即：</p><script type="math/tex; mode=display">f_1(x)*f_2(x)=\mathcal{F^{-1}[\mathcal{F_1(w)}\mathcal{F_2(w)}]}</script><div class="table-container"><table><thead><tr><th>符号</th><th>定义</th></tr></thead><tbody><tr><td>$f_1(x)$、$f_2(x)$</td><td>函数</td></tr><tr><td>$\mathcal{F_1(w)}$、$\mathcal{F_2(w)}$</td><td>对应函数的傅里叶变换</td></tr><tr><td>也就是说只要定义了图（graph）的频域变换，就可以推导出图的卷积计算</td></tr></tbody></table></div><h4 id="空域图卷积"><a href="#空域图卷积" class="headerlink" title="空域图卷积"></a>空域图卷积</h4><ul><li>不依靠图谱卷积理论，直接在空间上定义卷积操作（有点CNN那味儿了）</li><li>定义直观，灵活性强</li></ul><p>本周主要了解的是谱域卷积。</p><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200806105645321.png" alt="在这里插入图片描述"></p><p><center><b><font size ='2'>Fig1.发展时间线</font></b></center>&lt;/font&gt;<br>上图时间轴中，红色的是谱域卷积，蓝色的是空域卷积。</p><h1 id="重要的结论"><a href="#重要的结论" class="headerlink" title="重要的结论"></a>重要的结论</h1><p>ChebNet到GCN的转变是重点。<br>因为推导过程有点复杂，在此只介绍结论：<br>| 符号                   | 定义                                   |<br>| ——————————— | ——————————————————— |<br>| $L=D-A$                | 分别是拉普拉斯矩阵、度矩阵、邻接矩阵   |<br>| $U$                    | 拉普拉斯矩阵的特征向量（特征分解得到） |<br>| $\boldsymbol{\Lambda}$ | 拉普拉斯矩阵的特征值（特征分解得到）   |<br>| $\hat{X}$              | 傅里叶变换结果                         |</p><ul><li>结论一：<br>经过一系列复杂证明，我们可以知道Laplacian Matrix 的特征向量$U=(\bar{u}_1,\bar{u}_2,\bar{u}_3,…,\bar{u}_n,)$是n维空间的n个线性无关的正交向量。$U$可以构成一组正交基，且任意信号都可以由此基表示。</li><li>结论二：<br>$U$（拉普拉斯矩阵的特征向量）担任了基函数的位置；拉普拉斯矩阵的特征值担任了频率的位置。</li></ul><p>由此二结论，可以推导拓展到谱域的傅里叶变换：<br>Fourier transform ：$\hat{X}=U^TX$<br>Inverse Fourier transform : $X=U\hat{X}$</p><p>由此定义了图卷积：</p><script type="math/tex; mode=display">X*_G g = \mathcal{F^{-1}( \mathcal{F}(x)\odot\mathcal{F}(g))}=U(U^Tx\odot U^Tg)</script><p>其中，$\odot$是hamand积。</p><h1 id="从ChebNet-到GCN"><a href="#从ChebNet-到GCN" class="headerlink" title="从ChebNet 到GCN"></a>从ChebNet 到GCN</h1><p>因为按上式计算，每次都要进行特征值分解，计算量很大。所以使用Chebyshev（切比雪夫）多项式代替谱域的卷积核：</p><blockquote><p>详见:Convolutional neural networks on graphs with fast localized spectral filtering 一文 </p><p>$g<em>{\theta}=diag(U^Tg)$ ——-&gt;$g</em>{\theta}(\boldsymbol{\Lambda})=\sum^R_{k=0}\beta_kT_k \hat{(\boldsymbol{\Lambda}})$</p></blockquote><p>此方法有以下特点：<br>1）卷积核只有K+1个可学习的参数，一般 K远小于n，参数的复杂度被大大降低<br>2）采用Chebyshev多项式代替谱域的卷积核后，经过公示推导，ChebNet不需要对拉普拉斯矩阵做特征分解了。省略了最耗时的步骤。<br>3）卷积核具有严格的空间局部性。同时，K就是卷积核的“感受野半径”。即将中心顶点K阶近邻节点作为邻域节点。</p><p>关键在于GCN丢ChebNet进行了进一步的简化，它仅考虑一阶的ChebNet,得到一个非常简洁的表达式：</p><script type="math/tex; mode=display">x*_G g_\theta=\theta(I_N+D^{-1/2}AD^{-1/2})x</script><blockquote><p>详见 Semi-Supervised Classification With Graph Convolutional Networks 一文</p></blockquote><div class="table-container"><table><thead><tr><th>符号</th><th>定义</th></tr></thead><tbody><tr><td>$I_N$</td><td>单位矩阵</td></tr><tr><td>$D$、$A$</td><td>度矩阵、邻接矩阵</td></tr><tr><td>$\theta$</td><td>可学习参数</td></tr></tbody></table></div><p>现在还有一个问题，$I_N+D^{-1/2}AD^{-1/2}$的特征值范围[0,2]，在训练过程中可能会出现梯度消失或梯度爆炸，所以要进行归一化：</p><script type="math/tex; mode=display">Z = \tilde{D}^{-1/2} \tilde{A}\tilde{D}^{-1/2} X\Theta</script><p>这就是最终的表达式。其中符号$\tilde{D}=\sum<em>j \tilde{A}</em>{ij}$，$\tilde{A}=A+I_N$(可以理解为再归一化的邻接矩阵和度矩阵)</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>在Semi-Supervised Classification With Graph Convolutional Networks一文中，提出一个具有两层的GCN模型：</p><script type="math/tex; mode=display">Z=f(X,A)=softmax(\tilde{A} ReLU（\tilde{A}XW^0）W^1)</script><p>其中$X$是节点特征矩阵，A是邻接矩阵。此GCN模型可以在很少的节点具有标签的情况下，完成节点的分类。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>谱域图卷积不能做有向图（无法特征分解）</li><li>模型训练期间，图结构不能变</li><li>复杂度问题</li><li>层数太高会出现Over-Smoothing现象</li></ol><h1 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h1><p>空域图卷积</p><ul><li><p>GNN</p><ul><li>构建邻域（Random Walk）</li><li><p>对邻域节点进行内积</p><blockquote><p>详见：A Generalization of Convolutional Neural Networks to Graph-Structured Data</p></blockquote></li></ul></li><li><p>GraphSAGE</p><ul><li><p>卷积=采样+信息聚合</p><blockquote><p>详见:Inductive representation learning on large graphs</p></blockquote></li></ul></li><li><p>GAT</p><ul><li><p>卷积定义为利用注意力机制对邻域节点有区别的聚合</p><blockquote><p>详见：GRAPH ATTENTION NETWORKS</p></blockquote></li></ul></li><li><p>PGC</p><ul><li><p>卷积认为是特定的取样函数与特定的权重函数相乘后求和</p><blockquote><p>详见：Spatial Temporal Graph Convolutional Networks for Skeleton-Based Action</p></blockquote></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Graph Convolutional Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派+Git——GitPi启动（树莓派搭建git服务器）并解决git Bash中文英文乱码的问题</title>
    <link href="/2021/12/04/spi-git/"/>
    <url>/2021/12/04/spi-git/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>装好系统的树莓派</li><li>win10+git</li></ol><h1 id="树莓派安装git"><a href="#树莓派安装git" class="headerlink" title="树莓派安装git"></a>树莓派安装git</h1><p>在树莓派的命令行中输入以下安装Git：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install wget git-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>（如果没安装的话）安装ssh：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>设置自启动ssh：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo &#x2F;etc&#x2F;init.d&#x2F;ssh startsudo update-rc.d ssh defaults<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><h1 id="添加用户和组"><a href="#添加用户和组" class="headerlink" title="添加用户和组"></a>添加用户和组</h1><p>会在树莓派/home下创建一个git文件夹，用作储存。<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">adduser --system --shell &#x2F;bin&#x2F;bash --gecos &#39;git version control by pi&#39; --group --home &#x2F;home&#x2F;git git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>如果想要更换目录，请更改”/home/git”<br>然后更改git用户的密码，以后每次上传都需要使用：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">passwd git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><del>当然，如果想要删除git用户，使用</del><br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">userdel git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>这个时候，可以通过文件管理器查看树莓派/home中多了一个git空文件夹。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810110631578.png" alt="在这里插入图片描述"></p><h1 id="创建新的仓库并初始化"><a href="#创建新的仓库并初始化" class="headerlink" title="创建新的仓库并初始化"></a>创建新的仓库并初始化</h1><p>正式开始，我们需要先在树莓派上创建一个新的仓库。这就是管理我们代码的地方。<br>首先，先进入/home/git 路径：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home&#x2F;git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>切换至创建的git用户:<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">su git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>会提醒输入password，输入之前修改的密码后，成功切换用户。<br>创建一个新的仓库：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mkdir test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>创建后需要进入仓库（否则初始化的是git文件夹）：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>初始化仓库：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git --bare init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810111257618.png" alt="在这里插入图片描述"><br>树莓派上的操作全部完成，可以打开test.git看到里面多了一堆东西<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810111347786.png" alt="在这里插入图片描述"></p><h1 id="在win10上上传文件至远程仓库"><a href="#在win10上上传文件至远程仓库" class="headerlink" title="在win10上上传文件至远程仓库"></a>在win10上上传文件至远程仓库</h1><p>对于我们的PC而言，树莓派的仓库就相当于一个远程仓库。（树莓派和PC必须要连接同一网络）<br>在想要保存文件的路径下（此处我放在桌面）鼠标右击，点击git bash here，打开git bash<br>先将我们创建的远程仓库clone下来：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git clone git@192.168.0.106:&#x2F;home&#x2F;git&#x2F;test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>（此处我的树莓派ip地址是192.168.0.106；我们要clone的仓库是之前创建的位于/home/git下的test.git）<br>输入密码后会提醒clone了一个空仓库<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810111947936.png" alt="在这里插入图片描述"><br>看桌面也发现多了一个test文件夹，就是我们的仓库。<br>然后打开桌面上的文件夹，增加修改。为了演示方便，我增加了一个名为“中文测试.txt”的文件。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/202008101121278.png" alt="在这里插入图片描述"><br>然后和正常上传文件的方法一样，git bash 进入test文件夹。<br>然后添加所有文件<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>提交修改进暂存区：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;上传了一个中文名的文件&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>提交至远程仓库：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>没有意外的话就提交成功了！<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810112438991.png" alt="在这里插入图片描述"><br>我们再测试一下提交的成果。先退出test文件夹，删除test文件夹，并再次clone<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2020081011261574.png" alt="在这里插入图片描述"><br>再在桌面打开test文件夹，发现确实是我们修改后的文件！<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810112701796.png" alt="在这里插入图片描述"><br>再在git bash 中查询记录：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git log <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>(我的自定义了log-&gt;lg，所以我的是git lg)<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810112837354.png" alt="在这里插入图片描述"><br>完美！！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>先在树莓派创建用户和仓库。并初始化。后续使用只需要创建仓库即可，不需要重复创建用户（会告诉你用户已存在）。</li><li>在电脑上clone创建的远程仓库，并修改后，正常提交即可。</li></ol><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><ol><li><p>在git bash中可能出现英文乱码的情况。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810113458404.png" alt="在这里插入图片描述"><br>测试了一下上传github没有问题，说明是树莓派的文字编码有问题，于是我把树莓派的文字显示改回了英文，修复了该问题。<br>在树莓派命令行中：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo nano&#x2F;etc&#x2F;default&#x2F;locale <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>将原来的配置内容修改为：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">LANG&#x3D;zh_CN.UTF-8LANGUAGE&#x3D;en_US:en<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>（ctrl+X保存并退出）再</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">locale-gen -en_US:en<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>重启树莓派即可生效。</p></li><li><p>git bash 在提交文件时，如果文件中有中文，可能出现乱码。<br>测试了GitHub也有这样的现象，说明是win10的问题。正常而言<a href="https://zhuanlan.zhihu.com/p/91741156">参考知乎</a>即可解决。如果和我一样还是无法解决的，问题可能在于win10默认的中文编码方式是GKB，而更国际化的是utf-8，修改win10中文编码为utf-8即可。<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200810114350471.png" alt="在这里插入图片描述"><br>①打开语言中的 管理语言设置<br>②点击 更改系统区域设置<br>③勾选beta版<br>④确定 并重启电脑 完成！</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>gadget</category>
      
      <category>Raspberry Pi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RaspberryPi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派启动——安装+无显示器使用+自启动VNC</title>
    <link href="/2021/12/04/spi-start/"/>
    <url>/2021/12/04/spi-start/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>时隔一年多，拿起树莓派却忘记如何使用了。本想用作自己搭建git服务器，后续再完成了。在此记录一下使用流程。</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><ol><li>树莓派(3b+)</li><li>TF卡和读卡器（16-256GB，但不要太大，SD卡格式化要很久。我是32GB）</li><li>网线</li><li>电源线</li></ol><h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p>（<a href="https://shumeipai.nxez.com/download#tools">至树莓派实验室下载</a>）:</p><ol><li>SD卡格式化工具 SD Formatter</li><li>镜像烧录工具 Win32DiskImager</li><li>SSH工具 PUTTY</li><li><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">树莓派os官网下载</a> </li><li>VNCviewer</li></ol><h2 id="写入系统"><a href="#写入系统" class="headerlink" title="写入系统"></a>写入系统</h2><ol><li><p>使用SD Formatter格式化TF卡<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2020080916412384.png" alt="在这里插入图片描述"><br>（格式化会有点久）<br>2.解压官网下载的操作系统，得到.img 文件。打开Win32DiskImager，在①中选择解压得到的.img文件；在②中选择自己的TF卡；点击③。系统烧录完成！！<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809164521285.png" alt="在这里插入图片描述"></p><h2 id="启动树莓派"><a href="#启动树莓派" class="headerlink" title="启动树莓派"></a>启动树莓派</h2></li><li><p>首先电脑打开TF卡，创建一个名为ssh的空白文件（没有后缀）</p></li><li>TF卡插入树莓派，并通电。此时树莓派已启动。但由于没有多余的显示器，不能看到图形界面。</li><li>用网线链接电脑和树莓派。</li><li>在wlan属性中设置internet共享<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809165043538.png" alt="在这里插入图片描述"></li><li>然后查询树莓派ip地址：<br> 通过cmd输入 arp -a，查看 b8-开头的ip就是树莓派ip。<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809165641164.png" alt="在这里插入图片描述"></li><li>打开putty。输入ip地址打开。默认账号为:pi，默认密码为：raspberry。完成！<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809165959464.png" alt="在这里插入图片描述"></li><li><p>为了看到图形界面，启动树莓派的vncserver，即在命令行中输入：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">vncserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809170309463.png" alt="在这里插入图片描述"></p></li><li><p>打开VNCviewer，输入ip地址和账号密码，即可看到图形界面了！</p></li></ol><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ol><li>在terminal中输入：<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>注释掉源文件中的内容，更换为阿里源：<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;raspbian&#x2F;raspbian&#x2F; stretch main contrib non-free rpideb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;raspbian&#x2F;raspbian&#x2F; stretch main contrib non-free rpi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li>打开并编辑/etc/apt/sources.list.d/raspi.list文件<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>注释掉源文件内容，更换为：<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archive.raspberrypi.org&#x2F;debian&#x2F; stretch main uideb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archive.raspberrypi.org&#x2F;debian&#x2F; stretch main ui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li>更新软件源列表<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="VNC自启动"><a href="#VNC自启动" class="headerlink" title="VNC自启动"></a>VNC自启动</h2>为了下次使用方便，首先将树莓派脸上wifi。通过图形界面右上角打开WiFi，并连接：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809170824182.png" alt="在这里插入图片描述"><br>然后记一下树莓派所分得的ip地址，并拔掉网线。拔掉网线后会断开vnc。因为现在的ip地址变了。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200809171006256.png" alt="在这里插入图片描述"><br>如果没有看ip地址就断开了</li></ol><ul><li>可以使用arp -a查询b8开头的ip地址</li><li>可以通过路由器管理设备查询（192.168.0.1 or 192.168.1.1）</li></ul><p>现在只要启动树莓派 并启动vncserver，就可以通过vncviewer查看图形界面了。</p><p>现在的问题是如何开机自启vncserver？</p><ol><li>打开terminal，输入以下打开设置<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>选择Interfacing Options-&gt;VNC-&gt;选择yes  等待完成</li><li>打开初始化文件<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;init.d&#x2F;vncserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>并粘贴以下内容,粘贴后 按 ctrl+X 保存并退出:<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;sh### BEGIN INIT INFO# Provides: vncserver# Required-Start: $local_fs# Required-Stop: $local_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start&#x2F;stop vncserver### END INIT INFO# More details see:# http:&#x2F;&#x2F;www.penguintutor.com&#x2F;linux&#x2F;vnc### Customize this entry# Set the USER variable to the name of the user to start vncserver underexport USER&#x3D;&#39;pi&#39;### End customization requiredeval cd ~$USERcase &quot;$1&quot; instart)# 启动命令行。此处自定义分辨率、控制台号码或其它参数。su $USER -c &#39;&#x2F;usr&#x2F;bin&#x2F;vncserver -depth 16 -geometry 1920x1200 :1&#39;echo &quot;Starting VNC server for $USER &quot;;;stop)# 终止命令行。此处控制台号码与启动一致。su $USER -c &#39;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :1&#39;echo &quot;vncserver stopped&quot;;;*)echo &quot;Usage: &#x2F;etc&#x2F;init.d&#x2F;vncserver &#123;start|stop&#125;&quot;exit 1;;esacexit 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li>修改权限<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo chmod 755 &#x2F;etc&#x2F;init.d&#x2F;vncserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>添加开机启动项<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo update-rc.d vncserver defaults<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>重启树莓派<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ol><p>至此全部完成</p>]]></content>
    
    
    <categories>
      
      <category>gadget</category>
      
      <category>Raspberry Pi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RaspberryPi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装Anaconda+pytorch+pycharm配置，并创建新的环境</title>
    <link href="/2021/12/04/pythonenvs3/"/>
    <url>/2021/12/04/pythonenvs3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h1><p>检查一下系统是否已经安装了python，建议删除，不然容易遇到一些奇怪的问题。<br>如果需要卸载已有的python，先查询自己python版本，再下次相同版本，点击运行时选择uninstall即可。<br>如果想完全卸载anaconda，参考<a href="https://blog.csdn.net/kuweicai/article/details/90145242">如何彻底的卸载anaconda（包括配置文件）</a></p><h1 id="下载并安装Anaconda"><a href="#下载并安装Anaconda" class="headerlink" title="下载并安装Anaconda"></a>下载并安装Anaconda</h1><h2 id="下载Anaconda"><a href="#下载Anaconda" class="headerlink" title="下载Anaconda"></a>下载Anaconda</h2><p>   直接<a href="https://www.anaconda.com/products/individual">官网下载</a>.</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>  傻瓜式安装一路next。值得注意的是：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730171324257.png" alt="选择是否添加路径"><br>此处的路径不添加也可，后面在环境变量手动加。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/202007301712511.png" alt="了解更多"><br>此处两个勾都去掉。</p><p>安装完成后，如果添加了环境变量anaconda安装就完成了，没有添加的话：</p><p>1.win + S 输入 环境变量，打开系统环境变量中的path变量<br>2.根据自己anaconda安装路径添加：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730174738575.png" alt="根据自己路径添加环境变量"></p><p>Anaconda安装完成！可以使用 win+R 打开cmd ，输入python检查是否安装完成。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2020073018183797.png" alt="在这里插入图片描述"></p><h2 id="换国内镜像源"><a href="#换国内镜像源" class="headerlink" title="换国内镜像源"></a>换国内镜像源</h2><p>然后换清华的源（不然下载库会很慢）</p><p>1.win + R  输入:<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">%HOMEPATH%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730172715491.png" alt="在这里插入图片描述"><br>2.进入路径，打开.condarc<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730172743361.png" alt="在这里插入图片描述"><br>3.修改为如下即可：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">channels:  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;pytorch&#x2F;  - http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;peterjc123&#x2F;show_channel_urls: truessl_verify: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>没有.condarc文件的话，先在cmd中输入</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda config --add channels http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forgeconda config --add channels http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>也可以生成.condarc文件并换源</p><h2 id="创建新环境"><a href="#创建新环境" class="headerlink" title="创建新环境"></a>创建新环境</h2><p>方法一：<br>    可以通过打开Anaconda Navigator —&gt;Enviroments—&gt;Create 来创建新环境<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730180857607.png" alt="创建新环境方法1"><br>方法二（个人推荐）：<br>使用 Anaconda Prompt （win + s 搜索），输入：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda create -n xxxxx python&#x3D;?? anaconda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>其中xxxxx是自己想创建的环境名 ；??是python版本号，如下图<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730181423527.png" alt=""><br>可以看到一堆要安装的包。如果不想安装这么多，可以创建一个只有最基本包的环境，和上面命令大致一样，只是不要最后的 anaconda ：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda create -n xxxxx python&#x3D;??<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>因为换了源，所以这一步应该比较快。完成后可以在Anaconda Prompt中检查：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">activate xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730182210831.png" alt="在这里插入图片描述"><br>可以看到前缀由（base）变成了（xxxxx），base是anaconda自带的，xxxxx是刚刚创建的。我创建的名字是pytorch。</p><h1 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h1><p>依然<a href="https://pytorch.org/">官网下载</a><br>然后根据自己的需要选择pytorch版本<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730182712563.png" alt="在这里插入图片描述"><br>然后复制官网生成的  Run this Command：<br><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda install pytorch torchvision cudatoolkit&#x3D;10.2 pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>注意，这行代码去掉了 -c，是因为去掉后才会从清华的源上下载。<br>打开 Anaconda Prompt ，并激活需要安装pytorch的环境。我安装在刚刚生成的pytorch环境中。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730183025287.png" alt="在这里插入图片描述"><br>安装pytorch完成。</p><p>这里可能还会遇到两个问题：<br>问题一：<br>如果pytorch安装在自己创建的环境中，例如我安装在了名为pytorch的环境中，需要重新设置环境变量：<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730183300706.png" alt="重新设置环境变量"><br>问题二：<br>python pycharm 和anaconda的库版本可能不合。<br>我的pytorch环境中python是3.7.8，而numpy是1.19.0。建议降低numpy的版本。在Anaconda Prompt中切换到需要更改的环境，输入：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730183727188.png" alt="在这里插入图片描述"><br>等待完成即可。<br>到此完成了pytorch安装</p><h1 id="pycharm配置"><a href="#pycharm配置" class="headerlink" title="pycharm配置"></a>pycharm配置</h1><p>安装就懒得写了。<br>在创建项目时，选择Existing interpreter：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730184208253.png" alt="在这里插入图片描述"><br>点击Existing interpreter旁边的三个点展开选择。<br>再按顺序选择即可<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200730184457273.png" alt="在这里插入图片描述"><br>此处的路径是安装anaconda的路径。如果选择的是base环境，python.exe的位置就在安装路径下；如果选择自己创建的环境，python.exe在。…(安装路径)\envs\xxxxx（自己创建的环境名）</p><p>完成！！！</p>]]></content>
    
    
    <categories>
      
      <category>envs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pytorch的自定义数据集/DataLoader和Dataset重写</title>
    <link href="/2021/12/04/datasetloader/"/>
    <url>/2021/12/04/datasetloader/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>&emsp;&emsp;做Modulation Recognition的时候需要加载自定义的数据集，这就涉及到DataLoader和Dataset类中的方法重写了。</p><h1 id="DataLoader介绍"><a href="#DataLoader介绍" class="headerlink" title="DataLoader介绍"></a>DataLoader介绍</h1><p>&emsp;&emsp;源码中的介绍是：<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token class-name">Data</span> <span class="token class-name"><span class="token namespace">loader<span class="token punctuation">.</span></span> Combines</span> a dataset and a sampler<span class="token punctuation">,</span> and <span class="token keyword">provides</span> <span class="token namespace">an</span> iterable over the given dataset<span class="token punctuation">.</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>&emsp;&emsp;也就是说，我们可以通过输入一个数据集，及常用参数如：batch_size、shuffle,就可以得到一个打包好的迭代器。这个迭代器包含了batch_size的序号及根据batch_size分割好的数据块。</p><h1 id="Dataset-介绍"><a href="#Dataset-介绍" class="headerlink" title="Dataset 介绍"></a>Dataset 介绍</h1><p>&emsp;&emsp;源码中的介绍是：<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">An</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> representing a <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">:</span>`<span class="token class-name">Dataset</span>`<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>&emsp;&emsp;很短，但是很经典。这是一个抽象类。所谓抽象类就是类的抽象化，而类本身就是不存在的，所以抽象类无法实例化。它存在的意义就是被继承。而且继承抽象类的类必须要重写抽象类的方法。<br>&emsp;&emsp;简单的说，我们构造一个MyDataset数据类，需要继承Dataset，并重写Dataset中的方法。</p><p>&emsp;&emsp;去掉源码中的注释，Dataset抽象类的定义就五行代码，两个方法：<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token operator">:</span>    def <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token operator">:</span>        raise <span class="token class-name">NotImplementedError</span>    def <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token class-name">ConcatDataset</span><span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">,</span> other<span class="token punctuation">]</span><span class="token punctuation">)</span>            # <span class="token class-name">No</span> `def <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>` <span class="token keyword">default</span><span class="token operator">?</span>    # <span class="token class-name">See</span> NOTE <span class="token punctuation">[</span> <span class="token class-name">Lack</span> of <span class="token class-name">Default</span> `__len__` in <span class="token class-name">Python</span> <span class="token class-name">Abstract</span> <span class="token class-name">Base</span> <span class="token class-name">Classes</span> <span class="token punctuation">]</span>    # in pytorch<span class="token operator">/</span>torch<span class="token operator">/</span>utils<span class="token operator">/</span>data<span class="token operator">/</span>sampler<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>&emsp;&emsp;根据我们的需要，我们会重写  <strong>getitem</strong>方法，以及<strong>len</strong>方法。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>&emsp;&emsp;首先，我们要定义自己的数据集类，例如叫做MyDataset，则代码片段应该为：<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyDataSet</span><span class="token punctuation">(</span><span class="token class-name">Dataset</span><span class="token punctuation">)</span><span class="token operator">:</span>    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token operator">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>label <span class="token operator">=</span> label        self<span class="token punctuation">.</span>length <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            def <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token operator">:</span>        label <span class="token operator">=</span> self<span class="token punctuation">.</span>label<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>        <span class="token keyword">return</span> label<span class="token punctuation">,</span> data    def <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>&emsp;&emsp;很简单<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyDataSet</span><span class="token punctuation">(</span><span class="token class-name">Dataset</span><span class="token punctuation">)</span><span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>&emsp;&emsp;表示我们MyDataSet类继承了抽象类Dataset。该MyDataSet类中的有三个方法。</p><h2 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a><strong>init</strong>方法</h2><p>&emsp;&emsp;<strong>init</strong>方法是python中的构造方法(java中是叫构造方法，不知道python是不是这么叫，如果不是请大家指正)，构造方法会在实例化对象时调用。其传入参数就是我们的==数据集==(data)和==标签集==(label)。<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token operator">:</span>       self<span class="token punctuation">.</span>data <span class="token operator">=</span> data       self<span class="token punctuation">.</span>label <span class="token operator">=</span> label       self<span class="token punctuation">.</span>length <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></p><h2 id="getitem方法"><a href="#getitem方法" class="headerlink" title="getitem方法"></a><strong>getitem</strong>方法</h2><p>&emsp;&emsp;<strong>getitem</strong>方法是获取返回数据的方法，传入参数是一个index，也被叫做mask，就是我们对数据集的选择索引。在自己使用时，比如想从data = [100, 99, 98, …, 0]的集合中选出下标为[0, 2, 4]的集合，则index/mask 就取[0, 2, 4],返回data[index]即可。<br>&emsp;&emsp;其实在调用DataLoader时就会自己生成index，所以我们只需要写好方法即可。<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">def <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token operator">:</span>       <span class="token keyword">return</span> self<span class="token punctuation">.</span>label<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><h2 id="len方法"><a href="#len方法" class="headerlink" title="len方法"></a><strong>len</strong>方法</h2><p>&emsp;&emsp;偷了个懒没有去看源码。听说不给返回length的话pytorch会一脸xx。<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">def <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>       <span class="token keyword">return</span> self<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>&emsp;&emsp;完成了MyDataSet，就可以通过DataLoader使用了。例如此处我已经有了一个X<em>train,其中的数据的每一个batch都代表了一个信号。Y<em>train当中都是X_train对应的标签。<br>&emsp;&emsp;于是我的代码就是：<br><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">train_set <span class="token operator">=</span> <span class="token class-name">MyDataSet</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token class-name">X_train</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token class-name">Y_train</span><span class="token punctuation">)</span>num_epoch <span class="token operator">=</span> <span class="token number">100</span>     # number of epochs <span class="token keyword">to</span> <span class="token namespace">train</span> onbatch_size <span class="token operator">=</span> <span class="token number">1024</span>  # training batch sizetrain_data <span class="token operator">=</span> <span class="token class-name">DataLoader</span><span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token class-name">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch in <span class="token function">range</span><span class="token punctuation">(</span>num_epoch <span class="token punctuation">)</span><span class="token operator">:</span>    model<span class="token punctuation">.</span><span class="token function">train</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> batchsz<span class="token punctuation">,</span> <span class="token punctuation">(</span>label<span class="token punctuation">,</span> data<span class="token punctuation">)</span> in <span class="token function">enumerate</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token operator">:</span>        # i表示第几个batch， data表示该batch对应的数据，包含data和对应的labels        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 个Batch size of label &#123;&#125; and size of data&#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> label<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>&emsp;&emsp;DataLoader会根据设置的batch_size来产生index/mask，然后调用Datase的__getitem</em></em>方法取出数据。<br>&emsp;&emsp;输出结果如下：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20200919225212630.png" alt="在这里插入图片描述"><br>&emsp;&emsp;接下来就可以愉快的写模型了！！！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp;其实看起来很简单的一个Dataset抽象类重写和DataLoader使用，包含了面向对象编程的三大特点：==封装==、==继承==、==多态==。</p><ul><li>封装体现在Dataset抽象类的封装及我们的MyDataSet类的封装上。</li><li>继承体现在我们MyDataSet继承Dataset抽象类上。</li><li><del>多态体现在DataLoader对数据集的操作上</del>（这点纯属个人理解，感觉有点像java中的向上转型，但python好像没有这一概念）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Latex工具箱</title>
    <link href="/2021/12/04/latexutils/"/>
    <url>/2021/12/04/latexutils/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="行间公式"><a href="#行间公式" class="headerlink" title="行间公式"></a>行间公式</h1><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span class="token equation string"><span class="token equation-command regex">\begin</span>&#123;aligned&#125;    <span class="token equation-command regex">\mathcal</span>&#123;L&#125;_&#123;dif&#125; =&amp; H(f_&#123;<span class="token equation-command regex">\theta</span>_1&#125;(x),f_&#123;<span class="token equation-command regex">\theta</span>_2&#125;(g_1(x)))<span class="token equation-command regex">\\</span>+&amp;H(f_&#123;<span class="token equation-command regex">\theta</span>_2&#125;(x),f_&#123;<span class="token equation-command regex">\theta</span>_1&#125;(g_2(x)))<span class="token equation-command regex">\label</span>&#123;eqn:5&#125;<span class="token equation-command regex">\end</span>&#123;aligned&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="插入图片（矢量图推荐-eps）"><a href="#插入图片（矢量图推荐-eps）" class="headerlink" title="插入图片（矢量图推荐.eps）"></a>插入图片（矢量图推荐.eps）</h1><p>python直接保存的svg可以，但visio画的有时候不行，先转pdf再用inkscape转为.eps文件导入。<br>插入eps矢量图先导入两个包<br><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">graphicx</span><span class="token punctuation">&#125;</span> <span class="token comment">%use graph format</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">epstopdf</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br>然后正常的插图图像<br><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">&#125;</span><span class="token function selector">\centering</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>width=0.5<span class="token function selector">\textwidth</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pic/CLDNN.eps<span class="token punctuation">&#125;</span><span class="token comment">%宽度为页面的50%</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>CLDNN Network<span class="token punctuation">&#125;</span> <span class="token comment">%标注</span><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">fig:cldnn</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><h1 id="IEEE-Conference-作者信息模板"><a href="#IEEE-Conference-作者信息模板" class="headerlink" title="IEEE Conference 作者信息模板"></a>IEEE Conference 作者信息模板</h1><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\author</span><span class="token punctuation">&#123;</span><span class="token function selector">\IEEEauthorblockN</span><span class="token punctuation">&#123;</span>1<span class="token function selector">\textsuperscript</span><span class="token punctuation">&#123;</span>st<span class="token punctuation">&#125;</span> Name1<span class="token punctuation">&#125;</span><span class="token function selector">\IEEEauthorblockA</span><span class="token punctuation">&#123;</span><span class="token function selector">\textit</span><span class="token punctuation">&#123;</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span>Chengdu, China <span class="token function selector">\\</span>xxxxx@qq.com<span class="token punctuation">&#125;</span><span class="token function selector">\and</span><span class="token function selector">\IEEEauthorblockN</span><span class="token punctuation">&#123;</span>2<span class="token function selector">\textsuperscript</span><span class="token punctuation">&#123;</span>nd<span class="token punctuation">&#125;</span> Name2<span class="token punctuation">&#125;</span><span class="token function selector">\IEEEauthorblockA</span><span class="token punctuation">&#123;</span><span class="token function selector">\textit</span><span class="token punctuation">&#123;</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span>Chengdu, China  <span class="token function selector">\\</span>xxxxx@qq.con<span class="token punctuation">&#125;</span><span class="token function selector">\and</span><span class="token function selector">\IEEEauthorblockN</span><span class="token punctuation">&#123;</span>3<span class="token function selector">\textsuperscript</span><span class="token punctuation">&#123;</span>st<span class="token punctuation">&#125;</span> Name3<span class="token punctuation">&#125;</span><span class="token function selector">\centerline</span>~  <span class="token comment">% 让第三个作者居中</span><span class="token function selector">\IEEEauthorblockA</span><span class="token punctuation">&#123;</span><span class="token function selector">\textit</span><span class="token punctuation">&#123;</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span>Chengdu, China  <span class="token function selector">\\</span>xxxxx@qq.com<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2d320c1a614a4c919702e9c8c95790a2.png" alt="在这里插入图片描述"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\arraystretch</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>1.3<span class="token punctuation">&#125;</span><span class="token comment">%调行距</span><span class="token comment">%\setlength\tabcolsep&#123;3pt&#125;%调列距</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>Comparison of method performance<span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>|c|c|c|<span class="token punctuation">&#125;</span><span class="token function selector">\hline</span><span class="token function selector">\textbf</span><span class="token punctuation">&#123;</span>Method<span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\textbf</span><span class="token punctuation">&#123;</span>Acc:10+500<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span><span class="token function selector">\textbf</span><span class="token punctuation">&#123;</span>Acc:50+500<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token function selector">\hline</span>FixMatch<span class="token punctuation">&amp;</span>74.18\<span class="token comment">% &amp;83.53\%\\\hline</span>SSACGAN-FM<span class="token punctuation">&amp;</span>50.77\<span class="token comment">%&amp;71.00\%\\\hline</span>Enhanced DCT<span class="token punctuation">&amp;</span><span class="token function selector">\textbf</span><span class="token punctuation">&#123;</span>80.82<span class="token punctuation">&#125;</span>\<span class="token comment">%&amp;\textbf&#123;87.27&#125;\%\\\hline</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">tab:1</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="强制符号在下方"><a href="#强制符号在下方" class="headerlink" title="强制符号在下方"></a>强制符号在下方</h1><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\sum</span><span class="token function selector">\limits</span>_<span class="token punctuation">&#123;</span>x=0<span class="token punctuation">&#125;</span>^1<span class="token function selector">\mathop</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathbb</span><span class="token punctuation">&#123;</span>E<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function selector">\limits</span>_<span class="token punctuation">&#123;</span>X<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>$\sum\limits_{x=0}^1$</p><p>$\mathop{\mathbb{E}}\limits_{X}$</p><h1 id="大括号公式"><a href="#大括号公式" class="headerlink" title="大括号公式"></a>大括号公式</h1><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\lambda</span> (t)=<span class="token function selector">\left</span><span class="token function selector">\&#123;</span> <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">&#125;</span><span class="token function selector">\lambda</span> _<span class="token punctuation">&#123;</span>max<span class="token punctuation">&#125;</span>exp(-5(<span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>t-T<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>80<span class="token punctuation">&#125;</span>)^2),<span class="token function selector">\quad</span> t<span class="token function selector">\le</span> T<span class="token function selector">\\</span><span class="token function selector">\lambda</span> _<span class="token punctuation">&#123;</span>max<span class="token punctuation">&#125;</span>,<span class="token function selector">\quad</span> t>T<span class="token function selector">\\</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span> <span class="token function selector">\right</span>. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\lambda (t)=\left\{ \begin{array}{l}    \lambda _{max}exp(-5(\frac{t-T}{80})^2),\quad t\le T\\    \lambda _{max},\quad t>T\\\end{array} \right.</script><h1 id="标题深度和目录深度"><a href="#标题深度和目录深度" class="headerlink" title="标题深度和目录深度"></a>标题深度和目录深度</h1><p>默认只到subsubsection。想要显示更深，在导言区加入：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\setcounter</span><span class="token punctuation">&#123;</span>tocdepth<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>3<span class="token punctuation">&#125;</span> # toc即table of content，表示目录显示的深度<span class="token function selector">\setcounter</span><span class="token punctuation">&#123;</span>secnumdepth<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>4<span class="token punctuation">&#125;</span> #secnum即section number，表示章节编号的深度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h1 id="希腊字母加粗"><a href="#希腊字母加粗" class="headerlink" title="希腊字母加粗"></a>希腊字母加粗</h1><p>一般加粗使用<code>\textbf&#123;&#125;</code>，希腊字母使用：</p><div class="code-wrapper"><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\boldsymbol</span><span class="token punctuation">&#123;</span><span class="token function selector">\phi</span><span class="token punctuation">&#125;</span>for example:<span class="token function selector">\boldsymbol</span><span class="token punctuation">&#123;</span><span class="token function selector">\phi</span><span class="token punctuation">&#125;</span>||<span class="token function selector">\phi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><script type="math/tex; mode=display">\boldsymbol{\phi}||\phi</script><h1 id="vs-code-open-json"><a href="#vs-code-open-json" class="headerlink" title="vs code open json"></a>vs code open json</h1><p><a href="https://blog.csdn.net/qq_24502469/article/details/114269806">json配置</a></p>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>latex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anaconda+pycharm+pytorch1.7+tensorflow1.14.0+tensorflow2.2.0多种环境共存</title>
    <link href="/2021/12/04/pythonenvs2/"/>
    <url>/2021/12/04/pythonenvs2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>Anaconda+pycharm+pytorch 的安装见我<a href="https://blog.csdn.net/qq_41380292/article/details/107693355">前期博文(点这里)</a></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>Anaconda起到一个包管理的作用，可以将不同环境的python、库等分隔开来，互不影响。所以我们可以搭建不同的框架和环境且互相独立。（为了保证我和师兄的代码互相能看懂，只能舍弃pytorch了。pytorch yyds！）</p><h1 id="查看匹配"><a href="#查看匹配" class="headerlink" title="查看匹配"></a>查看匹配</h1><p>首先明确一件事情，tensorflow、cudnn、cudatoolkit（cuda）是我们每个tensorflow环境需要安装的。这三个库之间是有一个匹配关系。这个匹配关系不对会导致安装后报错。建议大家先明确一下匹配关系，需要下载哪个版本的（百度或者官网查）。<br>下面给出我安装的两个版本的对应关系：<br>| tensorflow版本 | cudnn | cudatoolkit |<br>| ——————— | ——- | —————- |<br>| 1.14.0         | 7.6.4 | 10.0        |<br>| 2.2.0          | 7.6.5 | 10.1        |</p><h1 id="新建Anaconda环境"><a href="#新建Anaconda环境" class="headerlink" title="新建Anaconda环境"></a>新建Anaconda环境</h1><p>打开Anaconda或Anaconda prompt，然后按照前面博文中<a href="https://blog.csdn.net/qq_41380292/article/details/107693355">“创建新环境”</a>小节操作即可。<br>在此我创建了一个名为tensorflow1_14_0的新环境。python版本选择3.6<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205225552692.png" alt="在这里插入图片描述"></p><h1 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h1><p>首先打开Anaconda prompt，激活刚刚创建的环境：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">activate tensorflow1_14_0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205230032718.png" alt="在这里插入图片描述"><br>可以看到环境从之前的mytorch（我修改了默认，正常默认环境是base）变为了新创建的tensorflow1_14_0<br>然后在Anaconda prompt中通过命令下载==对应版本的cuda==：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda install cudatoolkit<span class="token operator">=</span><span class="token number">10.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>这里建议大家参考<a href="https://blog.csdn.net/qq_41380292/article/details/107693355">我的博文</a>换源，如果不换源会很慢。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2020120523150050.png" alt="在这里插入图片描述"></p><h1 id="安装cudnn"><a href="#安装cudnn" class="headerlink" title="安装cudnn"></a>安装cudnn</h1><p>同样在Anaconda prompt中键入(注意版本号)：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda install cudnn<span class="token operator">=</span><span class="token number">7.6</span><span class="token number">.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2020120523190131.png" alt="在这里插入图片描述"></p><h1 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h1><p>tensorflow分为CPU版本和GPU版本。GPU版本自带了CPU版本。<br>如果想安装CPU版本，使用命令:<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>doubanio<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span> tensorflow<span class="token operator">==</span><span class="token number">1.14</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>这里借助了豆瓣源，实测要快一些。<br>如果安装GPU版本，如下：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>doubanio<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span> tensorflow_gpu<span class="token operator">==</span><span class="token number">1.14</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>然后在Anaconda中进入python编译：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>调用tensorflow包<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>会出现一堆错误：<br>FutureWarning: Passing (type, 1) or ‘1type’ as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / ‘(1,)type’.<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205232816515.png" alt="在这里插入图片描述"><br>不要怕，问题很简单，numpy版本过高。这是我用Anaconda经常会遇到的问题。每次都是numpy整个最新版，不知道是为什么。<br>我们需要做的就是给numpy降级。如下我给了两个版本的参考（我是这么装的没问题），大家有兴趣可以试试其他版本。</p><div class="table-container"><table><thead><tr><th>tensorflow版本</th><th>numpy版本</th></tr></thead><tbody><tr><td>1.14.0</td><td>1.16.0</td></tr><tr><td>2.2.0</td><td>1.17.0</td></tr><tr><td>为了降级，输入命令（我这里是tensorflow1.14.0，对应的numpy1.16.0）：</td></tr></tbody></table></div><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda install numpy<span class="token operator">==</span><span class="token number">1.16</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205233318517.png" alt="在这里插入图片描述"><br>然后可以检查一下是否安装完成了，即在python编译器中输入:<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf tf<span class="token punctuation">.</span>__version__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205234611462.png" alt="在这里插入图片描述"><br>看到确实是1.14.0<br>==完成了吗？？==<br>试一下pycharm，同之前的博文，在pycharm中的编译器选择Existing environment-&gt;anaconda安装目录下的env-&gt;tensorflow1_14_0（环境名）-&gt;python.exe<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205234951589.png" alt="在这里插入图片描述"><br> 等待库全部加载完，新建一个python文件，键入以下代码测试：<br> <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token comment"># 降低警告优先级，去掉一堆加速警告。可以不写</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span>gpu_device_name <span class="token operator">=</span> tf<span class="token punctuation">.</span>test<span class="token punctuation">.</span>gpu_device_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gpu_device_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>test<span class="token punctuation">.</span>is_gpu_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回True或者False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201205235651478.png" alt="在这里插入图片描述"><br>可以看到安装成功！！！：）<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201206000927183.png" alt="在这里插入图片描述"><br>我现在四个环境共存了。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><ol><li>tensorflow2.2.0安装过程完全一样，只是把cudnn、tensorflow、cudatoolkit的版本号改掉就可。</li><li>可能会遇到DLL 未找到。。。之类的错误，可能是没装Microsoft vistal C++ 。但我的解决方案是在环境变量中把新建的环境下的路径添加到环境变量中，如：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/20201206000036986.png" alt="在这里插入图片描述"><br>有兴趣可以试试。</li></ol><p>（tensorflow1.x真的不友好TAT还是keras和pytorch好使）</p>]]></content>
    
    
    <categories>
      
      <category>envs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FixMatch文章解读+算法流程+核心代码详解</title>
    <link href="/2021/12/04/Fixmatch/"/>
    <url>/2021/12/04/Fixmatch/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FixMatch"><a href="#FixMatch" class="headerlink" title="FixMatch"></a>FixMatch</h1><p><em>本博客仅做算法流程疏导，具体细节请参见原文</em></p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://arxiv.org/abs/2001.07685">查看原文点这里</a></p><h2 id="Github代码"><a href="#Github代码" class="headerlink" title="Github代码"></a>Github代码</h2><p><a href="https://github.com/kekmodel/FixMatch-pytorch">Github代码点这里</a></p><h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><p> FixMatch算法抓住了半监督算法的两个重要观点，第一个是一致性正则化，第二个是伪标记。一致性正则化在<a href="https://blog.csdn.net/qq_41380292/article/details/119277938?spm=1001.2014.3001.5501">MixMatch</a>中已经介绍过了，在此不再赘述。伪标记是一种常用的半监督算法。</p><h3 id="伪标记"><a href="#伪标记" class="headerlink" title="伪标记"></a>伪标记</h3><p>伪标记（pseudo label）其实算最早的一类半监督算法，代表算法self-training。简单地说就是通过训练的模型对无标记样本打标签，这个标签有对有错，通过一些方法筛选标签后，选择一部分无标记样本和模型打的标签一起送入模型继续训练。伪标记的方法最大问题在于，如何保证伪标记的正确性。因为当模型打的标签提供了较多的错误信息时，会使模型的训练结果更劣。一般常见的筛选方式是将模型输出的预测结果($Softmax$之后)进行阈值判断，其$argmax$的概率大于阈值，才认为是有效标记，否则将此无标记样本丢弃。</p><h3 id="整体算法"><a href="#整体算法" class="headerlink" title="整体算法"></a>整体算法</h3><p>FixMatch算法并不复杂，结合一致性正则化和伪标记两种算法。由其论文中的流程图就可以很好的理解。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/4f0c97744f73673206e011210b4495f8.png" alt="image-20210802101107656"></p><p>对于有标记样本，进行正常的监督学习，损失函数为$CrossEntropyLoss$，得到$L_s$。其公式表达如下：</p><p>$L<em>s=\frac{1}{B}\sum^B</em>{b=1}H(p_b,p_m(y|\alpha(x_b)))$</p><p>对于无标记样本，参照上图，共四步。</p><p><strong>第一步</strong>，先对无标记样本进行扩增(Augment)，扩增分为强扩增和弱扩增，弱扩增使用标准的旋转和移位；强扩增使用RandAugment和CTAugment两种算法。</p><p><strong>第二步</strong>，对扩增后的样本进行预测。对于弱扩增的样本，输出的预测结果($Softmax$之后的)最高预测概率(即$argmax$的结果)大于阈值(图中的虚线)，则认为是有效的样本，将其预测结果作为标签（这就是pseudo label）。</p><p><strong>第三步</strong>：对强扩增的样本，输出的预测结果和对应弱标记样本得到的标签做$CrossEntropyLoss$，得到损失函数$L_u$。其公式表达为：</p><p>$L<em>u=\frac{1}{\mu B}\sum^{\mu B}</em>{b=1}\mathcal{1}(max(q_b)\geq \tau )H(\hat{q_b},p_m(y|\mathcal{A}(u_b)))$</p><p>简而言之就是选择$max(q_b)\geq \tau$的$H(\hat{q_b},p_m(y|\mathcal{A}(u_b))$作为$L_u$的组成成分，参与反向梯度传播更新。</p><p><strong>第四步</strong>：最终损失函数为$Loss = L_s+\alpha L_u$，$\alpha$是超参数。</p><p>对$Loss$反向梯度传播完成整个算法模型更新。</p><h3 id="核心代码解读"><a href="#核心代码解读" class="headerlink" title="核心代码解读"></a>核心代码解读</h3><p>这里读取一个batch的操作，和前一篇<a href="https://blog.csdn.net/qq_41380292/article/details/119277938?spm=1001.2014.3001.5501">MixMatch</a>的代码实现相同，为了读取指定次数的batch，而不通过Dataloader。<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> batch_idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>eval_step<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        inputs_x<span class="token punctuation">,</span> targets_x <span class="token operator">=</span> labeled_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>world_size <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            labeled_epoch <span class="token operator">+=</span> <span class="token number">1</span>            labeled_trainloader<span class="token punctuation">.</span>sampler<span class="token punctuation">.</span>set_epoch<span class="token punctuation">(</span>labeled_epoch<span class="token punctuation">)</span>        labeled_iter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>labeled_trainloader<span class="token punctuation">)</span>        inputs_x<span class="token punctuation">,</span> targets_x <span class="token operator">=</span> labeled_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>inputs_u_w<span class="token punctuation">,</span> inputs_u_s<span class="token punctuation">)</span><span class="token punctuation">,</span> _ <span class="token operator">=</span> unlabeled_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>world_size <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            unlabeled_epoch <span class="token operator">+=</span> <span class="token number">1</span>            unlabeled_trainloader<span class="token punctuation">.</span>sampler<span class="token punctuation">.</span>set_epoch<span class="token punctuation">(</span>unlabeled_epoch<span class="token punctuation">)</span>        unlabeled_iter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>unlabeled_trainloader<span class="token punctuation">)</span>        <span class="token punctuation">(</span>inputs_u_w<span class="token punctuation">,</span> inputs_u_s<span class="token punctuation">)</span><span class="token punctuation">,</span> _ <span class="token operator">=</span> unlabeled_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>得到<strong>strong_augment</strong>样本和<strong>weak_augment</strong>样本，分别为<strong>logits_u_s</strong>和<strong>logits_u_w</strong>。<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">logits <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>logits <span class="token operator">=</span> de_interleave<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>args<span class="token punctuation">.</span>mu<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>logits_x <span class="token operator">=</span> logits<span class="token punctuation">[</span><span class="token punctuation">:</span>batch_size<span class="token punctuation">]</span>logits_u_w<span class="token punctuation">,</span> logits_u_s <span class="token operator">=</span> logits<span class="token punctuation">[</span>batch_size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><br>对有标记样本做$CrossEntropyLoss$<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">Lx <span class="token operator">=</span> F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>logits_x<span class="token punctuation">,</span> targets_x<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>通过<strong>weak_augment</strong>样本计算伪标记<strong>pseudo label</strong>和<strong>mask</strong>，其中，<strong>mask</strong>用来筛选哪些样本最大预测概率超过阈值，可以拿来使用，哪些不能使用<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">pseudo_label <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>logits_u_w<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>args<span class="token punctuation">.</span>T<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>max_probs<span class="token punctuation">,</span> targets_u <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>pseudo_label<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> max_probs<span class="token punctuation">.</span>ge<span class="token punctuation">(</span>args<span class="token punctuation">.</span>threshold<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><br>计算无标记样本的损失函数$L_u$，其中通过<strong>mask</strong>进行样本筛选<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">Lu <span class="token operator">=</span> <span class="token punctuation">(</span>F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>logits_u_s<span class="token punctuation">,</span> targets_u<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token operator">*</span> mask<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>完整损失函数如下<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss <span class="token operator">=</span> Lx <span class="token operator">+</span> args<span class="token punctuation">.</span>lambda_u <span class="token operator">*</span> Lu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>反向梯度更新，完成！~</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Semi-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MixMatch文章解读+算法流程+核心代码详解</title>
    <link href="/2021/12/04/Mixmatch/"/>
    <url>/2021/12/04/Mixmatch/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MixMatch"><a href="#MixMatch" class="headerlink" title="MixMatch"></a>MixMatch</h1><p><em>本博客仅做算法流程疏导，具体细节请参见原文</em></p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://arxiv.org/abs/1905.02249">查看原文点这里</a></p><h2 id="Github代码"><a href="#Github代码" class="headerlink" title="Github代码"></a>Github代码</h2><p><a href="https://github.com/YU1ut/MixMatch-pytorch.git">Github代码点这里</a></p><h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><p>MixMatch抓住了半监督算法的两个重要观点：第一是<strong>熵最小化</strong>；第二是<strong>一致性正则化</strong>。结合这两个观点的算法就形成了MixMatch。</p><h3 id="熵最小化"><a href="#熵最小化" class="headerlink" title="熵最小化"></a>熵最小化</h3><p>半监督算法的一个常见假设就是分类的决策边界不应该通过数据分布的高密度区域。这句话简单的理解可以想象一个聚类模型，其决策边界一定是在簇与簇之间的稀疏边界上，不可能穿过一个簇的中心（高密度区域）。而实现这一点的一种方法就是要求分类器对未标记数据输出低熵预测。MixMatch中使用一个”sharpening”函数来隐式实现熵最小化。所谓熵最小化、低熵预测，都是指使输出概率分布比较有“偏向性”，而不希望输出一个“平均的预测”。熵在信息论中是不确定度的度量，根据离散模型的熵最大定理，可知在均匀分布时熵取得最大值，换句话说，出现一个确定的分布，即某一类的概率是1，其余类的概率是0时，熵为0。也就是说想要得到熵最小，就得使分类器输出后的模型预测概率集中分配给某一类。后面再介绍“sharpening”函数如何实现这一点。</p><h3 id="一致性正则化"><a href="#一致性正则化" class="headerlink" title="一致性正则化"></a>一致性正则化</h3><p>一致性正则化也是一个常见的半监督假设。<a href="https://blog.csdn.net/qq_41380292/article/details/119248049">VAT</a>、<a href="https://blog.csdn.net/qq_41380292/article/details/119218902">MeanTeacher</a>等其实都或多或少使用了这种假设。其核心在于，我们希望一个样本和其加扰版本（通常图像中称为Augment）通过分类器后，得到相似的输出。其实也就是说分类边界不应该穿过数据分布的高密度区域。如下图，红色点是原始样本，蓝色和绿色为其扰动版本，红色同心圆的虚线圆是我们期望的容差范围，即在这个区间类的都应该认为和其中心数据点为同一类。通过扰动数据点的加入，将决策边界推到合适的位置，使分类器的鲁棒性更强。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/391a4b60403d99fb826ff03a3e1bf178.png" alt="Consistency Regularization"></p><p>一般而言，通过对原始样本和其扰动版本的分类器输出进行衡量，即可实现一致性正则化，常见的衡量方式有MSE、KL散度、JS散度等。在MixMatch中通过对图像的标准数据增强(水平翻转、裁剪)实现扰动(Augment)，采用MSE准则方式衡量。</p><p>总得来说，算法有以下步骤：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/e89857b0f4f83f2c160402828d2b381d.png" alt="屏幕截图 2021-07-31 154634"></p><p>归结而言有五个步骤：</p><p><strong>第一步</strong>，对数据进行扩增(Augment)。扩增分为对有标记数据集$X$的扩增和对无标记数据集$U$的扩增，分别记为$\hat{X}$和$\hat{U}$。对$X$扩增一次，对$U$扩增$K$次，文章中取$K=2$。因为在取batch时，$Batch Size <em>U = BatchSize_X$，所以扩增后$Batch Size </em>{\hat{U}} = K\cdot BatchSize_{\hat{X}}$。</p><p><strong>第二步</strong>，计算平均预测分布。此步骤仅对数据集$\hat{U}$进行。即通过如下公式计算，其中$(\hat{u_{b,k}},y)$是$\hat{U}$的一个$Batch$：</p><script type="math/tex; mode=display">\bar{q_b}=\frac{1}{K}\sum_kP_{model}(y|\hat{u_{b,k}};\theta)</script><p>值得注意的是，$P<em>{model}(y|\hat{u</em>{b,k}};\theta)$是$Softmax$之后的预测概率分布。</p><p><strong>第三步</strong>，通过$sharpening$函数完成分布的锐化，其计算公式如下：</p><script type="math/tex; mode=display">Sharpen(p,T)_i=\frac{p_i^{\frac{1}{T}}}{\sum^L_{j=1}p_j^{\frac{1}{T}}}</script><p>当超参数$T\to 0$时，$Sharpen(p,T)$趋向于$one-hot$分布，即其中一个类别的概率为1，其余概率为0；锐化后的概率分布作为$\hat{U}$的数据标签(pseudo label)。</p><p><strong>第四步</strong>，通过$MixUp$完成新数据集的构建。先将第一步扩增后的$\hat{X}$和$\hat{U}$进行拼接再打乱顺序，得到$W=Shuffle(Concat(\hat{X},\hat{U}))$，然后再将$W$分为两部分，第一部分大小与$\hat{X}$相同(也与$X$相同)，记为$W_x$；第二部分大小与$\hat{U}$相同(也与$U$相同)，记为$W_u$。然后将$W_x$和$\hat{X}$进行$MixUp$，$W_u$和$\hat{U}$进行$MixUp$，得到$X’$和$U’$。$MixUp$步骤如下：</p><script type="math/tex; mode=display">\lambda\sim Beta(\alpha,\alpha)</script><script type="math/tex; mode=display">\lambda'=max(\lambda,1-\lambda)</script><script type="math/tex; mode=display">x'=\lambda'x_1+(1-\lambda')x_2</script><script type="math/tex; mode=display">p'=\lambda'p_1+(1-\lambda')p_2</script><p><strong>第五步</strong>，计算半监督损失函数，分为在标记数据集$X’$上的损失函数$L_x$和在无标记数据集$U’$上的损失函数$L_u$，公式如下：</p><script type="math/tex; mode=display">L_x=\frac{1}{|X'|}\sum_{x,p\in X'}H(p,P_{model}(y|x;\theta))</script><script type="math/tex; mode=display">L_u=\frac{1}{L|U'|}\sum_{u,q\in U'}||q-P_{model}(y|u;\theta)||^2_2</script><script type="math/tex; mode=display">L=L_x+\lambda_UL_u</script><p>其中$H(\cdot)$是$CorssEntropyLoss$；$L_u$其实就是$MSE$准则下的误差项。</p><p>反向梯度传播即可完成整个MixMatch算法</p><h2 id="核心代码详解"><a href="#核心代码详解" class="headerlink" title="核心代码详解"></a>核心代码详解</h2><p>图像的水平翻转、裁剪实现$Augment$：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">transform_train <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    dataset<span class="token punctuation">.</span>RandomPadandCrop<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dataset<span class="token punctuation">.</span>RandomFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dataset<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>transform_val <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    dataset<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>这里是在迭代过程中，手动取迭代器中的batch，而不是直接使用Dataloader。这种做法在最近的几篇文章代码复现中都遇见了，其主要目的是为了在一个epoch中可以迭代指定次数，而直接使用Dataloader只能迭代最多$ceil(\frac{样本总数}{BatchSize})$次，其中$ceil(\cdot)$是上取整函数，如果$drop_last$，则只能迭代$\frac{样本总数}{BatchSize}$次。代码中的两个try except是为了保证迭代器完全迭代一次后，重新加载迭代器，继续迭代，直到达到指定次数才跳转下一个epoch。<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> batch_idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>train_iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>         inputs_x<span class="token punctuation">,</span> targets_x <span class="token operator">=</span> labeled_train_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">except</span><span class="token punctuation">:</span>         labeled_train_iter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>labeled_trainloader<span class="token punctuation">)</span>         inputs_x<span class="token punctuation">,</span> targets_x <span class="token operator">=</span> labeled_train_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token punctuation">(</span>inputs_u<span class="token punctuation">,</span> inputs_u2<span class="token punctuation">)</span><span class="token punctuation">,</span> _ <span class="token operator">=</span> unlabeled_train_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">except</span><span class="token punctuation">:</span>         unlabeled_train_iter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>unlabeled_trainloader<span class="token punctuation">)</span>         <span class="token punctuation">(</span>inputs_u<span class="token punctuation">,</span> inputs_u2<span class="token punctuation">)</span><span class="token punctuation">,</span> _ <span class="token operator">=</span> unlabeled_train_iter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>因为文章中取$K=2$，所以进行两次扩增，求输出概率的均值，其中<strong>output_u</strong>和<strong>output_u2</strong>分别为两次扩增后的模型输出结果：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">outputs_u <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs_u<span class="token punctuation">)</span>outputs_u2 <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs_u2<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>outputs_u<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>outputs_u2<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token comment"># 求两次的平均值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><br>求Sharpening结果:<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">pt <span class="token operator">=</span> p<span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>args<span class="token punctuation">.</span>T<span class="token punctuation">)</span>targets_u <span class="token operator">=</span> pt <span class="token operator">/</span> pt<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>targets_u <span class="token operator">=</span> targets_u<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><br>完成$MixUp$:<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">all_inputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>inputs_x<span class="token punctuation">,</span> inputs_u<span class="token punctuation">,</span> inputs_u2<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>all_targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>targets_x<span class="token punctuation">,</span> targets_u<span class="token punctuation">,</span> targets_u<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>l <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>beta<span class="token punctuation">(</span>args<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span> args<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>l<span class="token punctuation">)</span>idx <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>all_inputs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>input_a<span class="token punctuation">,</span> input_b <span class="token operator">=</span> all_inputs<span class="token punctuation">,</span> all_inputs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>target_a<span class="token punctuation">,</span> target_b <span class="token operator">=</span> all_targets<span class="token punctuation">,</span> all_targets<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>mixed_input <span class="token operator">=</span> l <span class="token operator">*</span> input_a <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">*</span> input_bmixed_target <span class="token operator">=</span> l <span class="token operator">*</span> target_a <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">*</span> target_b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>然后计算损失函数:<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">logits <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">(</span>mixed_input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token builtin">input</span> <span class="token keyword">in</span> mixed_input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    logits<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># put interleaved samples back</span>logits <span class="token operator">=</span> interleave<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>logits_x <span class="token operator">=</span> logits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>logits_u <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>logits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>Lx<span class="token punctuation">,</span> Lu<span class="token punctuation">,</span> w <span class="token operator">=</span> criterion<span class="token punctuation">(</span>logits_x<span class="token punctuation">,</span> mixed_target<span class="token punctuation">[</span><span class="token punctuation">:</span>batch_size<span class="token punctuation">]</span><span class="token punctuation">,</span> logits_u<span class="token punctuation">,</span> mixed_target<span class="token punctuation">[</span>batch_size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> epoch<span class="token operator">+</span>batch_idx<span class="token operator">/</span>args<span class="token punctuation">.</span>train_iteration<span class="token punctuation">)</span>loss <span class="token operator">=</span> Lx <span class="token operator">+</span> w <span class="token operator">*</span> Lu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>反向梯度传播，结束。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Semi-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Virtual Adversarial Training文章解读+算法流程+核心代码详解</title>
    <link href="/2021/12/04/VAT/"/>
    <url>/2021/12/04/VAT/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Virtual-Adversarial-Training"><a href="#Virtual-Adversarial-Training" class="headerlink" title="Virtual Adversarial Training"></a>Virtual Adversarial Training</h1><p><em>本博客仅做算法流程疏导，具体细节请参见原文</em></p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="http://arxiv.org/abs/1704.03976">查看原文请点这里</a></p><h2 id="Github代码"><a href="#Github代码" class="headerlink" title="Github代码"></a>Github代码</h2><p><a href="https://github.com/9310gaurav/virtual-adversarial-training">Github代码请点这里</a></p><h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><h3 id="对比Adversarial-Training和VAT"><a href="#对比Adversarial-Training和VAT" class="headerlink" title="对比Adversarial Training和VAT"></a>对比Adversarial Training和VAT</h3><p>VAT(Virtual Adversarial Training)和adversarial training类似。对原始训练样本添加一个比较小的扰动，会大概率使分类器分类出现错误，而我们一般希望分类器将原始样本和添加一个较小扰动的样本（加噪版本）分为同一类别，所以将扰动版本的数据也作为训练样本添加进训练，这样就增加了分类器的泛化能力。</p><p>传统的adversarial training 的扰动方向一般通过损失函数确定，即取损失函数上升的方向添加一个扰动。无标记样本没有标签，就无法算损失函数，故传统方法不适用，所以一般的adversarial training仅在监督学习中使用较多，而virtual adversarial training的创新在于能在无标记样本上实现扰动的计算，因为没用使用标签进行运算，而是用模型预测的结果替代标签，类似于persudo label，这就是virtual的含义</p><h4 id="Adversarial-Training"><a href="#Adversarial-Training" class="headerlink" title="Adversarial Training"></a>Adversarial Training</h4><p>adversarial training的数学表达如下，其中样本及标记$(x,y)$，当前epoch模型的参数$\theta$:<br><strong>损失函数</strong>：$J(\theta)=\frac{1}{N}\sum^{N}<em>{i=1}L(x,\theta)$<br>其中，<strong>单项损失</strong>计算表达式为：$L(x,\theta)=D(y,p(y|x+r,\theta))$<br><strong>扰动方向</strong>：$r=argmax</em>{|r|&lt;\xi}D(y,p(y|x+r,\theta))$</p><p>简单叙述为：找到一个扰动$r$，且$r$的大小受限，即$|r|&lt;\xi$，使其损失函数$L(x,\theta)=D(y,p(y|x+r,\theta))$取最大值，即在此$r$下上升最多。</p><h4 id="VAT"><a href="#VAT" class="headerlink" title="VAT"></a>VAT</h4><p>同样形式的，virtual adversarial training 的数学表达式如下，其中其中样本及标记$(x,y)$，当前epoch模型的参数$\theta$，前一个epoch的模型参数为$\hat{\theta}$：<br><strong>损失函数</strong>同上形式：$J(\theta)=\frac{1}{N}\sum^N<em>{i=1}L(x,\theta)$<br><strong>单项损失</strong>表达式==不同==(LDS称为局部平滑度)：$L(x,\theta)=D(p(y|x,\hat\theta),p(y|x+r,\theta))=LDS(x,\theta)$<br><strong>扰动方向</strong>：$r=argmax</em>{|r|&lt;\xi}D(p(y|x,\theta),p(y|x+r,\theta))$</p><p>简单叙述为：找到一个扰动$r$，且$r$的大小受限，即$|r|&lt;\xi$，使其损失函数$LDS(x,\theta)$取的最大值，即在此$r$下上升最多。</p><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>代码核心就一个<strong>VAT_Loss</strong>的计算。整个框架的<strong>Loss=Classfier_Loss + VAT_Loss</strong>。其中<strong>Classfier_Loss</strong>损失函数为一般的监督网络的损失函数。<strong>VAT_Loss</strong>计算如下：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">vat_loss</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> ul_x<span class="token punctuation">,</span> ul_y<span class="token punctuation">,</span> xi<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">,</span> num_iters<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># find r_adv</span>    d <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>ul_x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> xi <span class="token operator">*</span>_l2_normalize<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        d <span class="token operator">=</span> Variable<span class="token punctuation">(</span>d<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        y_hat <span class="token operator">=</span> model<span class="token punctuation">(</span>ul_x <span class="token operator">+</span> d<span class="token punctuation">)</span>        delta_kl <span class="token operator">=</span> kl_div_with_logit<span class="token punctuation">(</span>ul_y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">)</span>        delta_kl<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> d<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> _l2_normalize<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    d <span class="token operator">=</span> Variable<span class="token punctuation">(</span>d<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r_adv <span class="token operator">=</span> eps <span class="token operator">*</span> d    <span class="token comment"># compute lds</span>    y_hat <span class="token operator">=</span> model<span class="token punctuation">(</span>ul_x <span class="token operator">+</span> r_adv<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delta_kl <span class="token operator">=</span> kl_div_with_logit<span class="token punctuation">(</span>ul_y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">)</span>    <span class="token keyword">return</span> delta_kl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>其中对<strong>r_adv</strong>的计算采用的是一种快速计算方法。具体理论请<a href="http://arxiv.org/abs/1704.03976">查阅原文</a><br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">v_loss <span class="token operator">=</span> vat_loss<span class="token punctuation">(</span>model<span class="token punctuation">,</span> inputs_All<span class="token punctuation">,</span> logits_All<span class="token punctuation">,</span> eps<span class="token operator">=</span>args<span class="token punctuation">.</span>epsilon<span class="token punctuation">)</span>loss <span class="token operator">=</span> v_loss<span class="token operator">+</span>ce_lossoptimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br>完整损失函数<strong>Loss=Classfier_Loss + VAT_Loss</strong>反向梯度传播更新网络即可。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Semi-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MeanTeacher文章解读+算法流程+核心代码详解</title>
    <link href="/2021/12/04/meanteacher/"/>
    <url>/2021/12/04/meanteacher/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MeanTeacher"><a href="#MeanTeacher" class="headerlink" title="MeanTeacher"></a>MeanTeacher</h1><p><em>本博客仅做算法流程疏导，具体细节请参见原文</em></p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://arxiv.org/abs/1703.01780">原文链接点这里</a></p><h2 id="Github-代码"><a href="#Github-代码" class="headerlink" title="Github 代码"></a>Github 代码</h2><p><a href="https://github.com/iSarmad/MeanTeacher-SNTG-HybridNet">Github代码点这里</a></p><h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><p><a href="https://blog.csdn.net/hjimce/article/details/80551721">论文解读点这里</a></p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/975ace19f51b4497a580900f56bdd3a8.png" alt="MeanTeacher算法流程图"></p><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_transform <span class="token operator">=</span> data<span class="token punctuation">.</span>TransformTwice<span class="token punctuation">(</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>       data<span class="token punctuation">.</span>RandomTranslateWithReflect<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.4914</span><span class="token punctuation">,</span> <span class="token number">0.4822</span><span class="token punctuation">,</span> <span class="token number">0.4465</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.2470</span><span class="token punctuation">,</span>  <span class="token number">0.2435</span><span class="token punctuation">,</span>  <span class="token number">0.2616</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   eval_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>       transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.4914</span><span class="token punctuation">,</span> <span class="token number">0.4822</span><span class="token punctuation">,</span> <span class="token number">0.4465</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.2470</span><span class="token punctuation">,</span>  <span class="token number">0.2435</span><span class="token punctuation">,</span>  <span class="token number">0.2616</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这是图像的预处理，TransformTwice可以读两个数据流。<br>在训练阶段，有：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> ema_input<span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>可以看到，通过train_transform出来的batch中，有两个数据流input和ema_input，其数据为同组数据加不同噪声后的形式，即算法流程中的$[X^{‘}_u,X^{‘}_s]$和$[X^{‘’}_u,X^{‘’}_s]$。每个数据流中包含了一定数量的有标记样本和无标记样本。target是这两个数据流的标签，其中无标记样本的标签为-1.<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">class_loss <span class="token operator">=</span> class_criterion<span class="token punctuation">(</span>model_out<span class="token punctuation">,</span> target_var<span class="token punctuation">)</span> <span class="token operator">/</span> minibatch_size<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">consistency_weight <span class="token operator">=</span> get_current_consistency_weight<span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>consistency_loss <span class="token operator">=</span> consistency_weight <span class="token operator">*</span> consistency_criterion<span class="token punctuation">(</span>model_out<span class="token punctuation">,</span> ema_logit<span class="token punctuation">)</span> <span class="token operator">/</span> minibatch_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br><strong>class_loss</strong>正如算法流程中的$Loss_1$，是stu模型输出结果和标签的CrossEntropyLoss；<strong>consistency_loss</strong>如算法流程中的$Loss_2$，是两个$[X^{‘}_u,X^{‘}_s]$和$[X^{‘’}_u,X^{‘’}_s]$的一致性损失，文章中直接选择的MSE损失函数。为了让模型训练更合理，$Loss_2$有一个渐增系数<strong>consistency_weight</strong>。<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># student 模型的更新</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>global_step <span class="token operator">+=</span> <span class="token number">1</span>update_ema_variables<span class="token punctuation">(</span>model<span class="token punctuation">,</span> ema_model<span class="token punctuation">,</span> args<span class="token punctuation">.</span>ema_decay<span class="token punctuation">,</span> global_step<span class="token punctuation">)</span>  <span class="token comment"># teacher 模型的更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><br><strong>student</strong>模型更新为$Loss=Loss_1+Loss_2$的反向梯度传播更新权值；<strong>teacher</strong>模型更新为当前<strong>student</strong>和上一个epoch的<strong>teacher</strong>模型的加权，即EMA平滑版本。</p><h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>算法比较简单，主要思想我觉得可以分为两部分：第一部分是原始样本的轻微扰动版本的预测结果应该与原样本属于同一类别；第二部分，希望通过模型的EMA版本作为分类更有可靠性的模型，即<strong>teacher</strong>来引导当前模型<strong>student</strong>模型训练，二者合并就是<strong>consistency_loss</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Semi-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mutual Information Neural Estimation梳理</title>
    <link href="/2021/12/04/MINEstimation/"/>
    <url>/2021/12/04/MINEstimation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mutual-Information-Neural-Estimation"><a href="#Mutual-Information-Neural-Estimation" class="headerlink" title="Mutual Information Neural Estimation"></a>Mutual Information Neural Estimation</h1><p><a href="https://arxiv.org/abs/1801.04062">原文</a><br>参考：<a href="https://ruihongqiu.github.io/posts/2020/07/mine/">https://ruihongqiu.github.io/posts/2020/07/mine/</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>互信息可以衡量两个随机变量之间的相关性：</p><script type="math/tex; mode=display">I(X;Z)=H(X)-H(X|Z)=H(Z)-H(Z|X)=H(X)+H(Z)-H(X,Z)</script><p>互信息量和KL散度的关系如下：</p><script type="math/tex; mode=display">I(X;Z)=\sum_{x\in \mathcal{X}}\sum_{z\in \mathcal{Z}}p(x,z)log\frac{p(x,y)}{p(x)p(y)}=D(p(x,y)||p(x)p(y))</script><p>但实际计算中，特别是对于高维空间来说，其边缘熵$H(X)$、$H(Z)$和条件熵$H(X|Z)$难以计算。<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/6caf0ece6feba752f03bdf353c8859f5.png" alt="f89025089ec5c780a5d7a6df7c0193e"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>作者给出了两种利用梯度下降算法逼近的互信息估计，分别是<strong>The Donsker-Varadhan representation</strong>和<strong>The f-divergence representation</strong>。</p><h3 id="The-Donsker-Varadhan-representation"><a href="#The-Donsker-Varadhan-representation" class="headerlink" title="The Donsker-Varadhan representation"></a>The Donsker-Varadhan representation</h3><script type="math/tex; mode=display">D_{KL}(\mathbb{P}||\mathbb{Q})=\sup\limits_{T:\Omega \rightarrow \mathbb{R}}\mathbb{E_{\mathbb{P}}}[T]-log(\mathbb{E_{\mathbb{Q}}}[e^T])</script><p>其中$\mathbb{P}$和$\mathbb{Q}$是两个任意分布，$T$是从样本空间$\Omega$映射到实数$\mathbb{R}$的任意函数。</p><p>证明见大佬<a href="https://ruihongqiu.github.io/posts/2020/07/mine/">Ruihong Qiu</a>中2.2节</p><h3 id="The-f-divergence-representation"><a href="#The-f-divergence-representation" class="headerlink" title="The f-divergence representation"></a>The f-divergence representation</h3><p>The f-divergence representation可以看做是The Donsker-Varadhan representation的弱化版本，由2.1和不等式$\frac{x}{e}&gt; log\mathcal{x}$易得。</p><h3 id="最终形式"><a href="#最终形式" class="headerlink" title="最终形式"></a>最终形式</h3><script type="math/tex; mode=display">I(X;Z)\geq I_{\Theta}(X,Z)=\sup\limits_{\theta\in\Theta}\mathbb{E}_{\mathbb{P}_{XZ}}[T_{\theta}]-log(\mathbb{E}_{\mathbb{P}_X\mathbb{P}_Z}[e^{T_{\mathbb{\theta}}}])</script><p>我们希望用一个可以利用梯度更新的神经网络模型来计算上式，则有：</p><script type="math/tex; mode=display">\hat{I(X;Z)_n}=\sup\limits_{\theta\in\Theta}\mathbb{E}_{\mathbb{P}^{(n)}_{XZ}}[T_{\theta}]-log(\mathbb{E}_{\mathbb{P}^{(n)}_X\mathbb{\hat{P}}^{(n)}_Z}[e^{T_{\mathbb{\theta}}}])</script><p>其中$T$是一个神经网络；$X$、$Z$是两个样本集。得到估计的梯度为：</p><script type="math/tex; mode=display">\hat{G}_B=\mathbb{E}_B[\nabla_{\theta}T_{\theta}]-\frac{\mathbb{E}_B[\nabla_{\theta}T_{\theta}e^{T_{\theta}}]}{\mathbb{E}_B[e^{T_{\theta}}]}</script><p>但是这种方式是有偏的。可以通过滑动平均来估计$\mathbb{E}<em>B[e^{T</em>\theta}]$</p><p>完整的过程如下：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/2478fae70b9b63793c0df71f8beabd17.png" alt="image-20210906185214958"></p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Self-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu+Anaconda+Pycharm从零开始完全配置</title>
    <link href="/2021/12/04/pythonenvs1/"/>
    <url>/2021/12/04/pythonenvs1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-Anaconda-Pycharm"><a href="#Ubuntu-Anaconda-Pycharm" class="headerlink" title="Ubuntu+Anaconda+Pycharm"></a>Ubuntu+Anaconda+Pycharm</h1><h2 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h2><p><a href="https://pan.baidu.com/s/1Kkmc94VEe7eNREiRvFHYkQ">分享我的版本VMware15.5</a></p><p>提取码：3cxe</p><p>一路傻瓜式安装</p><h2 id="下载Ubuntu"><a href="#下载Ubuntu" class="headerlink" title="下载Ubuntu"></a>下载Ubuntu</h2><p>去阿里的镜像源下载更快，<a href="http://mirrors.aliyun.com/ubuntu-releases/">点击这里</a>，我使用的是18.04.5</p><p>下载的时候注意选择64位或者32位（在18.04.5中都是64位的）。并且牢记，这对后面安装java jdk有影响。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/7ad7fd0e3ef8d2f6d687bcfd8df788d1.png" alt="image-20210911141018838"></p><h2 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h2><p>打开VMware，选择主页—&gt;创建新的虚拟机</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/0b82637d87adf497934bb258f7d7f5b4.png" alt="image-20210911141238134"></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/1631340809(1).jpg" alt="1631340809(1)" style="zoom:50%;" width="60%" /></p><p>选择自定义，下一步</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210911141449372.png" alt="image-20210911141449372" style="zoom: 50%;" width="60%"  /></p><p>默认设置，下一步</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/1631340961(1).jpg" alt="1631340961(1)" style="zoom:10%;" width="60%" /></p><p>选择稍后安装操作系统</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/a0e14eb9a1f248a084b999dc510f88e9.jpg" alt="请添加图片描述"></p><p>选择好客户机操作系统和版本</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/04bd7cc833554833be86dc74cecf44e5.jpg" alt="请添加图片描述"></p><p>选择名字和位置</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/05003a641be50ccdc7b57c0018d6ed8d.png" alt="image-20210911141939579"></p><p>处理器配置，这个需要根据个人的业务需求和电脑配置分配</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/a193d60e4440b59adbd97316c9c9df40.png" alt="image-20210911142028889"></p><p>虚拟机内存，分配大小也需要根据业务需求和电脑配置决定，太小了虚拟机会比较卡</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/d9590b8b0ea60d2c10685bc4f56959f1.png" alt="image-20210911142109837"></p><p>网络类型，默认</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/ee7859717696af99d153d4bd091d212c.png" alt="image-20210911142134408"></p><p>IO默认</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/1e4e1225d0a6a518438abc52edaf52eb.png" alt="image-20210911142153119"></p><p>磁盘默认</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/dbd935507bf7bb03ca2145105b2fa06c.png" alt="image-20210911142213674"><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/fdf81c9f3b4c4e5aa63e37f5c069385c.jpg" alt="请添加图片描述"></p><p>创建新虚拟磁盘</p><p>磁盘大小看个人需求</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/3e035a41326e42a867ced8d63acdb9d3.png" alt="image-20210911142405386"></p><p>磁盘文件的存储地址，默认即可</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/72341f4e6e3a4d2fa07aee8d3371cf62.png" alt="在这里插入图片描述"></p><p>选择自定义硬件，在新CD/DVD中选择使用ISO映像文件，选择之前下载的Ubuntu操作系统，然后点右下角关闭，点击完成。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/41762965302b4f21945f9227aaa65584.jpg" alt="请添加图片描述"></p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p><strong>安装系统时容易出现安装界面显示不完全，导致continue按钮无法选中，可以按住alt键拖动窗口即可。</strong></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/060accad7e28f04cd82ef62f7dffa127.png" alt="image-20210911142826563"></p><p>选择虚拟机，点击开启此虚拟机</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/7b1ddc722f134c2dab8411f8ad395ad5.png" alt=""></p><p>建议直接装英文版，中文字符使用不方便。点击Install Ubuntu</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/d6ec3004af3b4496d6181e4c6e224d5a.png" alt="image-20210911143054598"></p><p>选择键盘，就选英文键盘或者中文键盘都可以。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/8bf9155f4fc323d6d2522d8919c2b9bd.png" alt="image-20210911143209246"></p><p>默认安装一些软件</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/8aeb4c04bedbab3ff66aa2859f4fe64d.png" alt="image-20210911143349971"></p><p>选择默认的安装方式，会将磁盘文件中的数据给清楚（磁盘文件指的是安装Ubuntu的那个50G磁盘文件）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/78c41df3879144a298aab3be46163583.png" alt=""></p><p>continue开始安装，选择城市</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/4299c74e0a568ad2330f3b39e1de792f.png" alt="image-20210911143642255"></p><p>设置账号密码</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/9efd1b042ff6eefc19e7a6605bdb09a0.png" alt="image-20210911143701815"></p><p>安装完成后要求重启，完成安装。</p><h2 id="Ubuntu-全屏，VMware-tools安装"><a href="#Ubuntu-全屏，VMware-tools安装" class="headerlink" title="Ubuntu 全屏，VMware tools安装"></a>Ubuntu 全屏，VMware tools安装</h2><p>安装完之后是非全屏的，需要安装VMware tools才能全屏显示</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/105ec533b9e24e5c9abeb54fd4962ab3.png" alt="在这里插入图片描述"></p><p>查看VMware tools的位置</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/48756f63548d3435d9f3444cf6481d95.png" alt="image-20210911145415327"></p><p>用Terminal（ctrl+alt+t打开）新建一个文件夹以供VMware tools 解压，建在哪都可以</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd Desktopmkdir tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>然后右键VMware tools 压缩包，解压到新建的文件夹中</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/0f51ede49666ebe160f76dffdb621352.png" alt="image-20210911145859028"></p><p>如果显示Not Enough free Space…就先将压缩文件移到tools文件夹中再直接解压。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/bd15a253c2837d5bbb8e66d46c4d3c2c.png" alt="image-20210911150013994"></p><p>然后进入解压后的文件夹，在此页面打开Terminal，进入超级用户</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo su<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后输入密码，登录超级用户</p><p>然后运行安装程序：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.&#x2F;vmware-install.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>输入yes开始安装，一路回车</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/cb67c6c1b897ccf02b066d5ac4dba2a7.png" alt="image-20210911150651319"></p><p>看到Enjoy—the Vmware team就安装完成了，全屏的时候就已经可以自动调整大小了。</p><h2 id="安装java-jdk"><a href="#安装java-jdk" class="headerlink" title="安装java jdk"></a>安装java jdk</h2><p>jdk包括了jre和jvm，分别是Java运行环境和Java虚拟机安装pycharm需要用得到，装pycharm和Anaconda之前先安装这个。</p><p>先在Oracle官网下载对应的jdk，个人觉得jdk8已经够用了，新的无非是多一些新特性，暂时用不上。</p><p><a href="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-P3hK6zd6-1631348653338">下载地址点这里</a>(C:\Users\joffrey\AppData\Roaming\Typora\typora-user-images\image-20210911151030631.png)][外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-w2Jxy34Q-1631348653339)(C:\Users\joffrey\AppData\Roaming\Typora\typora-user-images\image-20210911151030631.png)])</p><p>注意下载jdk，jdk里面带有jre，不要下错了。另外要注意是64位还是32位，下错了会出现以下错误：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/6adfa37ec30141a85239af03bd35cf7d.png" alt="image-20210910154704281"></p><p>还是用jdk8</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/73d98e58baaddd482d8e692f1892fe58.png" alt="image-20210911151144787"></p><p>先新建一个文件夹，存储解压后的文件</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd Desktopmkdir jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>然后解压文件到Desktop/jdk文件夹</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo tar zxvf ~&#x2F;Downloads&#x2F;jdk-8u301-linux-x64.tar.gz -C ~&#x2F;Desktop&#x2F;jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/3b780ae7f968f8a5cc8660fe7f2e0ccd.png" alt="image-20210911151920137"></p><p>添加环境变量：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo gedit ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>并在打开的文件中输入，第一行路径需要根据个人的解压路径填写</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;home&#x2F;lc&#x2F;Desktop&#x2F;jdk&#x2F;jdk1.8.0_301export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre export CLASSPATH&#x3D;:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后使环境变量生效:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>最后查看是否完成</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/a000c5813faf481be8027494ffee14bc.png" alt="image-20210911152700050"></p><p>有版本信息就说明完成了。</p><h2 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h2><p><a href="https://www.jetbrains.com/pycharm/download/#section=linux">官网下载</a></p><p>解压下载的文件夹到目录，我这里是解压到Pycharm文件夹下：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mkdir ~&#x2F;Pycharmsudo tar zxvf ~&#x2F;Downloads&#x2F;pycharm-professional-2021.2.1.tar.gz -C ~&#x2F;Pycharm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>进入文件夹/home/lc/Pycharm/pycharm-2021.2.1/bin 运行pycharm.sh</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home&#x2F;lc&#x2F;Pycharm&#x2F;pycharm-2021.2.1&#x2F;binsh pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/f9b266960a55dbd98b88d5f04fa38b36.png" alt="image-20210911153916643"></p><p>选择continue</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/e8564be8122306f39d1220160b33fce9.png" alt="image-20210911153947829"></p><p>初次安装，不导入设置。剩下的就是激活了。网上有很多激活教程，或者免费试用30天，或者学生认证都可以。</p><h3 id="配置快捷按钮"><a href="#配置快捷按钮" class="headerlink" title="配置快捷按钮"></a>配置快捷按钮</h3><p>在/usr/share/applications 创建一个名为pycharm.desktop的文件</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;applicationssudo gedit pycharm.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>在打开的文件中粘贴</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]Version&#x3D;1.0Type&#x3D;ApplicationName&#x3D;PycharmIcon&#x3D;&#x2F;home&#x2F;lc&#x2F;Pycharm&#x2F;pycharm-2021.2.1&#x2F;bin&#x2F;pycharm.pngExec&#x3D;sh &#x2F;home&#x2F;lc&#x2F;Pycharm&#x2F;pycharm-2021.2.1&#x2F;bin&#x2F;pycharm.shMimeType&#x3D;application&#x2F;x-py;Name[en_US]&#x3D;pycharm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>主要注意 Icon是图标，Exec 执行的命令，其中的路径要改。</p><p>保存后就可以在所有的程序中看到pycharm了</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/44c46c71f28466a08a05445515f58ddd.png" alt="image-20210911154907027"></p><h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><p><a href="https://www.anaconda.com/products/individual#Downloads">官网下载</a></p><p>下载好了执行shell脚本</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">bash Anaconda3-2021.05-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/1d05a7e0fd993b8f48185336b560f047.png" alt="image-20210911155401162"></p><p>然后一直回车，直到左下角没有—More—</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/7b4686cc3e10a564a2e4afaf2ae19ca1.png" alt="image-20210911155458129"></p><p>输入yes，回车</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/4622d61c5398e2a0a117908584bdc118.png" alt="image-20210911155529304"></p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/24f17f4634fe18a9406ea0ac6c2d18e6.png" alt="image-20210911155646959"></p><p>添加环境变量，路径根据自己的修改</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">echo &#39;export PATH&#x3D;&quot;&#x2F;home&#x2F;lc&#x2F;anaconda3&#x2F;bin&#x2F;:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.bashrcsource ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>完成后有两个步骤，第一换源，第二做启动图标，第三创建新环境和激活</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;conda config --append channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;fastai&#x2F;conda config --append channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;pytorch&#x2F;conda config --append channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="启动图标"><a href="#启动图标" class="headerlink" title="启动图标"></a>启动图标</h3><p>类似于pycharm</p><p>创建一个文件：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;applications&#x2F;sudo gedit anaconda.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>然后在打开的文件中粘贴如下，注意修改Icon和Exec路径：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]Version&#x3D;1.0Name&#x3D;AnacondaType&#x3D;ApplicationGenericName&#x3D;AnacondaComment&#x3D;Scientific Python Development Environment - Python3Exec&#x3D;&#x2F;home&#x2F;lc&#x2F;anaconda3&#x2F;bin&#x2F;anaconda-navigatorCategories&#x3D;Development;Science;IDE;Qt;Education;Icon&#x3D;&#x2F;home&#x2F;lc&#x2F;anaconda3&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;anaconda_navigator&#x2F;static&#x2F;images&#x2F;anaconda-icon-256x256.pngTerminal&#x3D;falseStartupNotify&#x3D;trueMimeType&#x3D;text&#x2F;x-python;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/df1750433d50f7a00c23b0547be0fbf6.png" alt="image-20210911161538078"></p><h3 id="创建新环境并激活"><a href="#创建新环境并激活" class="headerlink" title="创建新环境并激活"></a>创建新环境并激活</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda create --name xxx python&#x3D;3.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>创建一个名字叫做xxx 的python版本为3.8的环境。我创造的环境名叫mytorch</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/ac71dda9b9df98464922c6def590ac46.png" alt="image-20210911161839275"></p><p>通过如下命令来激活环境</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda activate mytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/394851edbfa2fef606abc4b98908cb28.png" alt="image-20210911161908586"></p><h2 id="Anaconda和Pycharm联合使用"><a href="#Anaconda和Pycharm联合使用" class="headerlink" title="Anaconda和Pycharm联合使用"></a>Anaconda和Pycharm联合使用</h2><p>参考之前的windows系统中的做法。即将pycharm中的编译器选择位anaconda环境的python编译器</p>]]></content>
    
    
    <categories>
      
      <category>envs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>envs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Representation Learning With Contrastive Predictive Coding梳理</title>
    <link href="/2021/12/04/cpc/"/>
    <url>/2021/12/04/cpc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一种通用的无监督学习方法——对比预测编码。通过自回归模型预测潜在空间（高维空间）的未来，以学习高级表征。在训练阶段不涉及具体下游任务。</p><p><a href="https://arxiv.org/pdf/1807.03748.pdf">原文</a><br>参考：<a href="https://zhuanlan.zhihu.com/p/129076690">https://zhuanlan.zhihu.com/p/129076690</a></p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><ol><li>将高维数据压缩到更加紧密的潜在嵌入空间，这个空间中条件预测更容易建模。</li><li>在这个潜在空间中使用强大的<strong>自回归</strong>模型来做多步未来预测。</li><li>损失函数依靠噪声对比估计，这是与自然语言模型中用于学习词嵌入类似的方式，需要整个模型以端到端的形式进行训练。将最终的模型（对比预测编码，CPC）用在了很多不同的数据模态中，包括图像、语音、自然语言和强化学习，结果表明同样的机制在每一个领域中都学到了有趣的高级表征，而且优于其他方法。</li></ol><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/be8d1c3abdacb2f159997d74695c8d11.png" alt="image-20210908124633513"></p><p>对于输入样本$x<em>t$，有一个非线性编码器$g</em>{enc}$将其映射为潜在表示序列$z<em>t=g</em>{enc}(x<em>t)$；对于$t$时刻之前的所有$z</em>{t’},t’&lt;t$有一个自回归模型(e.g. GRU)$g<em>{ar}$推断得到当前时刻的$c_t$，利用对当前时刻的推测$c_t$，推断(用一个矩阵$W_k$进行映射)得到后面几个时刻的潜在表示序列的映射<strong>（预测值）</strong>$z’</em>{t+1}$、$z’<em>{t+2}$、$z’</em>{t+3}…$；将真实的$x<em>{t+1}$、$x</em>{t+2}$、$x<em>{t+3}…$通过$g</em>{enc}$得到的潜在表示序列<strong>（真实值）</strong>做损失函数，达到收敛。最后利用$c_t$完成下游任务。</p><h2 id="衡量-x-和-c-的相关性"><a href="#衡量-x-和-c-的相关性" class="headerlink" title="衡量$x$和$c$的相关性"></a>衡量$x$和$c$的相关性</h2><p>互信息可以很好的衡量相关性：</p><script type="math/tex; mode=display">I(x;c)=\sum\limits_{x,c}p(x,c)log\frac{p(x|c)}{p(x)}</script><p>但是由于不方便计算（可见MINE.md），作者采用一个正比于$\frac{p(x|c)}{p(x)}$的函数$f_k(x,c)$来代替，即：</p><script type="math/tex; mode=display">f_k(x_{t+k}, c_t)\propto \frac{p(x_{t+k}|c_t)}{p(x_{t+k})}</script><p>然后这个$f<em>k(x</em>{t+k}, c_t)$函数的具体计算表达式为:</p><script type="math/tex; mode=display">f_k(x_{t+k}, c_t)=exp(z^T_{t+k}W_kc_t)</script><p>我觉得应该才开看，第一步是$W<em>k^Tz</em>{t+k}$，用一个Linear层将$z<em>{t+k}$映射到与$c_t$同Size；第二步做$W_k^Tz</em>{t+k}$和$c<em>t$的内积，即$(W_k^Tz</em>{t+k})^T$$c<em>t$，展开为$z^T</em>{t+k}W_kc_t$；第三步做指数运算。</p><h2 id="衡量互信息"><a href="#衡量互信息" class="headerlink" title="衡量互信息"></a>衡量互信息</h2><p>经过一系列证明，可以得到：</p><script type="math/tex; mode=display">I(x_{t+k};c_t)\geq log(N)-\mathcal{L}_N</script><p>其中$\mathcal{L}_N$为：</p><script type="math/tex; mode=display">\mathcal{L}_N=-\mathop{\mathbb{E}}\limits_{X}[log\frac{f_k(x_{t+k}, c_t)}{\sum_{x_j\in X}f_k(x_j,c_t)}]</script><p>可见最小化$\mathcal{L}_N$即可完成最大化互信息量的下界。</p><p>其中，$p(x_{t+k},c_t)$ 指的是正在选用信号的片段$x_t$（正样本），而$p(x_j)$指的是我们可以随便从其他的声音信号里选择一个片段（负样本）。这就是<strong>对比</strong>的体现。</p><p>对$\mathcal{L}_N$反向梯度传播即可完成整个算法。</p><p>文章中还涉及了对图像、自然语言、语音的不同形式的信号的建模，有需要可以查看原文。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Self-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-星座图</title>
    <link href="/2021/12/04/constellation/"/>
    <url>/2021/12/04/constellation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="星座图"><a href="#星座图" class="headerlink" title="星座图"></a>星座图</h1><p>已知信号以IQ路表示：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/92c9c4adef9ca809931193d74d875a22.png" alt="IMG_1101"></p><p>注意：</p><p>①相邻符号之间码元变化１bit（格雷码）</p><p>②相邻符号点之间的欧式距离越大，抗噪声能力越强</p><p>③随着SPS(每个符号的采样点个数)增加，星座图显得越“乱”。因为一个符号的相位和幅度信息增加了，在星座图上的点数也增多了，符号与符号之间的跳变变得平滑。如下图可见：</p><p>QPSK星座图符号位置：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/b50efc495629ea035ec664c76517790b.png" alt="image-20210815164210448"></p><p>SPS=1，SNR=18dB，QPSK星座图:</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/f92376c8c9c8bdab82cc5ef29ff05741.png" alt="image-20210815164329496"></p><p>SPS=8，SNR=18dB，QPSK星座图:</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/41f4fa54c7dc87329d6f03b81473b78a.png" alt="image-20210815164424105"></p><p>SPS=32，SNR=18dB，QPSK星座图:</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/9001b3bf7d18301c23add6778f21da9c.png" alt="image-20210815164642830"><br>肉眼观察SPS=1最明显，调制识别正确率和SPS有没有关系呢？</p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>signal processing</tag>
      
      <tag>communication</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备-卷积/滤波及Matlab实现</title>
    <link href="/2021/12/04/conv/"/>
    <url>/2021/12/04/conv/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通信基础-卷积-滤波-原理及Matlab实现"><a href="#通信基础-卷积-滤波-原理及Matlab实现" class="headerlink" title="通信基础-卷积/滤波(原理及Matlab实现)"></a>通信基础-卷积/滤波(原理及Matlab实现)</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>若有两个在定义域上可积的函数$f(x)$和$g(x)$，波形如下：</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/a9424a77d482f4dc01ddfa01d05be699.png" alt="55f37ca13c8e2d21fb00aa2bf65c6d1"></p><p>则卷积的定义为：</p><p>连续形式：<script type="math/tex">f(x)*g(x)=\int^{\infty}_{-\infty}g(\tau)f(x-\tau)</script></p><p>离散形式：<script type="math/tex">f(n)*g(n)=\sum_{i=-\infty}^{\infty}g(i)f(n-i)</script></p><p>看起来略微有点复杂，其物理意义就是将可积函数$f(x)$前后翻转颠倒（卷积中的-卷）；再进行相乘求积分/求和（卷积中的-积）。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/08aba5b10d5b7cd6f3b3736b7a667b44.png" alt="f61355f876f0b6176d5b3f2767a0395"></p><p>对应的步骤拆解为上图，可以把$g(x)$看做一个窗，这个窗固定不动，$f(x)$在翻转后，从左到右进入窗，并与窗对应点相乘并求和/积分，当$f(x)$穿过整个窗后，卷积运算结束。</p><h2 id="Matlab仿真"><a href="#Matlab仿真" class="headerlink" title="Matlab仿真"></a>Matlab仿真</h2><p>有两种实现方式，第一种是调用其filter函数；第二种是手动运算。</p><h3 id="滤波器设计"><a href="#滤波器设计" class="headerlink" title="滤波器设计"></a>滤波器设计</h3><p>设计一个简单的低通滤波，分离开2KHz和4KHz。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/486b7107a74144818d84642a5d8e0b31.png" alt="在这里插入图片描述"></p><h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 测试卷积</span>clc<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>Fs <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span> <span class="token comment">%采样率</span>fc1 <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">%第一个正弦波频率2Khz</span>fc2 <span class="token operator">=</span> <span class="token number">4000</span><span class="token punctuation">;</span><span class="token comment">% 第二个正弦波频率4Khz</span>N <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span><span class="token comment">%fft点数</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">/</span>Fs<span class="token operator">:</span><span class="token number">100</span><span class="token operator">/</span>Fs<span class="token punctuation">;</span><span class="token comment">%时间序列</span>y1 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span>fc1<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 第一个正弦波</span>y2 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span>fc2<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 第二个正弦波</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'f=2KHz正弦波'</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'f=4KHz正弦波'</span><span class="token punctuation">)</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span>y_mix <span class="token operator">=</span> y1<span class="token operator">+</span>y2<span class="token punctuation">;</span><span class="token comment">% 混合信号</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_mix<span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'2KHz和4KHz信号混合后的波形'</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span>Fs<span class="token operator">/</span>N<span class="token operator">:</span><span class="token punctuation">(</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>N<span class="token operator">*</span>Fs<span class="token punctuation">;</span> <span class="token comment">%频率序列</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">fft</span><span class="token punctuation">(</span>y_mix<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">% 做N点fft</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Hz'</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'混合后的频谱图'</span><span class="token punctuation">)</span><span class="token comment">%使用自带filter函数滤波</span>filter_coffe <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'filter_coffe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 读取滤波器系数，可直接使用filter designer设计低通滤波器</span>filter_coffe <span class="token operator">=</span> filter_coffe<span class="token punctuation">.</span>Num<span class="token punctuation">;</span>filter_after <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>filter_coffe<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> y_mix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 使用filter函数滤波</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> filter_after<span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'使用filter函数滤波后时域图'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">fft</span><span class="token punctuation">(</span>filter_after<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'使用filter函数滤波后频域图'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Hz'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><p>过程就和上面第一点中讲的完全相同，先翻转一个信号，再依点送入并和另外一个信号对应相乘求和/积分。</p><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 自己定义滤波 先倒过来，然后一步一步往里推数据，再相乘求和。数据窗长应该和滤波器系数长度相同</span>fft_data <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>filter_coffe<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%准备数据窗长</span>y_fft_in <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>filter_coffe<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">length</span><span class="token punctuation">(</span>y_mix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 先准备一个全0序列</span><span class="token function">y_fft_in</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>filter_coffe<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">y_mix</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 给全0序列后面填翻转后的数据。整个过程等于在给原始数据前面补0</span>y_fft_out <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>y_mix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 准备输出数据的位置</span><span class="token keyword">for</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>y_mix<span class="token punctuation">)</span>       <span class="token function">y_fft_out</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">=</span> filter_coffe<span class="token operator">*</span><span class="token function">y_fft_in</span><span class="token punctuation">(</span>step<span class="token operator">:</span>step<span class="token operator">+</span><span class="token function">length</span><span class="token punctuation">(</span>filter_coffe<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%相乘求和</span><span class="token keyword">end</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_fft_out<span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'手动实现滤波的时域图'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">fft</span><span class="token punctuation">(</span>y_fft_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'手动实现滤波的频域图'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Hz'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>先产生两个频率的正弦波，并混合。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210928215145850.png" width="60%"><br>混合后的时域和频域波形<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210928215156905.png" width="60%"><br>使用filter函数滤波结果<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210928215206566.png" width="60%"><br>使用自定义方法滤波:<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210928215215585.png" width="60%"></p>]]></content>
    
    
    <categories>
      
      <category>basic knowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>signal processing</tag>
      
      <tag>communication</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Word/latex插入矢量图</title>
    <link href="/2021/12/04/wordlatex2pdf/"/>
    <url>/2021/12/04/wordlatex2pdf/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="制作论文插图"><a href="#制作论文插图" class="headerlink" title="制作论文插图"></a>制作论文插图</h2><p>有人喜欢用visio，有人喜欢用drawio，我就不一样了，我喜欢的drawio+viso。这也没办法。drawio画图舒服，但是导出的矢量图插入word有bug，<a href="https://desk.draw.io/support/solutions/articles/16000042487">详情见这里</a>，但是我试了没有用，所以只能用drawio画好后，用visio打开，调整一下可能变化的格式，然后导出矢量图插入word。</p><h2 id="visio调整格式"><a href="#visio调整格式" class="headerlink" title="visio调整格式"></a>visio调整格式</h2><p>假如说现在已经在drawio画好了图，如下：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/91f772eb97cb4b36a0deeb1110858011.png" alt="在这里插入图片描述"><br>保存为.svg文件<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/70a7bd2998054a5c98e28b7e9df889a1.png" alt="在这里插入图片描述"><br>然后用visio打开，如下：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/0dfc294f0dd94f90812cf019edfae868.png" alt="在这里插入图片描述"><br>发现有个主要问题，就是用latex打的公式在visio中不能识别。我在visio和word套件中都是用的AxMath插件，类似于Mathtype。现在重新打公式。插入对象AxMath:<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/9e8e93b5ac3d4d139d06b9be8f5c3646.png" alt="在这里插入图片描述"><br>完成后结果如下：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/de2bed6d89574ad781c8c8d9c1b79980.png" alt="在这里插入图片描述"><br>删掉周围的空白部分<br>①在空白处右键选择显示ShapeSheet<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/1e23f934a7ef417cb613b6f758775ad6.png" alt="在这里插入图片描述"><br>②将参数改为如下所示：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/9a8699c59eb04682b43eac6763a1f086.png" alt="在这里插入图片描述"><br>③选择设计-&gt;大小-&gt;适应绘图<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/dcc9bd31b5374770bfeac8e08787f0b5.png" alt="在这里插入图片描述"><br>得到了一个没有白边的图：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/9734dcf8d4cd447bb6f106171784b375.png" alt="在这里插入图片描述"></p><p>然后就是保存为矢量图，我习惯用.emf文件，不容易出问题。</p><h2 id="在word中插入"><a href="#在word中插入" class="headerlink" title="在word中插入"></a>在word中插入</h2><p>就如同插入图片，直接插入就可以</p><h2 id="转pdf"><a href="#转pdf" class="headerlink" title="转pdf"></a>转pdf</h2><p>转为pdf容易出现问题，<del>最好装上Adobe套件</del>：建议直接用系统自带的pdf打印机打印pdf，这样基本上不会出问题。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/70b98db116e54f8c956fccbb28f21a3a.png" alt="在这里插入图片描述"><br>选择另存为Adobe PDF即可。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果选择的.svg，转为pdf后会出现公式模糊；不使用Adobe套件，矢量图的字体会放得极大，完全失真</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>有时候用python画好的图，只需要保存为.svg格式：<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'Acc with SNR.svg'</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br>直接插入word是不行的，线条会乱掉。解决办法是下一个<a href="https://inkscape.org/">inkscape</a>然后直接打开python导出的.svg矢量图。选中图像主体，按<code><strong>ctrl</strong>+<strong>shift</strong>+<strong>R</strong></code>,去除白边之后再另存为.emf文件即可。</p><h1 id="LaTex插入矢量图"><a href="#LaTex插入矢量图" class="headerlink" title="LaTex插入矢量图"></a>LaTex插入矢量图</h1><h2 id="制作矢量图"><a href="#制作矢量图" class="headerlink" title="制作矢量图"></a>制作矢量图</h2><p>visio画好图之后，另存为pdf。<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/c38ea1b813da42d8be1dd2b2bddc6077.png" alt="在这里插入图片描述"></p><h2 id="使用inkscape编辑"><a href="#使用inkscape编辑" class="headerlink" title="使用inkscape编辑"></a>使用inkscape编辑</h2><p>inkscape导入的pdf图有两个问题，第一是有黑色的边框；第二是有白边。我找到一种简单粗暴的解决方法：<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/dbdb92b8f7c54a54a8afbe9fdb9d5752.png" alt="在这里插入图片描述"></p><ol><li>先用inkscape打开pdf图<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/b9baa2037d8247418842a55a8ab2bed9.png" alt="在这里插入图片描述"></li><li>选中要保存的主体并直接复制，<img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/b399e488cbcd43b5a6272ce53e445701.png" alt="在这里插入图片描述"></li><li>然后新建一个inkscape文档，直接粘贴，并在选中粘贴内容的情况下按<code><strong>ctrl</strong>+<strong>shift</strong>+<strong>R</strong></code>,去除白边之后再另存为.eps文件即可.<br><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/4847c3863aee42a99d839d376001ea2c.png" alt="在这里插入图片描述"></li></ol><h1 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h1><p>在word中推荐使用emf，在latex中推荐使用eps</p>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>latex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python工具箱</title>
    <link href="/2021/12/04/pythonutils/"/>
    <url>/2021/12/04/pythonutils/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="记录常用的一些工具代码"><a href="#记录常用的一些工具代码" class="headerlink" title="记录常用的一些工具代码"></a>记录常用的一些工具代码</h1><h2 id="遍历某文件夹下的所有文件路径（递归）"><a href="#遍历某文件夹下的所有文件路径（递归）" class="headerlink" title="遍历某文件夹下的所有文件路径（递归）"></a>遍历某文件夹下的所有文件路径（递归）</h2><p>可以用来对某个数据集进行批量处理。这里只返回所有文件的路径， 并存储到一个list.txt文件中。<br><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_file_path</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> txt<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dir_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">for</span> dp <span class="token keyword">in</span> dir_path<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            get_file_path<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">,</span> txt<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            txt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><h2 id="np-savez保存后的读取"><a href="#np-savez保存后的读取" class="headerlink" title="np.savez保存后的读取"></a>np.savez保存后的读取</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">val_set_all <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'savemodel/fine_tune_test_set.npz'</span><span class="token punctuation">,</span> allow_pickle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> val_set_all<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    val_set_all<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val_set_all<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="JS散度"><a href="#JS散度" class="headerlink" title="JS散度"></a>JS散度</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">loss_js</span><span class="token punctuation">(</span>p_output<span class="token punctuation">,</span> q_output<span class="token punctuation">,</span> get_softmax<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KLDivLoss <span class="token operator">=</span> nn<span class="token punctuation">.</span>KLDivLoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'batchmean'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> get_softmax<span class="token punctuation">:</span>        p_output <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>p_output<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        q_output <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>q_output<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    mean_output <span class="token operator">=</span> <span class="token punctuation">(</span>p_output <span class="token operator">+</span> q_output<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>KLDivLoss<span class="token punctuation">(</span>p_output<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mean_output<span class="token punctuation">)</span> <span class="token operator">+</span> KLDivLoss<span class="token punctuation">(</span>q_output<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mean_output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="pytorch-设置随机种子"><a href="#pytorch-设置随机种子" class="headerlink" title="pytorch 设置随机种子"></a>pytorch 设置随机种子</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seed_torch</span><span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">1029</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'PYTHONHASHSEED'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span> <span class="token comment"># 为了禁止hash随机化，使得实验可复现</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment"># if you are using multi-GPU.</span>    torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>    torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Pytorch梯度裁剪"><a href="#Pytorch梯度裁剪" class="headerlink" title="Pytorch梯度裁剪"></a>Pytorch梯度裁剪</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_norm<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> norm_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_norm<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> norm_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="matplotlib写中文"><a href="#matplotlib写中文" class="headerlink" title="matplotlib写中文"></a>matplotlib写中文</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="多个list按其中一个排序，其余的跟着变"><a href="#多个list按其中一个排序，其余的跟着变" class="headerlink" title="多个list按其中一个排序，其余的跟着变"></a>多个list按其中一个排序，其余的跟着变</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">u_idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>u_idx<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="绘制混淆矩阵"><a href="#绘制混淆矩阵" class="headerlink" title="绘制混淆矩阵"></a>绘制混淆矩阵</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">plot_confusion_matrix</span><span class="token punctuation">(</span>cm<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Confusion Matrix'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Blues<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>cm<span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'nearest'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cmap<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>    xlocations <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>xlocations<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>xlocations<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'True label'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Predicted label'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showmatrix</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> titlename<span class="token punctuation">)</span><span class="token punctuation">:</span>    tick_marks <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span>    plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    cm <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    cm_normalized <span class="token operator">=</span> cm<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span> <span class="token operator">/</span> cm<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>    <span class="token comment"># 混淆矩阵</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cm_normalized<span class="token punctuation">)</span>    dd <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cm_normalized<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cm_normalized<span class="token punctuation">[</span>i<span class="token punctuation">,</span> i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span>    max_c <span class="token operator">=</span> cm_normalized<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    min_c <span class="token operator">=</span> cm_normalized<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'result/matrixdata.npy'</span><span class="token punctuation">,</span> dd<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>    ind_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>ind_array<span class="token punctuation">,</span> ind_array<span class="token punctuation">)</span>    <span class="token keyword">for</span> x_val<span class="token punctuation">,</span> y_val <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> cm_normalized<span class="token punctuation">[</span>y_val<span class="token punctuation">]</span><span class="token punctuation">[</span>x_val<span class="token punctuation">]</span>        <span class="token keyword">if</span> c <span class="token operator">></span> <span class="token number">0.01</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token operator">></span> <span class="token number">0.5</span><span class="token operator">*</span><span class="token punctuation">(</span>max_c<span class="token operator">+</span>min_c<span class="token punctuation">)</span><span class="token punctuation">:</span>                plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">,</span> <span class="token string">"%0.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">,</span> <span class="token string">"%0.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>tick_marks<span class="token punctuation">,</span> minor<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>tick_marks<span class="token punctuation">,</span> minor<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">'minor'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>gcf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>bottom<span class="token operator">=</span><span class="token number">0.15</span><span class="token punctuation">)</span>    plot_confusion_matrix<span class="token punctuation">(</span>cm<span class="token operator">=</span>cm_normalized<span class="token punctuation">,</span> title<span class="token operator">=</span>titlename<span class="token punctuation">,</span> labels<span class="token operator">=</span>labels<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'result/confusionmatrix.svg'</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'svg'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后在需要绘制的地方</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">showmatrix<span class="token punctuation">(</span>val_label<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Confusion matrix'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="字典数据读取-分割数据集"><a href="#字典数据读取-分割数据集" class="headerlink" title="字典数据读取/分割数据集"></a>字典数据读取/分割数据集</h2><p>数据分割，可以根据输入的proportion维度自定义分割组数</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mysplit_n</span><span class="token punctuation">(</span>dataset<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token punctuation">,</span> proportion<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">:</span>    out_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>proportion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'dataset_'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' = &#123;&#125;'</span><span class="token punctuation">)</span>        <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'index_'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' = np.arange(sum(proportion[:n]), sum(proportion[:n+1]))'</span><span class="token punctuation">)</span>        <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'out_list.append(dataset_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>proportion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'dataset_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'[name] = dataset[name][index_'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>先读取数据：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset <span class="token operator">=</span> shuffle<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./datasets/'</span></span><span class="token operator">+</span><span class="token string">'RML2016_'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>SNR<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'dB_normalize_power.npz'</span><span class="token punctuation">,</span> allow_pickle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>再对数据进行划分</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'training'</span><span class="token punctuation">,</span> <span class="token string">'unlabeled'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mysplit_n<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>                                                                         <span class="token punctuation">(</span>args<span class="token punctuation">.</span>num_labeled<span class="token punctuation">,</span>                                                                          args<span class="token punctuation">.</span>num_unlabeled<span class="token punctuation">,</span>                                                                          args<span class="token punctuation">.</span>num_valid<span class="token punctuation">,</span>                                                                          args<span class="token punctuation">.</span>num_test                                                                          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>取出分割的数据</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make</span><span class="token punctuation">(</span>dataset<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token punctuation">:</span>    xs<span class="token punctuation">,</span> ys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    nclass <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> name <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>        xs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>        label <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nclass<span class="token punctuation">)</span><span class="token punctuation">)</span>        label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>        ys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>    xs <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>xs<span class="token punctuation">)</span>    ys <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>ys<span class="token punctuation">)</span>    index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    xs <span class="token operator">=</span> xs<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    ys <span class="token operator">=</span> ys<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> xs<span class="token punctuation">,</span> yslabeled_dataset<span class="token punctuation">,</span> labeled_label <span class="token operator">=</span> make<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'training'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>unlabeled_dataset<span class="token punctuation">,</span> unlabeled_label <span class="token operator">=</span> make<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'unlabeled'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>valid_dataset<span class="token punctuation">,</span> valid_label <span class="token operator">=</span> make<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'valid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_dataset<span class="token punctuation">,</span> test_label <span class="token operator">=</span> make<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="指定返回值类型"><a href="#指定返回值类型" class="headerlink" title="指定返回值类型"></a>指定返回值类型</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Tuple<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'11'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="自动给文章建好文件夹并创建-md"><a href="#自动给文章建好文件夹并创建-md" class="headerlink" title="自动给文章建好文件夹并创建.md"></a>自动给文章建好文件夹并创建.md</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> glob<span class="token keyword">import</span> shutil<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">mymkdirs</span><span class="token punctuation">(</span>path_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path_dir<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path_dir<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>path_dir<span class="token operator">+</span><span class="token string">'已创建'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mypaperspace</span><span class="token punctuation">(</span>path_paper<span class="token punctuation">)</span><span class="token punctuation">:</span>    shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>src<span class="token operator">=</span>path_paper <span class="token operator">+</span> <span class="token string">'.pdf'</span><span class="token punctuation">,</span> dst<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path_paper<span class="token punctuation">,</span> <span class="token string">'paper.pdf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path_paper <span class="token operator">+</span> <span class="token string">'\\notes.md'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Date: '</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y.%m.%d  %H:%M'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Author: Joffrey LC'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n------------------------------------------------'</span><span class="token punctuation">)</span>cwd_path <span class="token operator">=</span> <span class="token string">'H:\学习\阅读\面向智能反射面数能系统的波形设计\\test'</span>mymkdirs<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cwd_path<span class="token punctuation">,</span> <span class="token string">'文章备份'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> filename <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>cwd_path<span class="token operator">+</span><span class="token string">'/*.pdf'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>src<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cwd_path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> dst<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cwd_path<span class="token punctuation">,</span> <span class="token string">'文章备份'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    path_dir <span class="token operator">=</span> filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.pdf'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    mymkdirs<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cwd_path<span class="token punctuation">,</span> path_dir<span class="token punctuation">)</span><span class="token punctuation">)</span>    mypaperspace<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cwd_path<span class="token punctuation">,</span> path_dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># To do:</span><span class="token comment"># shutil.move 移动文件名较长的文件时会发生错误，有时间的话尝试自己写一个移动文件的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 工具箱</title>
    <link href="/2021/12/03/hexoutils/"/>
    <url>/2021/12/03/hexoutils/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo本地文件同步到github"><a href="#hexo本地文件同步到github" class="headerlink" title="hexo本地文件同步到github"></a>hexo本地文件同步到github</h1><ol><li><p>github新建分支，必须新建分支，血泪教训</p></li><li><p>将新分支设置为默认分支</p></li><li><p>将新分支clone到本地新文件夹A中</p></li><li><p>删除除了.git之外的所有文件。.git文件夹是隐藏文件夹</p></li><li><p>将本地文件除了.deploy_git和.git两个文件之外的所有文件全部复制，并粘贴到A</p></li><li><p>修改.gitignore文件中忽略的文件夹。因为我用的主题决定了我需要保留node_modules，所以将其中的/node_modules删除</p></li><li><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m &quot;add branch&quot;git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li></ol><p>之后每次更新完博客，记得重复<code>步骤7</code></p><h1 id="在新电脑上clone博客文件"><a href="#在新电脑上clone博客文件" class="headerlink" title="在新电脑上clone博客文件"></a>在新电脑上clone博客文件</h1><p>安装git，安装nodejs，配置ssh key，安装hexo</p><ol><li><p>clone github 上的仓库</p></li><li><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd xxx.github.ionpm installnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li><li><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li></ol><p>每次打开博客文件夹，都需要同步一下。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="创建新文档"><a href="#创建新文档" class="headerlink" title="创建新文档"></a>创建新文档</h1><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>例如 hexo new mypage utils</p><p>意思是创建一个以mypage为模板的博客文件，名字叫做utils.md</p><p>注意 <code>mypage</code>是我自己定义的，自带的只有<code>post</code>,<code>draft</code>,<code>page</code>三种，默认是<code>post</code></p><h1 id="创建草稿不发布"><a href="#创建草稿不发布" class="headerlink" title="创建草稿不发布"></a>创建草稿不发布</h1><ol><li><p>创建草稿mydraft.md</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hexo new draft mydraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>预览草稿</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hexo server --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>发布草稿mydraft.md</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hexo publish draft mydraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ol><h1 id="创建文章资源文件夹"><a href="#创建文章资源文件夹" class="headerlink" title="　创建文章资源文件夹"></a>　创建文章资源文件夹</h1><p>在根目录下的＿config.yml中设置：</p><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后新建post时就会产生资源文件夹</p><h1 id="添加PDF页面"><a href="#添加PDF页面" class="headerlink" title="添加PDF页面"></a>添加PDF页面</h1><p>新建一个html文件在post的资源文件夹中，写入：</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./paper.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>然后再资源文件夹中放入<strong>paper.pdf</strong>，并在文章中用超链接引用这个html文件。<strong>注意，在文章中默认路径在资源文件夹中</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>utils</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Self-Supervised Learning综述小结</title>
    <link href="/2021/12/03/Self-Supervised%20Learning/"/>
    <url>/2021/12/03/Self-Supervised%20Learning/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Pre-train-Fine-tune"><a href="#Pre-train-Fine-tune" class="headerlink" title="Pre-train Fine-tune"></a>Pre-train Fine-tune</h2><p><strong>Pre-train Fine-tune</strong>算是一种Transfer Learning。</p><p>首先，假设按照SimCLR中的设定，将一般的模型分为两部分，分别为<strong>Encoder</strong>和<strong>Projection Head</strong>。<strong>Encoder</strong>结构类似于AutoEncoder中的Encoder部分，输出是一个低维的张量，可以称为输入数据的<strong>表征</strong>。<strong>Projection Head</strong>可以认为是一个全连接层，将Encoder输出的张量映射为更低维的张量（或者称为嵌入向量）。</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/pre_train&amp;finetune.svg" alt="pre_train&amp;finetune"></p><p><strong>Pre-train</strong>就是预训练<strong>Encoder</strong>部分，得到一个有用的<strong>表征</strong>，通过<strong>Projection Head</strong>得到输出的嵌入向量，进行损失函数计算和模型更新。然后在不同的<strong>下游任务</strong>中，删掉<strong>Projection Head</strong>，<strong>重新训练</strong>。</p><p>预训练<strong>Encoder</strong>的过程就是<strong>Pre-train</strong>；删掉<strong>Projection Head</strong>，<strong>重新训练</strong>的过程就叫做<strong>Fine-tune</strong></p><p>此处的<strong>重新训练</strong>可以分为两种：</p><ol><li>ConvNet as fixed feature extractor：即删掉<strong>Projection Head</strong>后，重新训练一个<strong>Projection Head</strong>。</li><li>Fine-tuning the ConvNet：即对<strong>Encoder</strong>进行微调，同时重新训练一个<strong>Projection Head</strong></li></ol><p>对于<strong>Self-supervised Learning</strong>，要明确其严格意义上讲叫做<strong>无监督表示学习</strong>。和传统的无监督学习不同，<strong>SSL</strong>最终还是会用到有标记数据，只不过相对于监督训练，可以在极小的有标记数据下实现较高的正确率。</p><p><strong>SSL</strong>一般将<strong>Pre-train</strong>和下游任务的<strong>fine-tune</strong>分开，不过也有很多文章尝试将二者结合起来。总而言之，四个词总结为：</p><blockquote><p>Unsupervised Pre-train, Supervised Fine-tune.</p></blockquote><h2 id="Self-supervised-Learning"><a href="#Self-supervised-Learning" class="headerlink" title="Self-supervised Learning"></a>Self-supervised Learning</h2><p><strong>Self-supervised Learning</strong>就是通过大量无标记数据，找寻数据之间的内在关系，建立一个能够提取泛化特征的<strong>Encoder</strong>，然后根据下游任务的需要，在下游任务的少量有标记数据集中进行<strong>Fine-tune</strong>。从生物的角度讲，可以理解为在无标记数据集中培育一个干细胞，然后在具体的下游任务中，利用少量资源，就可以将干细胞分化为红细胞、白细胞、上皮细胞；而不是每次都搞大量资源从头开始造不同结构的不同细胞。根据寻找这种内在关系的方式不同，可以将<strong>SSL</strong>分为两个大类（也有文章分为三个大类）：</p><ol><li>基于生成/预测的SSL</li><li>基于对比的SSL</li></ol><h3 id="基于生成-预测的SSL"><a href="#基于生成-预测的SSL" class="headerlink" title="基于生成/预测的SSL"></a>基于生成/预测的SSL</h3><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210828153720420.png" alt="基于生成/预测的SSL"></p><p>对于第一种，基于生成/预测的SSL，典型的有<a href="https://openaccess.thecvf.com/content_cvpr_2016/papers/Pathak_Context_Encoders_Feature_CVPR_2016_paper.pdf">Context Encoders: Feature Learning by Inpainting</a>，通过对图像的一部分扣除，将扣除后剩余部分进行Encoder，输出一个大小与扣除部分相同的张量，然后将扣除的部分和Encoder输出的部分做Loss，就可以让Encoder全面的知道输入的图片究竟是怎么样的。（当然也可以用来做一些图像补全工作）</p><p><img src="https://mymarkdown-pic.oss-cn-chengdu.aliyuncs.com/img441/image-20210828195036104.png" alt="SSL用于图像补全"></p><h3 id="基于对比的SSL"><a href="#基于对比的SSL" class="headerlink" title="基于对比的SSL"></a>基于对比的SSL</h3><p>这部分是目前研究的重点，有一些典型的文章：</p><h4 id="DIM"><a href="#DIM" class="headerlink" title="DIM"></a>DIM</h4><p><a href="https://arxiv.org/pdf/1808.06670.pdf?source=post_page---------------------------">Learning Deep Representations By Mutual Information Estimation And Maximization</a></p><h4 id="CPC"><a href="#CPC" class="headerlink" title="CPC"></a>CPC</h4><p><a href="https://arxiv.org/pdf/1807.03748.pdf">Representation Learning with Contrastive Predictive Coding</a></p><h4 id="CMC"><a href="#CMC" class="headerlink" title="CMC"></a>CMC</h4><p><a href="https://arxiv.org/pdf/1906.05849.pdf">Contrastive Multiview Coding</a></p><h4 id="MoCo"><a href="#MoCo" class="headerlink" title="MoCo"></a>MoCo</h4><p><a href="https://arxiv.org/pdf/1911.05722.pdf">Momentum Contrast for Unsupervised Visual Representation Learning</a></p><h4 id="SimCLR"><a href="#SimCLR" class="headerlink" title="SimCLR(*)"></a>SimCLR(<strong>*</strong>)</h4><p>SimCLR及其改进版本SimCLR-v2，其完整过程请参考（大佬们已经总结得十分详细了，没有必要再整理了）：</p><p><a href="https://zhuanlan.zhihu.com/p/378953015">详细介绍</a></p><p>[精简思路](</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Self-Supervised Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
      <tag>overview</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
